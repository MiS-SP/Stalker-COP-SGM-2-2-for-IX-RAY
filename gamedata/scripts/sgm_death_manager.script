local set_weapon_cond_ST_from = 40
local set_weapon_cond_ST_before = 85
local set_weapon_cond_AF_from = 40
local set_weapon_cond_AF_before = 70

function create_release_item_iterator(npc)
	if sgm_g.find_in_string(npc:section(), "dead_body_") then
		npc:iterate_inventory(corpse_exception, npc)
	end
	if sgm_g.find_in_string(npc:section(), "_trader") then
		npc:iterate_inventory(release_all_immediately, npc)
	end
	if sgm_g.find_out_string(npc:section(), "_trader") and sgm_g.find_out_string(npc:section(), "dead_body_") then
		npc:iterate_inventory(keep_item, npc)
	end
end

function create_release_item_post(npc)
	--/ SGM in
	local scheme_param = sgm_flags.table_mod_schemes[npc:id()]
	if scheme_param ~= nil and (scheme_param.only_choose == "true" or (scheme_param.death_cleaning ~= nil and scheme_param.death_cleaning[1] ~= nil and tostring(scheme_param.death_cleaning[1]) == "true")) then
		return
	end
	for k, v in pairs(spawn_items) do
		if sgm_g.find_in_string(npc:section(), "_trader") or sgm_g.find_in_string(sgm_functions.ReadCommunity(npc:section()), "bodyguard") then
			return
		else
			if check_item_dependence(npc, k) == true then
				if count_by_level[k] == nil then
					abort("Incorrect count settings in death_manager for object[%s]", k)
				end
				local number = math.ceil(math.random(count_by_level[k].min, count_by_level[k].max))
				create_items(npc, k, number, v)
			end
		end
	end
	--/ SGM out
end

function keep_item(npc, item)
	if not sgm_g.check_death_item(section) then
		alife():release(alife():object(item:id()), true)
		return
	end
end
function set_weapon_drop_condition(item, npc)
	local condition = math.random(set_weapon_cond_ST_from, set_weapon_cond_ST_before) / 100
	if npc ~= nil and sgm_g.find_in_string(npc:profile_name(), "alfa_") then
		condition = math.random(set_weapon_cond_AF_from, set_weapon_cond_AF_before) / 100
	end
	item:set_condition(condition)
end

function corpse_exception(npc,item)
	local section = item:section()
	local ini = npc:spawn_ini()
        if not sgm_g.check_death_item(section) then
           alife():release(alife():object(item:id()),true)
           return
        end
	if ini and ini:section_exist("keep_items") and section~="guitar_a" and section~="harmonica_a" and section~="wpn_binoc" and section~="device_torch" then
		return
	end
	if isArtefact(item) then
		return
	end
	if section == "bolt" then
		return
	end
	if always_keep_item[section] == true then
		return
	end
	if isWeapon(item) and not(get_clsid(item)==clsid.wpn_grenade_rgd5_s or get_clsid(item)==clsid.wpn_grenade_f1_s) then
		set_weapon_drop_condition(item,npc)
		return
	end
	if xr_corpse_detection.lootable_table[section] == true and ammo_sections[section] == nil then
		return
	end
        alife():release(alife():object(item:id()), true)
end
function release_all_immediately(npc,item)
	local section=item:section()
	local ini = npc:spawn_ini()
        if not sgm_g.check_death_item(section) then
           alife():release(alife():object(item:id()),true)
           return
        end
	if ini and ini:section_exist("keep_items") and section~="guitar_a" and section~="harmonica_a" and section~="wpn_binoc" and section~="device_torch" and section~="device_pda" then
		return
	end
	if isArtefact(item) then
		return
	end
	if section == "bolt" then
		return
	end
	if always_keep_item[section] == true then
		return
	end
	if isWeapon(item) and not(get_clsid(item)==clsid.wpn_grenade_rgd5_s or get_clsid(item)==clsid.wpn_grenade_f1_s) then
		set_weapon_drop_condition(item,npc)
		return
	end
	if xr_corpse_detection.lootable_table[section] == true and ammo_sections[section] == nil then
		return
	end
	alife():release(alife():object(item:id()),true)
end