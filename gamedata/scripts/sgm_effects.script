---==================================================================================================---
--------------------------------------------------------------------------------------------------------
------------------------------------------(Эффекты)-----------------------------------------------------
--------------------------------------------------------------------------------------------------------
---==================================================================================================---
local prev_health = 0
function effects_main()
   effects_update()
end

function effects_update()
   --//Сон ГГ при большом факторе потребности//-->
   if sgm_g.check_seconds(1) and sgm_g.r_mod_params("bool", "need_actor_dream", true) and sgm_g.read_mod_param("sleep_factor") ~= nil then
      local sleep_factor = sgm_g.read_mod_param("sleep_factor")
      local max_time = sgm_g.r_mod_params("number", "max_no_dream_time", 16) * 60
      if sgm_flags.bool_approach_sleep_began == false and sgm_flags.string_approach_sleep_color == "critical" then
         level.add_cam_effector("camera_effects\\surge_02.anm", 10, false, "_g.activate_approach_sleep")
         level.add_pp_effector("deimos1.ppe", 11035, false)
         sgm_flags.bool_approach_sleep_began = true
         xr_effects.disable_ui(db.actor, nil)
         play_snd_at_actor([[device\bed_2]])
      end
      if sgm_flags.bool_approach_sleep == true then
         sgm_g.write_mod_param("sleep_factor", sleep_factor - 45)
         sgm_flags.string_approach_sleep_color = "sleeped"
         xr_effects.disable_ui(db.actor, nil)
         level.add_pp_effector("sleep_fade.ppe", 11, false)
         level.add_cam_effector("camera_effects\\dream.anm", 10, false, "sgm_ui_sleep_dialog.sleep_factor_callback")
         give_info("actor_is_sleeping")
         _G.mus_vol = get_console():get_float("snd_volume_music")
         _G.amb_vol = get_console():get_float("snd_volume_eff")
         get_console():execute("snd_volume_music 0")
         get_console():execute("snd_volume_eff 0")
         surge_manager.resurrect_skip_message()
         sgm_flags.bool_approach_sleep_began = false
         sgm_flags.bool_approach_sleep = false
      end
      if sleep_factor >= (max_time - 30) and sleep_factor < max_time then
         if sgm_flags.timer_approach_sleep_warning == 0 then
            level.add_pp_effector("surge_shock.ppe", 331510, false)
            start_flague_timer("timer_approach_sleep_warning", 3800)
         end
         if sgm_flags.timer_approach_sleep_warning ~= 0 then
            if time_global() >= sgm_flags.timer_approach_sleep_warning then
               sgm_flags.timer_approach_sleep_warning = 0
            end
         end
      end
   end
   --//Уборка оружия ГГ при использовании некоторых предметов//-->
   if sgm_flags.timer_item_activation ~= 0 then
      sgm_g.actor_forced_hide_weapon()
      if sgm_g.check_flague_timer("timer_item_activation") then
         sgm_g.abort_flague_timer("timer_item_activation")
         sgm_g.actor_forced_restore_weapon()
         --db.actor:allow_sprint(true)
      end
   end
   --//Снижение воздействия ауры бездействия//-->
   if sgm_g.check_seconds(2) then
      if sgm_flags.bool_aura_inactivity_action == true then
         bind_stalker.hide_weapon(sgm_flags.string_aura_inactivity_name)
         sgm_flags.bool_aura_inactivity_need_release = true
      elseif sgm_flags.bool_aura_inactivity_action == false and sgm_flags.bool_aura_inactivity_need_release == true then
         bind_stalker.restore_weapon(sgm_flags.string_aura_inactivity_name)
         sgm_flags.bool_aura_inactivity_need_release = false
      end
   end
   --//Детонация обьекта с бомбой//-->
   if sgm_g.read_mod_param("detonation_charge_id") ~= nil then
      if sgm_g.read_mod_param("detonation_charge_timer") ~= nil and sgm_g.read_mod_param("detonation_charge_timer") <= time_global() then
         sgm_g.detonate_explosive_charge(sgm_g.read_mod_param("detonation_charge_id"), true)
      end
   end
   sgm_g.check_remote_charge(1)
   sgm_g.check_remote_charge(2)
   sgm_g.check_remote_charge(3)
   --//Сон со спальником//-->
   if sgm_g.check_game_timer("sleeping_bag_timer") then
      level.remove_pp_effector(76470)
      level.set_time_factor(DefaultTimeFactor())
      level.enable_input()
      level.add_cam_effector("camera_effects\\fusker.anm", 76431, false, "")
      level.add_pp_effector("actor_hit.ppe", 76425, false)
      level.add_pp_effector("shock_hit.ppe", 76426, false)
      db.actor.psy_health = 0.25
      level.show_indicators()
      disable_info("actor_in_sleep")
      sgm_g.abort_game_timer("sleeping_bag_timer")
   end
   --//Помутнение в глазах//-->
   if sgm_g.check_seconds(1) then
      if sgm_g.object_alive(db.actor) and sgm_g.dont_has_alife_info("opt_disable_actor_vertigo") and db.actor.health < sgm_g.r_mod_params("number", "health_vertigo_threshold", 0.30) then
         level.add_pp_effector("actor_hit.ppe", 510, false)
         if sgm_flags.string_vertigo_sound and sgm_flags.string_vertigo_sound:playing() == false then
            sgm_flags.string_vertigo_sound:play(db.actor, 1, sound_object.s2d + sound_object.looped)
         end
      elseif sgm_g.object_alive(db.actor) and (db.actor.health >= sgm_g.r_mod_params("number", "health_vertigo_threshold", 0.30) or has_alife_info("opt_disable_actor_vertigo")) then
         if sgm_flags.string_vertigo_sound and sgm_flags.string_vertigo_sound:playing() then
            sgm_flags.string_vertigo_sound:stop()
         end
      elseif not sgm_g.object_alive(db.actor) then
         if sgm_flags.string_vertigo_sound and sgm_flags.string_vertigo_sound:playing() then
            sgm_flags.string_vertigo_sound:stop()
         end
      end
   end
   --//Звук при критическом состоянии пси-здоровья//-->
   if sgm_g.check_seconds(1) then
      if sgm_g.object_alive(db.actor) and db.actor.psy_health < 0.15 then
         if sgm_flags.string_psy_critical_sound and sgm_flags.string_psy_critical_sound:playing() == false then
            sgm_flags.string_psy_critical_sound:play(db.actor, 1, sound_object.s2d + sound_object.looped)
         end
      elseif sgm_g.object_alive(db.actor) and db.actor.psy_health >= 0.15 then
         if sgm_flags.string_psy_critical_sound and sgm_flags.string_psy_critical_sound:playing() then
            sgm_flags.string_psy_critical_sound:stop()
         end
      elseif not sgm_g.object_alive(db.actor) then
         if sgm_flags.string_psy_critical_sound and sgm_flags.string_psy_critical_sound:playing() then
            sgm_flags.string_psy_critical_sound:stop()
         end
      end
   end
   --//Автоматическое вытаскивание болта//-->
   if sgm_flags.timer_detector_with_bolt == 0 and db.actor:active_detector() ~= nil and db.actor:active_slot() == 0 then
      db.actor:activate_slot(6)
      start_flague_timer("timer_detector_with_bolt", 10000)
   end
   --//Авто-энергетик//-->
   if has_alife_info("opt_activate_auto_energy") and sgm_g.check_seconds(2) and sgm_g.object_alive(db.actor) then
      if db.actor.power < sgm_g.r_mod_params("number", "auto_energy_threshold", 0.20) then
         if db.actor:object("energy_drink") and sgm_flags.string_auto_energy_type == "nil" then
            start_flague_timer("timer_auto_energy", 60000)
            sgm_flags.string_auto_energy_type = "energy_drink"
            db.actor:eat(db.actor:object("energy_drink"))
            news_manager.send_tip(db.actor, sgm_functions.ReadCaption("energy_drink"), 0, "got_medicine", 2000, nil,
               "st_auto_energy_used")
         elseif db.actor:object("wild_drink") and sgm_flags.string_auto_energy_type == "nil" then
            start_flague_timer("timer_auto_energy", 60000)
            sgm_flags.string_auto_energy_type = "wild_drink"
            db.actor:eat(db.actor:object("wild_drink"))
            news_manager.send_tip(db.actor, sgm_functions.ReadCaption("wild_drink"), 0, "got_medicine", 2000, nil,
               "st_auto_energy_used")
         end
      end
   end
   --//Система автоматического приема препаратов//-->
   if has_alife_info("opt_activate_automatic_use") and sgm_g.check_seconds(2) and sgm_g.object_alive(db.actor) then
      --/Борьба с кровотечением.
      if db.actor.bleeding > 0.05 and sgm_flags.timer_use_bandage == 0 then
         if db.actor:object("bandage") then
            start_flague_timer("timer_use_bandage", sgm_functions.GetBoostTimeMs("bandage"))
            automatic_use("bandage", "is_bleeding")
         elseif db.actor:object("bio_bandage") then
            start_flague_timer("timer_use_bandage", sgm_functions.GetBoostTimeMs("bio_bandage"))
            automatic_use("bio_bandage", "is_bleeding")
         end
      end
      --/Восстановление здоровья.
      if db.actor.health <= 0.30 and sgm_flags.timer_use_medkit == 0 then
         if db.actor:object("medkit_used") then
            start_flague_timer("timer_use_medkit", sgm_functions.GetBoostTimeMs("medkit_used"))
            automatic_use("medkit_used", "is_health")
         elseif db.actor:object("medkit_army_used") then
            start_flague_timer("timer_use_medkit", sgm_functions.GetBoostTimeMs("medkit_army_used"))
            automatic_use("medkit_army_used", "is_health")
         elseif db.actor:object("medkit_scientic_used") then
            start_flague_timer("timer_use_medkit", sgm_functions.GetBoostTimeMs("medkit_scientic_used"))
            automatic_use("medkit_scientic_used", "is_health")
         elseif db.actor:object("medkit_elite_used") then
            start_flague_timer("timer_use_medkit", sgm_functions.GetBoostTimeMs("medkit_elite_used"))
            automatic_use("medkit_elite_used", "is_health")
         elseif db.actor:object("medkit") then
            start_flague_timer("timer_use_medkit", sgm_functions.GetBoostTimeMs("medkit"))
            automatic_use("medkit", "is_health")
         elseif db.actor:object("medkit_army") then
            start_flague_timer("timer_use_medkit", sgm_functions.GetBoostTimeMs("medkit_army"))
            automatic_use("medkit_army", "is_health")
         elseif db.actor:object("medkit_scientic") then
            start_flague_timer("timer_use_medkit", sgm_functions.GetBoostTimeMs("medkit_scientic"))
            automatic_use("medkit_scientic", "is_health")
         elseif db.actor:object("medkit_elite") then
            start_flague_timer("timer_use_medkit", sgm_functions.GetBoostTimeMs("medkit_elite"))
            automatic_use("medkit_elite", "is_health")
         end
      end
      --/Восстановление пси-здоровья.
      if db.actor.psy_health <= 0.60 and sgm_flags.timer_use_psy_complex == 0 then
         if db.actor:object("psy_complex") then
            start_flague_timer("timer_use_psy_complex", 2500)
            automatic_use("psy_complex", "is_psy_health")
         end
      end
      --/Борьба с излучением.
      if db.actor.radiation > 0.05 and sgm_flags.timer_use_antirad == 0 then
         if db.actor:object("antirad") then
            start_flague_timer("timer_use_antirad", sgm_functions.GetBoostTimeMs("antirad"))
            automatic_use("antirad", "is_radiation")
         elseif db.actor:object("bio_bandage") then
            start_flague_timer("timer_use_antirad", sgm_functions.GetBoostTimeMs("bio_bandage"))
            automatic_use("bio_bandage", "is_radiation")
         end
      end
   end
   --//При критическом состоянии здоровья//-->
   if prev_health > db.actor.health + 0.05 then
      if sgm_g.dont_has_alife_info("opt_disable_shock_hits") then
         level.add_pp_effector("shock_hit.ppe", 91350, false)
         level.set_pp_effector_factor(91350, 20)
         if prev_health > db.actor.health + 0.55 then
            level.add_cam_effector("camera_effects\\fusker.anm", 91383, false, "")
            play_folder_snd([[actor\pain_2]])
         end
         if prev_health > db.actor.health + 0.80 then
            local active_item = db.actor:active_item()
            if active_item then
               local active_sect = active_item:section()
               if find_out_string(active_sect, "bolt") and find_out_string(active_sect, "knife") and find_out_string(active_sect, "binoc") then
                  db.actor:drop_item(active_item)
               end
            end
         end
      end
      if has_alife_info("opt_activate_shock_motion") then
         local heavy_hit_rnd = math.random(1, 5)
         if prev_health > db.actor.health + 0.12 then
            if heavy_hit_rnd == 1 then
               level.add_cam_effector("camera_effects\\hit_front.anm", 91383, false, "")
            elseif heavy_hit_rnd == 2 then
               level.add_cam_effector("camera_effects\\hit_right.anm", 91383, false, "")
            elseif heavy_hit_rnd == 3 then
               level.add_cam_effector("camera_effects\\hit_back.anm", 91383, false, "")
            elseif heavy_hit_rnd == 4 then
               level.add_cam_effector("camera_effects\\hit_left.anm", 91383, false, "")
            else
               level.add_cam_effector("camera_effects\\hit_front_left.anm", 91383, false, "")
            end
         end
      end
   end
   prev_health = db.actor.health
   --//Контроль за хит-марками//-->
   if sgm_g.check_seconds(5) then
      if has_alife_info("opt_disable_hit_marks") then
         db.actor:disable_hit_marks(true)
      else
         db.actor:disable_hit_marks(false)
      end
   end
   --//Работа эмулятора мозговых волн//-->
   if sgm_g.check_seconds(1) and db.actor:object("emulator_brain_waves") then
      if sgm_g.dont_has_alife_info("red_psyho_start") or has_alife_info("red_psyho_controller_destroyed") then
         if db.actor.psy_health <= 0.95 then
            db.actor.psy_health = 1.0
         end
      end
   end
   --//Гибель ГГ при критическом состоянии пси-здоровья//-->
   if sgm_g.check_seconds(1) and db.actor.psy_health <= 0.02 then
      db.actor:kill(db.actor)
   end
   --//Сопровождение токсических накоплений эффектом//-->
   if sgm_g.r_mod_params("bool", "present_toxicity", true) == true then
      sgm_g.setup_effector_chain(sgm_g.read_mod_param("actor_toxicity"), "ppe", 76050, 0.00, 1.00, true, 25000, false,
         true,
         true,
         0.80, 3000, 0.95, "alcohol.ppe")
   end
   --//Сопровождение потери пси-здоровья PPE эффектом//-->
   if db.actor ~= nil then
      sgm_g.setup_effector_chain(db.actor.psy_health, "ppe", 75057, 0.99, 0.00, false, 2500, false, true, false, nil, nil,
         nil,
         "psi.ppe")
   end
end

-------------------------------------//Copyright GeJorge//-------------------------------------------------
