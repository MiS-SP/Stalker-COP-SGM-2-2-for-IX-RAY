----------------------------------------------------------------------------------------------------
-- Walkers
---------------------------------------------------------------------------------------------------------------------
class "evaluator_need_walker" (property_evaluator)
function evaluator_need_walker:__init(storage, name) super(nil, name)
		self.st = storage
end
function evaluator_need_walker:evaluate()
		return xr_logic.is_active(self.object, self.st)
end


local assoc_tbl = 	{
						idle = {director = {"wait"}},
						harmonica = {director = {"play_harmonica"}},
						guitar = {director = {"play_guitar"}},
						story = {director = {"wait"}},
					}


----------------------------------------------------------------------------------------------------------------------
class "action_walker_activity" (action_base)
function action_walker_activity:__init (npc, action_name, storage) super(nil, action_name)
	self.st = storage
	self.move_mgr = db.storage[npc:id()].move_mgr

	self.st.description = "walker_camp"
	self.avail_actions = xr_animpoint_predicates.associations[self.st.description]
	self.st.approved_actions = {}

	for k,v in pairs(self.avail_actions) do
		-- Убираем те действия, которые не подходят по прекондишну
		if v.predicate(npc:id())==true then
			table.insert(self.st.approved_actions, v)
		end
	end
end
function action_walker_activity:initialize()
	action_base.initialize(self)
	self.object:set_desired_position()
	self.object:set_desired_direction()
	self:reset_scheme(nil, self.object)
end
function action_walker_activity:activate_scheme(loading, npc)
	self.st.signals = {}
        --/ SGM in
        sgm_flags.table_mod_schemes[self.object:id()]={}
        sgm_flags.table_mod_schemes[self.object:id()].avail_speak_bool=false
        sgm_flags.table_mod_schemes[self.object:id().."avail_speak_timer"]=0
        sgm_flags.table_mod_schemes[self.object:id().."precond_start"]=0
        sgm_flags.table_mod_schemes[self.object:id().."precond_end"]=0
        --/ SGM out
	self:reset_scheme(loading, npc)
end
function action_walker_activity:reset_scheme(loading, npc)
	if self.st.path_walk_info == nil then
		self.st.path_walk_info = utils.path_parse_waypoints(self.st.path_walk)
	end
	if self.st.path_look_info == nil then
		self.st.path_look_info = utils.path_parse_waypoints(self.st.path_look)
	end

	self.move_mgr:reset(self.st.path_walk, self.st.path_walk_info, self.st.path_look, self.st.path_look_info, self.st.team, self.st.suggested_state)
end
function action_walker_activity:execute()
	action_base.execute(self)

	self.move_mgr:update()

	-- Определяем, в каком мы кемпе.
	local camp = sr_camp.get_current_camp(self.object:position())
	if camp ~= nil and self.st.use_camp == true then
		self.camp = camp
		self.camp:register_npc(self.object:id())
		self.in_camp = true
	else
		if self.in_camp == true then
			self.camp:unregister_npc(self.object:id())
			self.in_camp = nil
		end
	end

	if not self.in_camp and self.st.sound_idle ~= nil then
		xr_sound.set_sound_play(self.object:id(), self.st.sound_idle)
	end
        --/ SGM in
        if sgm_flags.table_mod_schemes[self.object:id()].update==nil then
           self:check_logic_condlists(self.object,self.st.saved_ini,self.st.saved_section)
           sgm_flags.table_mod_schemes[self.object:id()].update=time_global()+1000
        end
        if sgm_flags.table_mod_schemes[self.object:id()].update~=nil then
           if time_global()>=sgm_flags.table_mod_schemes[self.object:id()].update then
              sgm_flags.table_mod_schemes[self.object:id()].update=nil
           end
        end
        local npc=self.object
        local npc_id=npc:id()
        local scheme_param=sgm_flags.table_mod_schemes[npc_id]
        if scheme_param.approach_info~=nil and scheme_param.approach_info[1]~=nil and scheme_param.approach_info[2]~=nil and dont_has_alife_info(scheme_param.approach_info[1]) then
           local dist_type="<="
           if scheme_param.approach_info[3]~=nil then dist_type=scheme_param.approach_info[3] end
           if dist_type=="<=" and distance_between(db.actor,npc)<=tonumber(scheme_param.approach_info[2]) then give_info(scheme_param.approach_info[1])
           elseif dist_type==">=" and distance_between(db.actor,npc)>=tonumber(scheme_param.approach_info[2]) then give_info(scheme_param.approach_info[1])
           elseif dist_type=="<" and distance_between(db.actor,npc)<tonumber(scheme_param.approach_info[2]) then give_info(scheme_param.approach_info[1])
           elseif dist_type==">" and distance_between(db.actor,npc)>tonumber(scheme_param.approach_info[2]) then give_info(scheme_param.approach_info[1])
           elseif dist_type=="=" and distance_between(db.actor,npc)==tonumber(scheme_param.approach_info[2]) then give_info(scheme_param.approach_info[1])
           end
        end
        if scheme_param.precond_timer~=nil then
           if scheme_param.precond_timer=="true" then
              if sgm_flags.table_mod_schemes[npc_id.."precond_start"]==0 then
                 sgm_flags.table_mod_schemes[npc_id.."precond_start"]=time_global()
              end
              local p_timer=time_global()-sgm_flags.table_mod_schemes[npc_id.."precond_start"]
              if exists(scheme_param.precond_action) and tonumber(scheme_param.precond_action[1])~=0 and p_timer>tonumber(scheme_param.precond_action[1]) then
                 sgm_functions.execute_condlist(npc,self.st.saved_section,scheme_param.precond_action[2])
                 sgm_flags.table_mod_schemes[npc_id.."precond_start"]=0
              end
           else
              if sgm_flags.table_mod_schemes[npc_id.."precond_start"]~=0 then
                 sgm_flags.table_mod_schemes[npc_id.."precond_start"]=0
              end
           end
        end
        self:check_avail_speak(npc,scheme_param)
        --/ SGM out
end
--/ SGM in
function action_walker_activity:check_logic_condlists(npc,ini,section)
   local scheme_param=sgm_flags.table_mod_schemes[npc:id()]
--/if scheme_param.section==nil or (scheme_param.section~=nil and scheme_param.section~=self.st.saved_section) then --/Без постоянного обновления.
--/   scheme_param.section = self.st.saved_section
      scheme_param.approach_info = sgm_functions.check_section_stick(ini,section,"approach_info",nil)
      scheme_param.precond_timer = to_string(sgm_functions.check_section_condlist(ini,section,"precond_timer",nil))
      scheme_param.precond_action = sgm_functions.check_section_stick(ini,section,"precond_action",nil)
      scheme_param.avail_speak = sgm_functions.check_section_stick(ini,section,"avail_speak",nil)
--/end
end
function action_walker_activity:check_avail_speak(npc,scheme_param)
   local npc_id=npc:id()
   if exists(scheme_param.avail_speak) and exists(scheme_param.avail_speak[1]) then
      if dont_talk and sgm_flags.table_mod_schemes[npc_id.."avail_speak_timer"]~=0 then
         sgm_flags.table_mod_schemes[npc_id.."avail_speak_timer"]=0
      end
      if sgm_flags.table_mod_schemes[npc_id.."avail_speak_timer"]~=0 then
         if time_global()>=sgm_flags.table_mod_schemes[npc_id.."avail_speak_timer"] then
            if scheme_param.avail_speak[3]=="false" and sgm_flags.table_mod_schemes[npc_id].avail_speak_bool==false then
               if find_in_string(scheme_param.avail_speak[2],"=") or find_in_string(scheme_param.avail_speak[2],"+") or find_in_string(scheme_param.avail_speak[2],"-") then
                  sgm_functions.execute_condlist(npc,self.st.saved_section,scheme_param.avail_speak[2])
               else
                  play_theme_snd(npc,scheme_param.avail_speak[2])
               end
               sgm_flags.table_mod_schemes[npc_id].avail_speak_bool=true
            elseif scheme_param.avail_speak[3]=="true" then
               if find_in_string(scheme_param.avail_speak[2],"=") or find_in_string(scheme_param.avail_speak[2],"+") or find_in_string(scheme_param.avail_speak[2],"-") then
                  sgm_functions.execute_condlist(npc,self.st.saved_section,scheme_param.avail_speak[2])
               else
                  play_theme_snd(npc,scheme_param.avail_speak[2])
               end
            end
            sgm_flags.table_mod_schemes[npc_id.."avail_speak_timer"]=0
         end
      else
         sgm_flags.table_mod_schemes[npc_id.."avail_speak_timer"]=time_global()+(tonumber(scheme_param.avail_speak[1])*1000)
      end
   end
end
--/ SGM out
function action_walker_activity:update()
	--printf("update")
	if self.camp == nil then
		return
	end

	local camp_action, is_director = self.camp:get_camp_action(self.object:id())
	--printf("camp_action %s, %s", camp_action, tostring(is_director))

	if not is_director then
		return
	end

	local tbl = assoc_tbl[camp_action].director
	local anim = tbl[math.random(#tbl)]
	state_mgr.set_state(self.object, anim)
end

function action_walker_activity:finalize()
	self.move_mgr:finalize()

	if self.in_camp == true then
		self.camp:unregister_npc(self.object:id())
		self.in_camp = nil
	end
	action_base.finalize(self)
end
--' Возвращает достиг ли персонаж точки начала работы схемы
function action_walker_activity:position_riched()
	return self.move_mgr:arrived_to_first_waypoint()
end

function action_walker_activity:net_destroy(npc)
	if self.in_camp == true then
		self.camp:unregister_npc(npc:id())
		self.in_camp = nil
	end
end




----------------------------------------------------------------------------------------------------------------------
--walker binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
		printf("DEBUG: add_to_binder: scheme='%s', section='%s'", scheme, section)
		local operators	= {}
		local properties  = {}

		local manager = npc:motivation_action_manager()

		properties["event"] = xr_evaluators_id.reaction
	 	properties["need_walker"] = xr_evaluators_id.zmey_walker_base + 1

		properties["state_mgr_logic_active"] 	= xr_evaluators_id.state_mgr + 4

	 	operators["action_walker"] = xr_actions_id.zmey_walker_base + 1

			 -- -- evaluators
--		callstack()
		manager:add_evaluator(properties["need_walker"], this.evaluator_need_walker(storage, "walker_need"))

		local new_action = this.action_walker_activity(npc, "action_walker_activity", storage)
		new_action:add_precondition(world_property(stalker_ids.property_alive, true))
		new_action:add_precondition(world_property(stalker_ids.property_danger,false))
		new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
		new_action:add_precondition(world_property(stalker_ids.property_anomaly,false))
		new_action:add_precondition(world_property(properties["need_walker"], true))
		xr_motivator.addCommonPrecondition(new_action)

		new_action:add_effect(world_property(properties["need_walker"], false))
		new_action:add_effect (world_property(properties["state_mgr_logic_active"], false))
		manager:add_action(operators["action_walker"], new_action)

		-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
		xr_logic.subscribe_action_for_events(npc, storage, new_action)

		new_action = manager:action(xr_actions_id.alife)
		new_action:add_precondition(world_property(properties["need_walker"], false))
end

-- Включение схемы
--
-- enabled - включена ли схема
-- path_walk - основной путь, по которому ходит охранник
-- path_look [опционально] - путь, куда смотрит охранник
-- team [опционально] - команда для синхронизации
--
function set_scheme(npc, ini, scheme, section, gulag_name)
	printf("DEBUG: set_scheme: scheme='%s', section='%s', gulag_name='%s'", scheme, section, tostring(gulag_name))
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	printf("DEBUG: set_scheme: storage assigned")

	st.logic     = xr_logic.cfg_get_switch_conditions(ini, section, npc)

	st.path_walk = utils.cfg_get_string(ini, section, "path_walk", npc, true,  gulag_name)

	if not level.patrol_path_exists(st.path_walk) then
		abort("there is no patrol path %s", st.path_walk)
	end

	st.path_look = utils.cfg_get_string(ini, section, "path_look", npc, false, gulag_name)

	if st.path_walk == st.path_look then
		abort("You are trying to set 'path_look' equal to 'path_walk' in section [%s] for npc [%s]", section, npc:name())
	end

	st.team      = utils.cfg_get_string(ini, section, "team",      npc, false, gulag_name)
	st.sound_idle= utils.cfg_get_string(ini, section, "sound_idle",npc, false, "")
	st.use_camp  = utils.cfg_get_bool(ini, section, "use_camp",npc, false, false)

	st.suggested_state = {}
	st.suggested_state.standing = utils.cfg_get_string(ini, section, "def_state_standing", npc, false, "")

	st.suggested_state.moving  = utils.cfg_get_string(ini, section, "def_state_moving1", npc, false, "")
	st.suggested_state.moving  = utils.cfg_get_string(ini, section, "def_state_moving", npc, false, "", st.suggested_state.moving)

	st.path_walk_info = nil -- Будут инициализированы в reset(), сейчас пути могут быть еще
	st.path_look_info = nil -- не загружены.
        --/ SGM in
	st.saved_ini   = ini
	st.saved_section = section
        --/ SGM out
end
