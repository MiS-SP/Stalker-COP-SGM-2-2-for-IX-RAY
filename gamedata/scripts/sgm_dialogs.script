---==================================================================================================---
--------------------------------------------------------------------------------------------------------
-------------------------------------(Функции для диалогов)---------------------------------------------
--------------------------------------------------------------------------------------------------------
---==================================================================================================---
function switch_to_trade(actor, npc)
   db.actor:switch_to_trade()
end

function disable_trade(npc)
   npc:enable_trade()
end

function enable_trade(npc)
   npc:enable_trade()
end

function disable_input()
   level.disable_input()
end

function enable_input()
   level.enable_input()
end

function disable_ui()
   level.show_weapon(false)
   level.hide_indicators_safe()
   game_hide_menu()
end

function enable_ui()
   level.show_weapon(true)
   level.show_indicators()
end

function kill_self(actor, npc)
   if npc ~= nil and npc:alive() then
      npc:kill(npc)
   end
end

------------------------------------------------------------------------------
--                        Проверочные функции                               --
------------------------------------------------------------------------------
function mod_dialog_precond(first_speaker, second_speaker, dn)
   return not is_wounded(first_speaker, second_speaker)
end

function global_pattern_is_one(actor, npc)
   return sgm_g.get_global_pattern() == 1
end

function global_pattern_is_two(actor, npc)
   return sgm_g.get_global_pattern() == 2
end

function is_wounded(first_speaker, second_speaker)
   local npc = who_is_npc(first_speaker, second_speaker)
   return xr_wounded.is_wounded(npc)
end

function who_is_npc(first_speaker, second_speaker)
   local npc = second_speaker
   if db.actor:id() == npc:id() then
      npc = first_speaker
   end
   return npc
end

function currert_level_is_zaton(actor, npc)
   return level.name() == "zaton"
end

function currert_level_is_jupiter(actor, npc)
   return level.name() == "jupiter"
end

function currert_level_is_pripyat(actor, npc)
   return level.name() == "pripyat"
end

function currert_level_is_darkvalley(actor, npc)
   return level.name() == "darkvalley"
end

function currert_level_is_military(actor, npc)
   return level.name() == "military"
end

function currert_level_is_agroprom(actor, npc)
   return level.name() == "agroprom"
end

function currert_level_is_escape(actor, npc)
   return level.name() == "escape"
end

function currert_level_is_marsh(actor, npc)
   return level.name() == "marsh"
end

function currert_level_is_red_forest(actor, npc)
   return level.name() == "red_forest"
end

------------------------------------------------------------------------------
--                            Функции времени                               --
------------------------------------------------------------------------------
function is_deposit_time(actor, npc)
   return level.get_time_hours() == 20 and level.get_time_minutes() <= 45
end

function is_percent_allow(actor, npc)
   return level.get_time_days() >= sgm_g.read_mod_param("bankir_deposit_passed_time")
end

function is_night_on()
   if level.get_time_hours() < 6 or level.get_time_hours() >= 22 then
      return true
   else
      return false
   end
end

function is_night_off()
   if level.get_time_hours() < 6 or level.get_time_hours() >= 22 then
      return false
   else
      return true
   end
end

------------------------------------------------------------------------------
--                       Инфопортационные условия                           --
------------------------------------------------------------------------------
function zat_boroda_gived_noah_message(actor, npc)
   return sgm_g.has_any_info("zat_monsters_wave_reward,zat_monsters_wave_start,zat_b18_noah_dead,zat_monsters_wave_fail") or
       sgm_g.dont_any_chosen_info("zat_b28_heli_3_searching,zat_b100_heli_2_searching,zat_b101_heli_5_searching")
end

function zat_noah_no_new_quests(actor, npc)
   return has_chosen_info("zat_monsters_wave_start,zat_monsters_wave_reward") or
       has_chosen_info("zat_monsters_wave_start,zat_monsters_wave_fail") or
       sgm_g.dont_has_alife_info("zat_monsters_wave_start")
end

function zat_stalker_member_no_job(actor, npc)
   return has_alife_info("zat_bandit_base_leader_death")
end

function jup_b6_scientist_nuclear_physicist_no_new_quests(actor, npc)
   return sgm_g.dont_has_alife_info("jup_search_anomal_prototype_tip") or
       (has_alife_info("jup_search_anomal_prototype_tip") and sgm_g.has_any_info("jup_search_anomal_prototype_reward,jup_search_anomal_prototype_fail"))
end

function jup_duty_leader_entering_to_dolg_precond(actor, npc)
   return sgm_g.has_any_info("jup_b207_sell_dealers_pda_duty,jup_b46_duty_founder_pda_to_duty")
end

function jup_svoboda_leader_entering_to_freedom_precond(actor, npc)
   return sgm_g.has_any_info("jup_b207_sell_dealers_pda_freedom,jup_b46_duty_founder_pda_to_freedom")
end

function pri_signaller_need_toolkits(actor, npc)
   return (db.actor:object("signaller_toolkit_1") and sgm_g.dont_has_alife_info("pri_signaller_toolkit_1_returned")) or
       (db.actor:object("signaller_toolkit_2") and sgm_g.dont_has_alife_info("pri_signaller_toolkit_2_returned"))
end

function pri_assault_monolith_base_precond(actor, npc)
   if has_chosen_info("pri_a17_gauss_falled,pri_a20_task_gived") and sgm_g.dont_has_alife_info("pri_monolit_base_leader_death") then
      if has_alife_info("zat_deliver_monolith_case_start") and sgm_g.has_any_info("zat_deliver_monolith_case_fail,zat_deliver_monolith_case_reward") then
         return true
      elseif sgm_g.dont_has_alife_info("zat_deliver_monolith_case_start") then
         return true
      end
   end
   return false
end

function pri_necessary_kill_kasilov_precond(actor, npc)
   return has_alife_info("pri_a18_use_idol_done")
end

function pri_rescue_underground_guide_precond(actor, npc)
   return sgm_g.dont_has_alife_info("pri_zone_cleaning_start") or
       (has_alife_info("pri_zone_cleaning_start") and (sgm_g.has_any_info("pri_rescue_underground_guide_start,pri_rescue_underground_guide_fail")))
end

function pri_expiation_sin_job_precond(actor, npc)
   return has_chosen_info("actor_entry_in_monolith,pri_expiation_sin_1_allow") and
       (sgm_g.dont_has_alife_info("pri_expiation_sin_1_start") or (has_chosen_info("pri_expiation_sin_1_start,pri_expiation_sin_2_allow") and sgm_g.dont_has_alife_info("pri_expiation_sin_2_start")) or (has_chosen_info("pri_expiation_sin_2_start,pri_expiation_sin_3_allow") and sgm_g.dont_has_alife_info("pri_expiation_sin_3_start"))) and
       sgm_g.dont_has_chosen_info("pri_expiation_sin_1_fail,pri_expiation_sin_2_fail,pri_expiation_sin_3_fail")
end

function pri_expiation_sin_reward_precond(actor, npc)
   return (has_alife_info("pri_expiation_sin_1_start") and sgm_g.dont_has_chosen_info("pri_expiation_sin_1_fail,pri_expiation_sin_1_bring_all")) or
       (has_alife_info("pri_expiation_sin_2_start") and sgm_g.dont_has_chosen_info("pri_expiation_sin_2_fail,pri_expiation_sin_2_talk")) or
       (has_alife_info("pri_expiation_sin_3_start") and sgm_g.dont_has_chosen_info("pri_expiation_sin_3_fail,pri_expiation_sin_3_kiborg_final_talk"))
end

function pri_expiation_sin_reward_1_precond(actor, npc)
   return has_alife_info("pri_expiation_sin_1_start") and
       sgm_g.dont_has_chosen_info("pri_expiation_sin_1_fail,pri_expiation_sin_1_bring_all")
end

function pri_expiation_sin_reward_2_precond(actor, npc)
   return has_alife_info("pri_expiation_sin_2_start") and
       sgm_g.dont_has_chosen_info("pri_expiation_sin_2_fail,pri_expiation_sin_2_talk")
end

function pri_expiation_sin_reward_3_precond(actor, npc)
   return has_alife_info("pri_expiation_sin_3_start") and
       sgm_g.dont_has_chosen_info("pri_expiation_sin_3_fail,pri_expiation_sin_3_kiborg_final_talk")
end

------------------------------------------------------------------------------
--                            Функции условий                               --
------------------------------------------------------------------------------
function zat_danger_parcel_need_rank_more(actor, npc)
   local get_rank = sgm_g.get_actor_rank()
   return get_rank >= r_quest_params("number", "zat_danger_parcel_need_rank", 90)
end

function zat_danger_parcel_need_rank_less(actor, npc)
   local get_rank = sgm_g.get_actor_rank()
   return get_rank < r_quest_params("number", "zat_danger_parcel_need_rank", 90)
end

function zat_kill_chapaev_need_rank_more(actor, npc)
   local get_rank = sgm_g.get_actor_rank()
   return get_rank >= r_quest_params("number", "zat_kill_chapaev_need_rank", 150)
end

function zat_kill_chapaev_need_rank_less(actor, npc)
   local get_rank = sgm_g.get_actor_rank()
   return get_rank < r_quest_params("number", "zat_kill_chapaev_need_rank", 150)
end

function zat_kill_shakal_need_rank_more(actor, npc)
   local get_rank = sgm_g.get_actor_rank()
   return get_rank >= r_quest_params("number", "zat_kill_shakal_need_rank", 125) or
       has_alife_info("zat_b7_actor_help_bandits")
end

function zat_kill_shakal_need_rank_less(actor, npc)
   local get_rank = sgm_g.get_actor_rank()
   return get_rank < r_quest_params("number", "zat_kill_shakal_need_rank", 125) and
       sgm_g.dont_has_alife_info("zat_b7_actor_help_bandits")
end

function zat_mechanic_not_details_pre(actor, npc)
   return sgm_g.read_mod_param("zat_mechanic_stripping") < 1 and
       sgm_g.r_mod_params("bool", "need_mechanic_details", true)
end

function jup_mechanic_not_details_pre(actor, npc)
   return sgm_g.read_mod_param("jup_mechanic_stripping") < 1 and
       sgm_g.r_mod_params("bool", "need_mechanic_details", true)
end

function pri_mechanic_not_details_pre(actor, npc)
   return sgm_g.read_mod_param("pri_mechanic_stripping") < 1 and
       sgm_g.r_mod_params("bool", "need_mechanic_details", true)
end

------------------------------------------------------------------------------
--           Функции связанные с передачей/получением предметов             --
------------------------------------------------------------------------------
function has_frequency_radio(actor, npc)
   return db.actor:object("quest_frequency_radio")
end

function out_frequency_radio(actor, npc)
   dialogs.relocate_item_section(npc, "quest_frequency_radio", "out")
end

function zat_frequency_radio_reward(actor, npc)
   dialogs.relocate_money(npc, 2500, "in")
   sgm_g.give_skill_book()
end

function zat_dat_letter_from_agent(actor, npc)
   dialogs.relocate_item_section(actor, "letter_from_agent", "in")
   sgm_g.game_autosave_assign("save_zat_meet_authorities_agent_letter")
end

function has_bandit_prikid(actor, npc)
   return db.actor:object("bandit_prikid_outfit")
end

function dont_bandit_prikid(actor, npc)
   return not db.actor:object("bandit_prikid_outfit")
end

function in_bandit_prikid(actor, npc)
   dialogs.relocate_item_section(npc, "bandit_prikid_outfit", "in")
end

function out_bandit_prikid(actor, npc)
   dialogs.relocate_item_section(npc, "bandit_prikid_outfit", "out")
end

function zat_dat_danger_parcel(actor, npc)
   dialogs.relocate_item_section(actor, "zat_danger_parcel", "in")
end

function zat_dostavit_danger_parcel(actor, npc)
   dialogs.relocate_item_section(npc, "zat_danger_parcel", "out")
   sgm_g.game_autosave_assign("save_zat_danger_parcel_referred")
end

function zat_kanevskiy_reward(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "zat_avenger_for_parcel_reward", 1500), "in")
   sgm_g.give_secret(1)
   sgm_g.give_mp3_bonus()
   sgm_g.give_skill_book()
end

function zat_breed_give_acid_star(actor, npc)
   dialogs.relocate_item_section(npc, "af_acid_star", "out")
end

function zat_give_postman_parcel(actor, npc)
   dialogs.relocate_item_section(npc, "zat_postman_parcel", "out")
end

function zat_elbrus_unpack(actor, npc)
   sgm_g.give_reward("wpn_fort")
   sgm_g.give_skill_book()
   sgm_g.give_reward("ammo_9x18_pmm")
   sgm_g.give_reward("ammo_5.45x39_fmj", 2)
   sgm_g.give_reward("wild_drink", 2)
   sgm_g.give_reward("medkit")
   sgm_g.give_reward("bandage", 2)
   sgm_g.give_mp3_bonus()
end

function zat_member_reward1(actor, npc)
   sgm_g.give_reward("af_cristall_flower")
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   sgm_g.give_reward("personal_rukzak")
   sgm_g.give_reward("bag_medkit_1")
   dialogs.relocate_money(npc, r_quest_params("number", "zat_kill_chapaev_reward1", 2500), "in")
   sgm_g.give_mp3_bonus()
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function zat_member_reward2(actor, npc)
   sgm_g.give_reward("af_cristall_flower")
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   sgm_g.give_reward("personal_rukzak")
   sgm_g.give_reward("bag_medkit_1")
   dialogs.relocate_money(npc, r_quest_params("number", "zat_kill_chapaev_reward2", 6000), "in")
   sgm_g.give_mp3_bonus()
   sgm_g.give_secret(2)
   sgm_g.give_skill_book()
end

function has_kasilov_pda(actor, npc)
   return db.actor:object("device_pda_kasilov")
end

---------------------------makdm
--function out_kasilov_pda(actor,npc)
--  dialogs.relocate_item_section(npc,"device_pda_kasilov","out")
--end
function out_kasilov_pda(first_speaker, second_speaker)
   dialogs.relocate_item_section_from_actor(first_speaker, second_speaker, "device_pda_kasilov")
end

--------------------------------
function zat_ostavit_wounded_medkit(actor, npc)
   sgm_g.create("medkit", 434.579, 33.472, -312.569, 1679156, 74)
end

function zat_dat_monolith_case(actor, npc)
   sgm_g.create("zat_intercepted_case", 431.563, 32.664, -291.537, 1676844, 74)
end

function zat_kill_shakal_have_weapon(actor, npc)
   return db.actor:object("zat_shakal_weapon")
end

function zat_kill_shakal_give_weapon(actor, npc)
   dialogs.relocate_item_section(npc, "zat_shakal_weapon", "out")
end

function zat_kill_shakal_chapaev_reward(actor, npc)
   sgm_g.give_reward("ammo_box_10_vog")
   sgm_g.give_reward("wpn_addon_grenade_launcher")
   sgm_g.give_reward("ammo_5.45x39_ap", 5)
   sgm_g.give_reward("repair_arms_box")
   sgm_g.give_reward("conventer_grenade_box")
   dialogs.relocate_money(npc, r_quest_params("number", "zat_kill_shakal_reward", 5000), "in")
   sgm_g.give_mp3_bonus()
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function zat_kill_shakal_predatel_give_weapon(actor, npc)
   if not db.actor:object("zat_shakal_weapon") then
      dialogs.relocate_item_section(actor, "zat_shakal_weapon", "in")
   end
end

function zat_kill_shakal_predatel_reward(actor, npc)
   dialogs.relocate_money(npc, 10000, "in")
end

function zat_kill_shakal_predatel_reward2(actor, npc)
   dialogs.relocate_money(npc, 15000, "in")
end

function zat_actor_set_bandit(actor, npc)
   db.actor:set_character_community("actor_bandit", 0, 0)
   sgm_g.write_mod_param("stat_community", "actor_bandit")
   give_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_killer")
   disable_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_freedom")
   give_info("actor_noted_bandits")
   sgm_g.give_skill_book()
end

function zat_actor_exit_bandit(actor, npc)
   db.actor:set_character_community("actor", 0, 0)
   sgm_g.write_mod_param("stat_community", "no_community")
   disable_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_killer")
   disable_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_freedom")
end

function zat_give_disk_breaking(actor, npc)
   dialogs.relocate_item_section(actor, "disk_breaking", "in")
end

function zat_bring_flash_light_otdat(actor, npc)
   dialogs.relocate_item_section(npc, "quest_flash_light", "out")
end

function zat_bring_flash_light_reward(actor, npc)
   sgm_g.give_reward("ammo_9x18_pmm", 2)
   sgm_g.give_reward("ammo_9x19_pbp", 2)
   sgm_g.give_reward("ammo_12x76_zhekan", 2)
   sgm_g.give_reward("ammo_5.45x39_ap", 2)
   sgm_g.give_reward("grenade_f1", 3)
   dialogs.relocate_money(npc, r_quest_params("number", "zat_bring_flash_light_reward", 1500), "in")
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function zat_bring_drink_beylis_spawn(actor, npc)
   sgm_g.create("quest_drink_beylis", 14.202, 25.651, -186.700, 736134, 356)
   give_info("guide_is_gratis")
end

function zat_bring_drink_beylis_otdat(actor, npc)
   dialogs.relocate_item_section(npc, "quest_drink_beylis", "out")
   disable_info("guide_is_gratis")
end

function zat_bring_drink_beylis_reward(actor, npc)
   sgm_g.give_reward("nuts", 3)
   sgm_g.give_reward("wild_drink", 5)
   sgm_g.give_reward("energy_drink", 6)
   sgm_g.give_reward("af_cristall_flower")
   dialogs.relocate_money(npc, r_quest_params("number", "zat_bring_drink_beylis_reward", 2000), "in")
   sgm_g.give_secret(1)
   sgm_g.give_mp3_bonus()
   sgm_g.give_skill_book()
end

function zat_bring_sharpshooter_bino_otdat(actor, npc)
   dialogs.relocate_item_section(npc, "quest_sharpshooter_binocular", "out")
end

function zat_bring_sharpshooter_bino_reward(actor, npc)
   sgm_g.give_reward("af_mincer_meat")
   sgm_g.give_reward("ammo_dumdum")
   sgm_g.give_reward("wpn_sig550")
   sgm_g.give_reward("ammo_5.56x45_ap", 2)
   sgm_g.give_reward("bio_bandage", 5)
   sgm_g.give_reward("antirad", 5)
   sgm_g.give_reward("bag_medkit_2")
   dialogs.relocate_money(npc, r_quest_params("number", "zat_bring_sharpshooter_bino_reward", 5000), "in")
   sgm_g.give_secret(1)
   sgm_g.give_mp3_bonus()
   sgm_g.give_skill_book()
end

function zat_monsters_wave_reward(actor, npc)
   sgm_g.give_skill_book()
   sgm_g.give_reward("af_geliy")
   local rnd_outfit = math.random(1, 3)
   if rnd_outfit == 1 then
      sgm_g.give_reward("scientific_outfit")
   elseif rnd_outfit == 2 then
      sgm_g.give_reward("svoboda_heavy_outfit")
   else
      sgm_g.give_reward("heavy_stalker_outfit")
   end
   if get_actor_slot_item("wpn_ak", "pistol") or get_actor_slot_item("wpn_ak", "rifle") then
      sgm_g.give_reward("ammo_5.45x39_ap", 4)
   else
      sgm_g.give_reward("ammo_5.56x45_ap", 4)
   end
   sgm_g.give_reward("ammo_7.62x54_7h1", 2)
   dialogs.relocate_money(npc, r_quest_params("number", "zat_monsters_wave_reward", 6000), "in")
   sgm_g.give_secret(2)
   sgm_g.give_mp3_bonus()
end

function zat_wisdom_books_bring_books(actor, npc)
   dialogs.relocate_item_section(npc, "zat_wisdom_book_1", "out")
   dialogs.relocate_item_section(npc, "zat_wisdom_book_2", "out")
   dialogs.relocate_item_section(npc, "zat_wisdom_book_3", "out")
end

function zat_mad_dog_bring_alfa_pda(actor, npc)
   dialogs.relocate_item_section(npc, "zat_mad_dog_pda", "out")
end

function zat_wisdom_books_sgm_g.give_reward(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "zat_wisdom_books_reward", 4000), "in")
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function zat_mad_dog_sgm_g.give_reward(actor, npc)
   sgm_g.give_reward("ammo_5.56x45_ap", 2)
   sgm_g.give_reward("ammo_5.45x39_ap", 2)
   if get_rnd(1, 2) == 1 then
      sgm_g.give_reward("repair_outfit_box")
   else
      sgm_g.give_reward("repair_arms_box")
   end
   dialogs.relocate_money(npc, r_quest_params("number", "zat_mad_dog_reward", 6000), "in")
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function zat_carrying_antidote_bring_antidote(actor, npc)
   dialogs.relocate_item_section(npc, "zat_medic_antidote", "out")
end

function zat_carrying_antidote_sgm_g.give_reward(actor, npc)
   sgm_g.give_reward("psy_complex", 2)
   sgm_g.give_reward("bio_bandage", 5)
   sgm_g.give_reward("medkit_scientic", 3)
   dialogs.relocate_money(npc, r_quest_params("number", "zat_carrying_antidote_reward", 3000), "in")
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function zat_alfa_sabotage_has_frequency_radio(actor, npc)
   return db.actor:object("quest_frequency_radio")
end

function zat_alfa_sabotage_dont_frequency_radio(actor, npc)
   return not db.actor:object("quest_frequency_radio")
end

function zat_alfa_sabotage_give_frequency_radio(actor, npc)
   dialogs.relocate_item_section(npc, "quest_frequency_radio", "out")
end

function zat_alfa_sabotage_has_simply_raciya(actor, npc)
   return db.actor:object("jup_azot_simply_raciya")
end

function zat_alfa_sabotage_give_simply_raciya(actor, npc)
   dialogs.relocate_item_section(npc, "jup_azot_simply_raciya", "out")
end

function zat_alfa_sabotage_order(actor, npc)
   dialogs.relocate_item_section(actor, "jup_azot_charge_scanner", "in")
   dialogs.relocate_item_section(actor, "jup_azot_charge_instruments", "in")
end

function zat_alfa_sabotage_spawn_simply_raciya(actor, npc)
   sgm_g.create("jup_azot_simply_raciya", 343.4856262207, 28.387922286987, -371.89581298828, 1266369, 627)
end

function zat_alfa_sabotage_spawn_charges(actor, npc)
   sgm_g.create("zat_alfa_sabotage_charge_1", 110.61460113525, 1.358048081398, 183.38803100586, 1154084, 316)
   sgm_g.create("zat_alfa_sabotage_charge_2", 1.5656116008759, 7.1984701156616, 36.296241760254, 939821, 19)
   sgm_g.create("zat_alfa_sabotage_charge_3", -56.464656829834, 3.4883720874786, 212.57615661621, 626115, 413)
   sgm_g.create("zat_alfa_sabotage_charge_4", -218.9129486084, -3.5366911888123, 68.095611572266, 344679, 385)
   sgm_g.create("zat_alfa_sabotage_charge_5", 54.211204528809, 25.035531997681, -169.15927124023, 809015, 357)
end

function zat_alfa_sabotage_reward_1(actor, npc)
   dialogs.relocate_money(npc, 6500, "in")
   sgm_g.give_reward("ammo_5.56x45_ap", 3)
   sgm_g.give_secret(1)
   sgm_g.give_random_treasure()
end

function zat_alfa_sabotage_reward_2(actor, npc)
   dialogs.relocate_money(npc, 7000, "in")
   sgm_g.give_reward("ammo_5.45x39_ap", 3)
   sgm_g.give_secret(1)
   sgm_g.give_random_treasure()
end

function jup_killer_base_chief_actor_has_outfit(actor, npc, p)
   local outfit_in_slot = db.actor:item_in_slot(7)
   if outfit_in_slot ~= nil and (sgm_g.find_in_string(outfit_in_slot:section(), "killer_outfit") or sgm_g.find_in_string(outfit_in_slot:section(), "killer_exo_outfit")) then
      return true
   else
      return false
   end
end

function jup_killer_base_chief_actor_not_outfit(actor, npc, p)
   local outfit_in_slot = db.actor:item_in_slot(7)
   if outfit_in_slot ~= nil and find_out_string(outfit_in_slot:section(), "killer_outfit") and find_out_string(outfit_in_slot:section(), "killer_exo_outfit") then
      return true
   else
      return false
   end
end

function jup_bring_heavy_medkits_otdat(actor, npc)
   local rnd_spawn = math.random(1, 2)
   if rnd_spawn == 1 then
      sgm_g.create("af_quest_b206_dyavol_flowers", 10.661, 8.974, -394.485, 964902, 8)
      sgm_g.create("af_quest_b206_dyavol_flowers", -51.088, 24.606, 330.400, 852203, 60)
      sgm_g.create("af_quest_b206_dyavol_flowers", 222.835, 11.968, -128.712, 1097175, 331)
   else
      sgm_g.create("af_quest_b206_dyavol_flowers", 13.686, 12.526, -407.086, 971831, 8)
      sgm_g.create("af_quest_b206_dyavol_flowers", -22.177, 24.794, 321.172, 895898, 60)
      sgm_g.create("af_quest_b206_dyavol_flowers", -395.112, 14.373, 350.727, 53091, 422)
   end
   dialogs.relocate_item_section(npc, "quest_heavy_medkits", "out")
end

function jup_bring_heavy_medkits_reward(actor, npc)
   sgm_g.give_reward("geiger_counter")
   dialogs.relocate_money(npc, r_quest_params("number", "jup_bring_heavy_medkits_reward", 3000), "in")
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function jup_bring_photo_device_otdat(actor, npc)
   dialogs.relocate_item_section(npc, "quest_photo_device", "out")
end

function jup_bring_photo_device_reward(actor, npc)
   sgm_g.give_reward("repair_arms_box")
   sgm_g.give_reward("drug_coagulant")
   dialogs.relocate_money(npc, r_quest_params("number", "jup_bring_photo_device_reward", 2000), "in")
   sgm_g.give_secret(1)
   sgm_g.give_mp3_bonus()
   sgm_g.give_skill_book()
end

function jup_bring_arms_case_otdat(actor, npc)
   dialogs.relocate_item_section(npc, "quest_arms_case", "out")
end

function jup_bring_arms_case_reward(actor, npc)
   sgm_g.give_reward("ammo_dumdum")
   sgm_g.give_reward("ammo_5.45x39_ap", 6)
   sgm_g.give_reward("remote_explosive_charge")
   sgm_g.give_reward("af_electra_moonlight")
   dialogs.relocate_money(npc, r_quest_params("number", "jup_bring_arms_case_reward", 6500), "in")
   sgm_g.give_secret(2)
   sgm_g.give_mp3_bonus()
   sgm_g.give_skill_book()
end

function jup_gromoboy_dont_vintar(actor, npc)
   return not db.actor:object("wpn_vintorez_bomber")
end

function jup_gromoboy_have_vintar(actor, npc)
   return db.actor:object("wpn_vintorez_bomber")
end

function jup_gromoboy_give_vintar(actor, npc)
   dialogs.relocate_item_section(npc, "wpn_vintorez_bomber", "out")
end

function jup_gromoboy_have_thief_pda(actor, npc)
   return db.actor:object("jup_thief_voron_pda")
end

function jup_gromoboy_give_thief_pda(actor, npc)
   dialogs.relocate_item_section(npc, "jup_thief_voron_pda", "out")
end

function jup_find_gromoboy_vintar_reward(actor, npc)
   sgm_g.give_reward("af_cristall")
   sgm_g.give_reward("drug_anabiotic")
   sgm_g.give_reward("repair_arms_box")
   sgm_g.give_reward("ammo_5.45x39_ap", 3)
   sgm_g.give_reward("ammo_7.62x54_7h1", 2)
   dialogs.relocate_money(npc, r_quest_params("number", "jup_find_gromoboy_vintar_reward1", 8000), "in")
   sgm_g.give_mp3_bonus()
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function jup_find_gromoboy_vintar_fake_reward(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "jup_find_gromoboy_vintar_reward2", 16000), "in")
   sgm_g.give_mp3_bonus()
   sgm_g.give_skill_book()
end

function jup_set_bad_stalker(actor, npc)
   --/npc:set_relation(game_object.enemy,db.actor)
   --/npc:force_set_goodwill(-1000,db.actor)
end

function jup_beat_from_monsters_reward(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "jup_beat_from_monsters_reward", 5000), "in")
   sgm_g.give_reward("repair_outfit_box")
   sgm_g.give_reward("repair_arms_box")
   sgm_g.give_reward("conventer_grenade_box")
   sgm_g.give_mp3_bonus()
   clear_all_objects("monster", 10, 250)
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function jup_rasvet_equipments(actor, npc)
   sgm_g.give_reward("cs_heavy_outfit")
   sgm_g.give_reward("wpn_mp5")
   sgm_g.give_reward("ammo_9x19_pbp", 4)
   sgm_g.give_reward("wpn_pb")
   sgm_g.give_reward("ammo_9x18_pmm", 4)
end

function jup_actor_set_rasvet(actor, npc)
   db.actor:set_character_community("actor_rasvet", 0, 0)
   sgm_g.write_mod_param("stat_community", "actor_rasvet")
   disable_info("jup_rasvet_base_actor_hit")
   disable_info("jup_rasvet_base_hit")
   create_base_treasure("jup_rasvet_base_treasure", -346.514, 3.733, 412.493, 130860, 435)
   sgm_g.create("jup_rasvet_base_treasure_spot", -346.514, 3.733, 412.493, 130860, 435)
   disable_info("actor_entry_in_bandit")
   give_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_killer")
   disable_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_freedom")
   give_info("jup_search_treasure_start")
   give_info("actor_noted_rasvets")
   sgm_g.add_task("sgm_jup_search_treasure")
end

function jup_actor_exit_rasvet(actor, npc)
   db.actor:set_character_community("actor", 0, 0)
   sgm_g.write_mod_param("stat_community", "no_community")
   disable_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_killer")
   disable_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_freedom")
end

function jup_destroy_night_killers_reward(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "jup_destroy_night_killers_reward", 5000), "in")
   sgm_g.give_reward("ammo_7.62x54_7h1", 2)
   sgm_g.give_reward("repair_outfit_box")
   sgm_g.give_mp3_bonus()
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function jup_rasvet_eliminate_burrows_reward(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "jup_rasvet_eliminate_burrow_reward", 10000), "in")
   sgm_g.give_skill_book()
   sgm_g.give_skill_book()
   local rnd_wpn_reward = math.random(1, 2)
   if rnd_wpn_reward == 1 then
      sgm_g.give_reward("wpn_vintorez_m2")
      sgm_g.give_reward("ammo_9x39_ap", 2)
   else
      sgm_g.give_reward("wpn_groza_m3")
      sgm_g.give_reward("ammo_9x39_ap", 2)
   end
   sgm_g.give_reward("ammo_5.56x45_ap")
   sgm_g.give_reward("ammo_5.45x39_ap")
   sgm_g.give_reward("repair_outfit_box")
   local rnd_af_reward = math.random(1, 3)
   if rnd_af_reward == 1 then
      sgm_g.give_reward("af_gold_fish")
   elseif rnd_af_reward == 2 then
      sgm_g.give_reward("af_baloon")
   else
      sgm_g.give_reward("af_glass")
   end
   sgm_g.give_secret(2)
   sgm_g.give_mp3_bonus()
end

function jup_follow_scientists_reward(actor, npc)
   local rnd_super_reward = math.random(1, 5)
   if sgm_g.read_mod_param("jup_fw_scientists_deaths") ~= nil then
      local reward_fails = sgm_g.read_mod_param("jup_fw_scientists_deaths")
      if reward_fails == 0 then
         dialogs.relocate_money(npc, r_quest_params("number", "jup_follow_scientists_reward1", 4000), "in")
         if rnd_super_reward == 1 then
            sgm_g.give_reward("drug_engine")
         end
      elseif reward_fails == 1 then
         dialogs.relocate_money(npc, r_quest_params("number", "jup_follow_scientists_reward2", 3000), "in")
         if rnd_super_reward == 2 then
            sgm_g.give_reward("drug_engine")
         end
      elseif reward_fails == 2 then
         dialogs.relocate_money(npc, r_quest_params("number", "jup_follow_scientists_reward3", 2000), "in")
      elseif reward_fails == 3 then
         dialogs.relocate_money(npc, r_quest_params("number", "jup_follow_scientists_reward4", 1000), "in")
      elseif reward_fails >= 4 then
         dialogs.relocate_money(npc, r_quest_params("number", "jup_follow_scientists_reward5", 500), "in")
      end
   end
   sgm_g.give_reward("bio_bandage", 3)
   sgm_g.give_reward("wild_drink", 2)
   sgm_g.give_reward("af_electra_moonlight")
   sgm_g.give_mp3_bonus()
   if sgm_g.read_mod_param("jup_fw_scientists_deaths") ~= nil then
      clear_mod_param("jup_fw_scientists_deaths")
   end
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function jup_avoid_witnesses_reward(actor, npc)
   sgm_g.give_reward("money_meshochek_4000_5000")
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function has_detector_modify_toolkit(actor, npc)
   return db.actor:object("detector_modify_toolkit")
end

function dont_detector_modify_toolkit(actor, npc)
   return not db.actor:object("detector_modify_toolkit")
end

function give_detector_modify_toolkit(actor, npc)
   dialogs.relocate_item_section(npc, "detector_modify_toolkit", "out")
end

function jup_sokolov_gives_heli_key(actor, npc)
   dialogs.relocate_item_section(actor, "special_helicopter_key", "in")
end

function jup_rasvet_destroy_snorks_reward(actor, npc)
   sgm_g.give_reward("bag_medkit_2")
   dialogs.relocate_money(npc, r_quest_params("number", "jup_rasvet_destroy_snorks_reward", 2500), "in")
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function jup_mercenary_check_plant_has_medikaments(actor, npc)
   return sgm_functions.have_item_count("psy_complex", 4)
end

function jup_mercenary_check_plant_not_medikaments(actor, npc)
   return not sgm_functions.have_item_count("psy_complex", 4)
end

function jup_mercenary_check_plant_gives_medikaments(first_speaker, second_speaker)
   dialogs.relocate_item_section_from_actor(first_speaker, second_speaker, "psy_complex", 4)
   sgm_g.game_autosave_assign("save_jup_mercenary_check_plant_psy_kit_otdani")
end

function jup_mercenary_check_plant_supply_cash(actor, npc)
   dialogs.relocate_money(npc, 1000, "in")
end

function jup_mercenary_check_plant_reward(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "jup_mercenary_check_plant_reward", 8000), "in")
   sgm_g.give_reward("af_gold_fish")
   sgm_g.give_reward("wpn_lr300_m3")
   sgm_g.give_reward("ammo_5.56x45_ap", 5)
   sgm_g.give_reward("ammo_5.45x39_ap", 5)
   sgm_g.give_reward("repair_outfit_box")
   sgm_g.give_reward("repair_arms_box")
   sgm_g.give_skill_book()
   sgm_g.give_secret(2)
   sgm_g.give_mp3_bonus()
end

function jup_mercenary_check_plant_equipments(actor, npc)
   sgm_g.give_reward("wpn_sig550_m3")
   sgm_g.give_reward("ammo_5.56x45_ap", 5)
   sgm_g.give_reward("wpn_sig220_m3")
   sgm_g.give_reward("ammo_11.43x23_hydro", 5)
end

function jup_actor_set_killer(actor, npc)
   db.actor:set_character_community("actor_killer", 0, 0)
   sgm_g.write_mod_param("stat_community", "actor_killer")
   disable_info("jup_killer_base_actor_hit")
   disable_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_freedom")
   give_info("actor_entry_in_killer")
   give_info("actor_noted_killers")
end

function jup_actor_exit_killer(actor, npc)
   db.actor:set_character_community("actor", 0, 0)
   sgm_g.write_mod_param("stat_community", "no_community")
   disable_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_killer")
   disable_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_freedom")
end

function jup_actor_set_freedom(actor, npc)
   db.actor:set_character_community("actor_freedom", 0, 0)
   sgm_g.write_mod_param("stat_community", "actor_freedom")
   give_info("actor_entry_in_freedom")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_killer")
   disable_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_dolg")
   give_info("actor_noted_freedoms")
   sgm_g.give_reward("svoboda_light_outfit")
   dialogs.relocate_money(npc, 2000, "in")
   sgm_g.give_skill_book()
end

function jup_actor_set_dolg(actor, npc)
   db.actor:set_character_community("actor_dolg", 0, 0)
   sgm_g.write_mod_param("stat_community", "actor_dolg")
   give_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_killer")
   disable_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_freedom")
   give_info("actor_noted_dolgs")
   sgm_g.give_reward("dolg_outfit")
   dialogs.relocate_money(npc, 2000, "in")
   sgm_g.give_skill_book()
end

function jup_actor_exit_dolg(actor, npc)
   db.actor:set_character_community("actor", 0, 0)
   sgm_g.write_mod_param("stat_community", "no_community")
   disable_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_killer")
   disable_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_freedom")
end

function jup_actor_exit_freedom(actor, npc)
   db.actor:set_character_community("actor", 0, 0)
   sgm_g.write_mod_param("stat_community", "no_community")
   disable_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_killer")
   disable_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_freedom")
end

function jup_search_anomal_prototype_is_retail(actor, npc)
   return not sgm_g.check_item_count("af_prodigy", 2, true)
end

function jup_search_anomal_prototype_is_gross(actor, npc)
   return sgm_g.check_item_count("af_prodigy", 2, true)
end

function jup_search_anomal_prototype_anyhas(actor, npc)
   local result = false
   for i = 1, 6 do
      if db.actor:object("af_prodigy_" .. i .. "_danger") then
         result = true
      end
   end
   return result
end

function jup_search_anomal_prototype_lasted(actor, npc)
   if has_alife_info("jup_search_anomal_prototype_prodigy_5_bringed") then
      give_info("jup_search_anomal_prototype_prodigy_lasted")
   end
end

function jup_search_anomal_prototype_bring(actor, npc)
   local info_count = 0
   for i = 1, 6 do
      if db.actor:object("af_prodigy_" .. i .. "_danger") then
         dialogs.relocate_item_section(npc, "af_prodigy_" .. i .. "_danger", "out")
         if sgm_g.dont_has_alife_info("jup_search_anomal_prototype_prodigy_1_bringed") then
            give_info("jup_search_anomal_prototype_prodigy_1_bringed")
         elseif sgm_g.dont_has_alife_info("jup_search_anomal_prototype_prodigy_2_bringed") then
            give_info("jup_search_anomal_prototype_prodigy_2_bringed")
         elseif sgm_g.dont_has_alife_info("jup_search_anomal_prototype_prodigy_3_bringed") then
            give_info("jup_search_anomal_prototype_prodigy_3_bringed")
         elseif sgm_g.dont_has_alife_info("jup_search_anomal_prototype_prodigy_4_bringed") then
            give_info("jup_search_anomal_prototype_prodigy_4_bringed")
         elseif sgm_g.dont_has_alife_info("jup_search_anomal_prototype_prodigy_5_bringed") then
            give_info("jup_search_anomal_prototype_prodigy_5_bringed")
         elseif sgm_g.dont_has_alife_info("jup_search_anomal_prototype_prodigy_6_bringed") then
            give_info("jup_search_anomal_prototype_prodigy_6_bringed")
         end
      end
      if has_alife_info("jup_search_anomal_prototype_prodigy_" .. i .. "_bringed") then
         info_count = info_count + 1
      end
   end
   if info_count >= 6 then
      recover_info("jup_search_anomal_prototype_prodigy_all_bringed")
   end
end

function jup_search_anomal_prototype_mini_reward(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "jup_search_anomal_prototype_reward", 5000), "in")
   sgm_g.give_secret(1)
   sgm_g.give_mp3_bonus()
   sgm_g.give_skill_book()
   jup_search_anomal_prototype_bonus_spawner()
end

function jup_search_anomal_prototype_full_reward(actor, npc)
   dialogs.relocate_item_section(actor, "af_prodigy_1_processed", "in")
   dialogs.relocate_item_section(actor, "af_prodigy_2_processed", "in")
   dialogs.relocate_item_section(actor, "af_prodigy_3_processed", "in")
   dialogs.relocate_item_section(actor, "af_prodigy_4_processed", "in")
   dialogs.relocate_item_section(actor, "af_prodigy_5_processed", "in")
   dialogs.relocate_item_section(actor, "af_prodigy_6_processed", "in")
   sgm_g.give_secret(2)
   sgm_g.give_mp3_bonus()
   sgm_g.give_skill_book()
   jup_search_anomal_prototype_bonus_spawner()
end

function jup_search_anomal_prototype_bonus_spawner()
   give_info("jup_search_anomal_prototype_gather_allowed")
   if get_rnd(1, 2) == 1 then
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", 373.508, 34.622, -21.3042, 1583613, 294)
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", 291.529, -2.278, -240.180, 1462319, 43)
   else
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", 204.115, 25.240, -444.690, 1311890, 312)
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", -70.158, 7.920, 244.519, 771013, 36)
   end
   if get_rnd(1, 2) == 1 then
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", -206.391, 3.342, -426.363, 366735, 480)
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", 454.237, 27.313, -458.344, 1436859, 555)
   else
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", 231.155, -5.688, 432.597, 1111538, 514)
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", 103.302, 24.210, -175.352, 891699, 358)
   end
   if get_rnd(1, 2) == 1 then
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", -28.861, -0.235, 130.624, 159879, 757)
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", -5.860, -0.421, -321.150, 189238, 781)
   else
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", -135.823, -0.526, 50.636, 64182, 744)
      sgm_g.create("af_prodigy_" .. math.random(1, 6) .. "_danger", -193.646, -2.155, -40.579, 27225, 749)
   end
   disable_info("opt_deactivate_blackday")
end

function jup_examine_caravan_bring_case(actor, npc)
   dialogs.relocate_item_section(npc, "jup_killer_caravan_case", "out")
end

function jup_examine_caravan_reward(actor, npc)
   sgm_g.give_reward("af_gravi")
   sgm_g.give_reward("wpn_addon_grenade_launcher_m203")
   sgm_g.give_reward("ammo_5.56x45_ap", 3)
   sgm_g.give_reward("medkit", 5)
   dialogs.relocate_money(npc, r_quest_params("number", "jup_examine_caravan_reward", 5000), "in")
   sgm_g.give_skill_book()
   sgm_g.give_secret(1)
end

function jup_liquidate_valet_reward(actor, npc)
   sgm_g.give_reward("wpn_addon_scope_susat_night")
   sgm_g.give_reward("medkit_army", 4)
   sgm_g.give_reward("af_soul_breeding_1,af_soul_breeding_2,af_soul_breeding_3")
   dialogs.relocate_money(npc, r_quest_params("number", "jup_liquidate_valet_reward", 4000), "in")
   sgm_g.give_skill_book()
   sgm_g.give_secret(1)
end

function jup_weak_lighthouse_squad(actor, npc)
   sgm_g.create("jup_killer_lighthouse_commander", 179.56494140625, 28.135843276978, -418.63854980469, 1021862, 610)
   sgm_g.create("jup_killer_lighthouse_soldier1", 176.67922973633, 28.144834518433, -420.56182861328, 1015685, 610)
   sgm_g.create("jup_killer_lighthouse_soldier2", 177.10800170898, 28.107587814331, -415.18139648438, 1016937, 610)
   sgm_g.create("jup_killer_lighthouse_soldier3", 181.08056640625, 28.10871887207, -415.2333984375, 1024376, 610)
   sgm_g.create("jup_killer_lighthouse_soldier4", 181.15676879883, 28.182388305664, -422.20678710938, 1024366, 610)
   sgm_g.create("snork_normal", 402.08880615234, 24.160182952881, -376.27767944336, 1349065, 629)
   sgm_g.create("snork_normal", 396.13754272461, 24.184753417969, -364.63595581055, 1339917, 629)
   sgm_g.create("snork_normal", 411.87719726563, 24.361669540405, -388.25653076172, 1365417, 629)
   sgm_g.create("snork_normal", 421.63070678711, 24.821136474609, -401.56262207031, 1381409, 629)
   sgm_g.create("snork_normal", 421.32196044922, 24.457586288452, -382.21279907227, 1381437, 629)
   sgm_g.create("snork_normal", 418.47958374023, 27.543142318726, -404.77630615234, 1376943, 629)
   sgm_g.create("snork_normal", 398.91864013672, 27.821760177612, -391.13311767578, 1344097, 629)
   sgm_g.create("snork_normal", 397.05432128906, 27.538522720337, -360.61999511719, 1340989, 629)
   sgm_g.create("chimera_normal", 420.52215576172, 27.769445419312, -361.93817138672, 1380316, 629)
   sgm_g.create("gigant_normal", 463.65618896484, 27.140417098999, -398.10949707031, 1450654, 630)
   sgm_g.create("snork_normal", 457.96936035156, 27.324140548706, -285.80218505859, 1442196, 551)
   sgm_g.create("snork_normal", 461.82836914063, 27.250383377075, -269.62600708008, 1448662, 640)
   sgm_g.create("snork_normal", 491.35760498047, 27.306707382202, -246.55960083008, 1484675, 640)
   sgm_g.create("snork_normal", 452.99761962891, 27.573652267456, -244.96725463867, 1434978, 640)
   sgm_g.create("snork_normal", 379.3444519043, 27.978475570679, -232.49006652832, 1316464, 341)
   sgm_g.create("tushkano_normal", 343.19793701172, 27.18360710144, -272.78341674805, 1263312, 549)
   sgm_g.create("tushkano_normal", 345.06991577148, 27.976934432983, -240.26071166992, 1266513, 549)
   sgm_g.create("tushkano_normal", 332.49676513672, 26.960063934326, -243.62512207031, 1247549, 549)
   sgm_g.create("tushkano_normal", 316.85308837891, 27.135990142822, -264.75308227539, 1225712, 549)
   sgm_g.create("tushkano_normal", 293.81079101563, 27.208528518677, -264.70513916016, 1194738, 633)
   sgm_g.create("tushkano_normal", 276.20043945313, 26.931716918945, -266.60586547852, 1170410, 633)
   sgm_g.create("tushkano_normal", 244.79202270508, 27.865791320801, -259.24957275391, 1131745, 636)
   sgm_g.create("tushkano_normal", 274.86773681641, 27.622941970825, -232.66928100586, 1170452, 548)
   sgm_g.create("snork_normal", 281.70709228516, 27.839157104492, -213.15856933594, 1178838, 653)
   sgm_g.create("snork_normal", 292.87835693359, 27.992219924927, -183.56488037109, 1193065, 537)
   sgm_g.create("snork_normal", 254.63273620605, 27.573883056641, -154.39839172363, 1144387, 654)
   sgm_g.create("snork_normal", 206.34820556641, 27.492694854736, -164.76153564453, 1068853, 496)
   sgm_g.create("snork_normal", 163.1883392334, 25.803382873535, -164.23678588867, 994111, 495)
   sgm_g.create("snork_normal", 148.34350585938, 25.841579437256, -196.99366760254, 969144, 488)
   sgm_g.create("snork_normal", 170.39407348633, 17.381929397583, -245.04219055176, 1005389, 488)
end

function jup_weak_lighthouse_reward(actor, npc)
   sgm_g.give_reward("antirad", 2)
   sgm_g.give_reward("medkit_scientic", 3)
   sgm_g.give_reward("ammo_5.56x45_ap", 3)
   sgm_g.give_reward("ammo_5.45x39_ap", 3)
   sgm_g.give_reward("drug_engine")
   sgm_g.give_reward("af_fuzz_kolobok_breeding_1,af_fuzz_kolobok_breeding_2,af_fuzz_kolobok_breeding_3")
   dialogs.relocate_money(npc, r_quest_params("number", "jup_weak_lighthouse_reward", 8000), "in")
   sgm_g.give_skill_book()
   sgm_g.give_secret(2)
end

function pri_actor_have_science_docks(actor, npc)
   return db.actor:object("important_science_docks")
end

function pri_actor_dont_science_docks(actor, npc)
   return not db.actor:object("important_science_docks")
end

function pri_actor_give_science_docks(actor, npc)
   dialogs.relocate_item_section(npc, "important_science_docks", "out")
end

function pri_have_monolith_case(actor, npc)
   return db.actor:object("zat_intercepted_case")
end

function pri_give_monolith_case(actor, npc)
   dialogs.relocate_item_section(npc, "zat_intercepted_case", "out")
   sgm_g.game_autosave_assign("save_zat_deliver_monolith_case_bring")
end

function pri_deliver_monolith_reward_first(actor, npc)
   sgm_g.give_reward("af_dummy_dummy")
   sgm_g.give_reward("conventer_grenade_box", 5)
   sgm_g.give_reward("ammo_dumdum", 4)
   sgm_g.give_reward("ammo_5.45x39_ap", 6)
   sgm_g.give_skill_book()
   dialogs.relocate_money(npc, r_quest_params("number", "pri_deliver_monolith_reward_cell1", 5000), "in")
   sgm_g.give_mp3_bonus()
   sgm_g.give_secret(1)
end

function pri_deliver_monolith_reward_second(actor, npc)
   sgm_g.give_reward("af_dummy_glassbeads")
   sgm_g.give_reward("repair_arms_box", 3)
   sgm_g.give_reward("wpn_addon_silencer_9x39")
   sgm_g.give_reward("ammo_5.45x39_ap", 6)
   sgm_g.give_skill_book()
   dialogs.relocate_money(npc, r_quest_params("number", "pri_deliver_monolith_reward_cell2", 3000), "in")
   sgm_g.give_mp3_bonus()
   sgm_g.give_secret(1)
end

function pri_deliver_monolith_reward_third(actor, npc)
   sgm_g.give_reward("repair_outfit_box", 2)
   sgm_g.give_reward("af_dummy_battery")
   sgm_g.give_reward("ammo_5.45x39_ap", 6)
   sgm_g.give_skill_book()
   dialogs.relocate_money(npc, r_quest_params("number", "pri_deliver_monolith_reward_cell3", 2000), "in")
   sgm_g.give_mp3_bonus()
   sgm_g.give_secret(1)
end

function pri_deliver_monolith_reward_four(actor, npc)
   sgm_g.give_reward("af_ice")
   sgm_g.give_reward("emulator_brain_waves")
   sgm_g.give_reward("ammo_box_10_m209", 2)
   sgm_g.give_reward("ammo_5.45x39_ap", 6)
   sgm_g.give_skill_book()
   dialogs.relocate_money(npc, r_quest_params("number", "pri_deliver_monolith_reward_cell4", 4000), "in")
   sgm_g.give_mp3_bonus()
   sgm_g.give_secret(1)
end

function pri_kill_kasilov_reward(actor, npc)
   sgm_g.give_reward("ammo_7.62x54_7h1", 5)
   sgm_g.give_reward("ammo_5.45x39_ap", 3)
   sgm_g.give_reward("personal_rukzak")
   sgm_g.give_skill_book()
   dialogs.relocate_money(npc, r_quest_params("number", "pri_deliver_monolith_reward_cell5", 5000), "in")
   db.actor:set_character_community("actor_monolit", 0, 0)
   sgm_g.write_mod_param("stat_community", "actor_monolit")
   disable_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_killer")
   disable_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_freedom")
   give_info("actor_entry_in_monolith")
   give_info("actor_noted_monoliths")
   sgm_g.give_mp3_bonus()
   sgm_g.give_secret(1)
end

function pri_actor_exit_monolith(actor, npc)
   db.actor:set_character_community("actor", 0, 0)
   sgm_g.write_mod_param("stat_community", "no_community")
   disable_info("actor_entry_in_bandit")
   disable_info("actor_entry_in_rasvet")
   disable_info("actor_entry_in_monolith")
   disable_info("actor_entry_in_dolg")
   disable_info("actor_entry_in_freedom")
end

function pri_assault_monolith_base_reward(actor, npc)
   local reward = r_quest_params("number", "pri_assault_monolith_base_reward", 15000)
   if has_alife_info("pri_assault_monolith_base_squad_leader_death") then
      reward = reward - 3000
   end
   if has_alife_info("pri_assault_monolith_base_squad_soldier1_death") then
      reward = reward - 1500
   end
   if has_alife_info("pri_assault_monolith_base_squad_soldier2_death") then
      reward = reward - 1500
   end
   if has_alife_info("pri_assault_monolith_base_squad_soldier3_death") then
      reward = reward - 1500
   end
   if has_alife_info("pri_assault_monolith_base_squad_soldier4_death") then
      reward = reward - 1600
   end
   if reward > 0 then
      dialogs.relocate_money(npc, reward, "in")
   end
   sgm_g.give_reward("repair_outfit_box")
   sgm_g.give_reward("repair_arms_box")
   sgm_g.give_reward("ammo_5.56x45_ap", 4)
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   sgm_g.give_secret(2)
   sgm_g.give_mp3_bonus()
   sgm_g.give_skill_book()
end

function pri_assault_back_to_home(actor, npc)
   level.add_pp_effector("black.ppe", 7612, false)
   npc:set_npc_position(vector():set(154.483, -0.096, -190.016))
   db.actor:set_actor_position(vector():set(127.524, -0.520, -180.340))
   give_info("pri_assault_monolith_base_teleport")
end

function pri_bloodsucker_vaccine_vidacha(actor, npc)
   sgm_g.create("pri_bloodsucker_room_reward_spot", 61.821, 16.526, -125.120, 278969, 698)
   sgm_g.create("pri_bloodsucker_half_human_2", 47.139, 16.540, -138.432, 260827, 698)
   dialogs.relocate_item_section(actor, "quest_bloodsucker_vaccine", "in")
end

function pri_expiation_sin_1_spawner1(actor, npc)
   sgm_g.create("quest_medic_medkit", 322.347, 42.833, -404.514, 1507608, 1)
end

function pri_expiation_sin_1_spawner2(actor, npc)
   sgm_g.create("quest_live_water", -34.601, 15.610, -324.846, 660275, 482)
end

function pri_expiation_sin_1_give_medic_medkit(actor, npc)
   dialogs.relocate_item_section(npc, "quest_medic_medkit", "out")
end

function pri_expiation_sin_1_give_anabiotics(actor, npc)
   dialogs.relocate_item_section_from_actor(actor, npc, "drug_anabiotic", 10)
end

function pri_expiation_sin_1_give_live_water(actor, npc)
   dialogs.relocate_item_section(npc, "quest_live_water", "out")
   sgm_g.create("pri_monolit_brother_leader", 35.852, 1.163, 360.252, 245838, 736)
   sgm_g.create("pri_monolit_brother_member1", 36.687, 1.206, 355.955, 246816, 736)
   sgm_g.create("pri_monolit_brother_member2", 35.462, 1.204, 366.607, 245847, 736)
   sgm_g.create("pri_monolit_brother_member3", 38.252, 1.206, 359.683, 249917, 736)
   sgm_g.create("pri_monolit_brother_member4", 37.085, 1.203, 373.399, 247895, 736)
end

function pri_expiation_sin_1_book(actor, npc)
   sgm_g.give_skill_book("skill_book_gauss")
end

function pri_expiation_sin_1_reward(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "pri_expiation_sin_1_reward", 7500), "in")
   sgm_g.give_reward("killer_outfit")
   sgm_g.give_reward("ammo_5.56x45_ap", 4)
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   sgm_g.give_reward("ammo_9x19_pbp", 3)
   sgm_g.give_secret(1)
end

function pri_expiation_sin_2_reward(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "pri_expiation_sin_2_reward", 8000), "in")
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   sgm_g.give_reward("ammo_dumdum", 5)
   sgm_g.give_secret(2)
end

function pri_expiation_sin_3_reward(actor, npc)
   local m_reward = r_quest_params("number", "pri_expiation_sin_3_reward", 25000)
   if has_alife_info("pri_monolit_brother_leader_death") then
      m_reward = m_reward - 11000
   end
   dialogs.relocate_money(npc, m_reward, "in")
   sgm_g.give_reward("ammo_dumdum", 2)
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   sgm_g.give_reward("ammo_5.56x45_ap", 4)
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   sgm_g.give_reward("ammo_7.62x54_7h1", 3)
   sgm_g.give_reward("bag_medkit_4")
   sgm_g.give_reward("bio_bandage", 5)
   sgm_g.give_reward("drug_engine")
   local cev_plastin_chance = math.random(100)
   if cev_plastin_chance <= 25 then
      sgm_g.give_reward("cev_plastin_5")
   elseif cev_plastin_chance >= 85 then
      sgm_g.give_reward("cev_plastin_4")
   end
   if get_rnd(1, 2) == 1 then
      sgm_g.give_reward("af_dragon_eye")
   else
      sgm_g.give_reward("af_monolit")
   end
   sgm_g.give_secret(3)
end

function pri_rescue_underground_guide_reward(actor, npc)
   sgm_g.give_reward("af_gold_fish_breeding_2")
   sgm_g.give_reward("drug_engine")
   sgm_g.give_reward("ammo_dumdum", 5)
   dialogs.relocate_money(npc, r_quest_params("number", "pri_rescue_guide_reward", 10000), "in")
   sgm_g.give_secret(2)
end

function pri_rescue_underground_guide_teleport(actor, npc)
   sgm_g.create("pri_hostage_miller", 170.738, -0.590, -233.381, 400081, 854)
   db.actor:set_actor_position(vector():set(-7.679, 9.151, -138.181))
   give_info("level_change_to_pripyat_from_underground")
   refresh_game_time(0, 18)
   level.add_pp_effector("black.ppe", 7779, false)
   set_ui_disabled()
   game_hide_menu()
   level.hide_indicators_safe()
   level.show_weapon(false)
end

function pri_signaller_toolkit_1_has(actor, npc)
   return db.actor:object("signaller_toolkit_1")
end

function pri_signaller_toolkit_1_bring(actor, npc)
   dialogs.relocate_item_section(npc, "signaller_toolkit_1", "out")
end

function pri_signaller_toolkit_1_reward(actor, npc)
   dialogs.relocate_money(npc, 2000, "in")
   if sgm_g.read_mod_param("pri_mechanic_stripping") ~= nil then
      sgm_g.write_mod_param("pri_mechanic_stripping", sgm_g.read_mod_param("pri_mechanic_stripping") + 1)
   end
end

function pri_signaller_toolkit_2_has(actor, npc)
   return db.actor:object("signaller_toolkit_2")
end

function pri_signaller_toolkit_2_bring(actor, npc)
   dialogs.relocate_item_section(npc, "signaller_toolkit_2", "out")
end

function pri_signaller_toolkit_2_reward(actor, npc)
   dialogs.relocate_money(npc, 3200, "in")
   if sgm_g.read_mod_param("pri_mechanic_stripping") ~= nil then
      sgm_g.write_mod_param("pri_mechanic_stripping", sgm_g.read_mod_param("pri_mechanic_stripping") + 3)
   end
end

function pri_fenix_vendetta_bring_medallion(actor, npc)
   dialogs.relocate_item_section(npc, "pri_fenix_brother_medallion", "out")
   dialogs.relocate_item_section(npc, "pri_inquisitor_pda_1", "out")
   dialogs.relocate_item_section(npc, "pri_inquisitor_pda_2", "out")
end

function pri_fenix_vendetta_sgm_g.give_reward(actor, npc)
   sgm_g.give_reward("ammo_7.62x54_7h1", 3)
   sgm_g.give_reward("ammo_5.56x45_ap", 5)
   sgm_g.give_reward("ammo_5.45x39_ap", 5)
   sgm_g.give_reward("af_dummy_dummy_breeding_1")
   sgm_g.give_reward("drug_engine")
   sgm_g.give_reward("drug_cat_eye")
   dialogs.relocate_money(npc, r_quest_params("number", "pri_fenix_vendetta_reward", 8500), "in")
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

function val_shade_of_time(actor, npc)
   sgm_g.start_game_timer("val_shade_of_time", 3)
end

function val_first_coming_valley_spawn(actor, npc)
   sgm_g.create("val_b2_accompany_guider", -113.314, -2.657, -266.059, 44684, 1111)
   sgm_g.create("val_b2_base_spot", -116.031, 0.651, -481.790, 41630, 1074)
end

function val_kill_night_predator_reward(actor, npc)
   sgm_g.give_reward("drug_booster")
   sgm_g.give_reward("bag_medkit_2")
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   sgm_g.give_reward("ammo_5.56x45_ap", 4)
   sgm_g.give_reward("ammo_dumdum", 2)
   if get_rnd(1, 2) == 1 then
      sgm_g.give_reward("af_dummy_battery")
   else
      sgm_g.give_reward("af_ice")
   end
   dialogs.relocate_money(npc, r_quest_params("number", "val_kill_night_predator_reward", 10000), "in")
   sgm_g.give_mp3_bonus()
   sgm_g.give_random_treasure()
   sgm_g.give_skill_book()
end

function val_kill_night_predator_spawn(actor, npc)
   sgm_g.create("val_b14_night_predator", 138.104, 4.032, -494.898, 306880, 1031)
   sgm_g.create("val_b14_night_predator_hole_spot", 116.667, 2.708, -478.729, 285091, 1144)
   sgm_g.create("val_b14_outpost_trap_spot", -40.959, 0.424, -518.592, 123749, 973)
end

function val_assault_factory_spawn(actor, npc)
   sgm_g.create_force("val_a2_snork_squad", "val_monster_burrow_2")
   sgm_g.create_force("val_a6_snork_squad", "val_monster_burrow_6")
   sgm_g.write_mod_param("val_assault_factory_stalker_counts", 7)
   sgm_g.write_mod_param("val_assault_factory_cover_1_done", 0)
   sgm_g.write_mod_param("val_assault_factory_cover_2_done", 0)
   sgm_g.create("val_b2_assault_b1_commander", -57.065, 0.063, -473.439, 105145, 1076)
   sgm_g.create("val_b2_assault_b1_soldier_1", -60.007, -0.035, -467.341, 101622, 1076)
   sgm_g.create("val_b2_assault_b1_soldier_2", -61.131, 0.156, -476.030, 100745, 1076)
   sgm_g.create("val_b2_assault_b1_soldier_3", -52.644, 0.202, -476.512, 110811, 1076)
   sgm_g.create("val_b2_assault_b1_soldier_4", -52.114, 0.063, -468.977, 111580, 1076)
   sgm_g.create("val_b2_assault_b1_soldier_5", -55.987, -0.103, -462.455, 106899, 1076)
   sgm_g.create("val_b2_assault_b1_soldier_6", -64.885, 0.127, -473.325, 95852, 1107)
   sgm_g.create("val_b1_courtyard_pipes_spot", 76.656, -1.576, -273.848, 241718, 1088)
   sgm_g.create("val_b1_base_spot", 144.977, 0.162, -258.135, 315304, 988)
end

function val_assault_factory_brought_pda(actor, npc)
   if db.actor:object("device_pda_b1_commander") then
      dialogs.relocate_item_section(npc, "device_pda_b1_commander", "out")
   end
   for i = 1, 3 do
      if db.actor:object("device_pda_b1_renegade_" .. i) then
         dialogs.relocate_item_section(npc, "device_pda_b1_renegade_" .. i, "out")
      end
   end
end

function val_assault_factory_reward_1(actor, npc)
   dialogs.relocate_money(npc, r_quest_params("number", "val_assault_factory_reward", 10000), "in")
end

function val_assault_factory_reward_2(actor, npc)
   sgm_g.give_mp3_bonus()
   sgm_g.give_random_treasure()
end

function val_brigand_sgm_g.give_reward(actor, npc)
   sgm_g.give_reward("af_dummy_glassbeads_breeding_2")
   sgm_g.give_reward("ammo_5.56x45_ap", 5)
   sgm_g.give_reward("ammo_5.45x39_ap", 5)
   sgm_g.give_reward("af_dummy_battery_breeding_1")
   dialogs.relocate_money(npc, r_quest_params("number", "val_brigand_reward", 7000), "in")
   sgm_g.give_random_treasure()
end

function val_secret_development_give(actor, npc)
   dialogs.relocate_item_section(npc, "x18_secret_gs67", "out")
end

function val_secret_development_reward(actor, npc)
   local rnd_wpn_reward = math.random(1, 2)
   if rnd_wpn_reward == 1 then
   else
   end
   dialogs.relocate_money(npc, r_quest_params("number", "val_secret_development_reward", 14000), "in")
   sgm_g.give_random_treasure()
   sgm_g.give_skill_book()
end

function val_issue_secret_data_bring_docks(actor, npc)
   dialogs.relocate_item_section(npc, "x18_secret_docks_1", "out")
   dialogs.relocate_item_section(npc, "x18_secret_docks_2", "out")
   dialogs.relocate_item_section(npc, "x18_secret_docks_3", "out")
end

function val_issue_secret_data_sgm_g.give_reward(actor, npc)
   sgm_g.give_reward("medkit_elite", 10)
   sgm_g.give_reward("af_fire_breeding_2")
   dialogs.relocate_money(npc, r_quest_params("number", "val_issue_secret_data_reward", 80000), "in")
   sgm_g.give_random_treasure()
   sgm_g.give_skill_book()
   sgm_g.game_autosave_assign("save_val_issue_secret_data")
end

function colmogor_create_freedom_lucas(first_speaker, second_speaker)
   sgm_g.create("val_freedom_spez_agent_lucas", -160.180, 6.927, -139.410, 8283, 944)
   task_manager.get_task_manager():give_task("geonezis_lucas_mistery_quest")
end

function lucas_give_antenna_quest_1(first_speaker, second_speaker)
   dialogs.relocate_item_section_to_actor(first_speaker, second_speaker, "val_lucas_spez_scanner")
   sgm_g.create("val_lucas_quest_antenna_1_spot", -9.693120, -4.129715, -281.106455, 156776, 956)
   sgm_g.create("val_lucas_quest_antenna_2_spot", -114.161697, 0.699540, -494.373413, 43681, 1074)
   sgm_g.create("val_lucas_quest_antenna_3_spot", -42.534573, 9.651953, -8.805862, 122692, 985)
   task_manager.get_task_manager():give_task("geonezis_lucas_mistery_quest_3")
   task_manager.get_task_manager():give_task("geonezis_lucas_mistery_quest_2")
   task_manager.get_task_manager():give_task("geonezis_lucas_mistery_quest_1")
end

function lucas_give_antenna_skaner(first_speaker, second_speaker)
   dialogs.relocate_item_section_from_actor(first_speaker, second_speaker, "val_lucas_spez_scanner")
end

function lucas_create_quad_dolg(first_speaker, second_speaker)
   sgm_g.create("val_lucas_quest_first_spot", -76.448, -0.808, 52.107, 83943, 1021)
   sgm_g.create("val_dolg_spez_quad_1", -70.008, 0.125, 59.806, 90879, 1021)
   sgm_g.create("val_dolg_spez_quad_2", -76.825, -1.162, 47.088, 83165, 1021)
   sgm_g.create("val_dolg_spez_quad_3", -83.558, -0.917, 54.829, 76840, 1021)
   sgm_g.create("val_dolg_spez_quad_4", -67.502, 0.006, 52.212, 94061, 1021)
end

function to_lucas_give_documents(first_speaker, second_speaker)
   local items_table = { "val_lucas_quests_info_1", "val_lucas_quests_info_2", "val_lucas_quests_info_3" }
   for k, v in pairs(items_table) do
      if db.actor:object(v) ~= nil then
         dialogs.relocate_item_section_from_actor(first_speaker, second_speaker, v)
      end
   end
end

function to_actor_give_money_val_lucas(first_speaker, second_speaker)
   dialogs.relocate_money_to_actor(first_speaker, second_speaker, 5000)
end

function to_actor_give_money_val_kolmogor(first_speaker, second_speaker)
   dialogs.relocate_money_to_actor(first_speaker, second_speaker, 15000)
end

function colmogor_create_equipment_1(first_speaker, second_speaker)
   alife():create("freedom_exo_outfit", vector():set(10.493, -2.429, -345.515), 176062, 957)
end

function colmogor_create_equipment_2(first_speaker, second_speaker)
   alife():create("wpn_svd", vector():set(190.445, 4.772, -364.351), 358910, 1030)
end

function lucas_create_quad_freedom(first_speaker, second_speaker)
   sgm_g.create("val_lucas_quest_third_spot", -43.064, 0.436, -492.944, 121383, 997)
   sgm_g.create("val_night_zam_leader_kolmogor_2", -8.670, -0.816, -522.623, 157762, 974)
   sgm_g.create("val_freedom_spez_agent_member_1", 0.562, 0.105, -529.315, 166353, 974)
   sgm_g.create("val_freedom_spez_agent_member_2", -19.802, -1.611, -527.757, 147277, 974)
end

function mil_dislodge_invaders_reward(actor, npc)
   sgm_g.give_reward("ammo_5.45x39_fmj,ammo_5.45x39_ap", 3)
   sgm_g.give_reward("drug_cat_eye")
   sgm_g.give_reward("medkit_scientic", 3)
   sgm_g.give_reward("antirad", 5)
   sgm_g.give_reward("bio_bandage", 5)
   dialogs.relocate_money(npc, r_quest_params("number", "mil_dislodge_invaders_reward", 25000), "in")
   sgm_g.give_random_treasure()
   sgm_g.give_random_treasure()
   sgm_g.give_skill_book()
end

function mil_conduct_night_stalkers(actor, npc)
   sgm_g.create("mil_b7_colonizer_commander", -246.89933776855, -23.83517074585, 101.58116149902, 81562, 1304)
   sgm_g.create("mil_b7_colonizer_soldier_1", -246.22113037109, -23.625074386597, 103.8784866333, 82084, 1304)
   sgm_g.create("mil_b7_colonizer_soldier_2", -245.11753845215, -23.67847442627, 100.14258575439, 83169, 1304)
   sgm_g.create("mil_b7_colonizer_soldier_3", -244.43472290039, -23.402379989624, 102.07420349121, 83695, 1304)
   sgm_g.create("mil_b7_colonizer_soldier_4", -243.96101379395, -23.208349227905, 107.15369415283, 83700, 1304)
   sgm_g.create("mil_b7_colonizer_soldier_5", -243.08708190918, -23.103693008423, 104.6512298584, 84717, 1304)
   sgm_g.add_task("mil_conduct_night_stalkers")
end

function mil_boarding_money_case_pre_reward(actor, npc)
   sgm_g.give_reward("activate_knife_m9")
end

function mil_boarding_money_case_bring(actor, npc)
   dialogs.relocate_item_section(npc, "val_renegade_money_case", "out")
end

function mil_boarding_money_case_reward(actor, npc)
   dialogs.relocate_item_section(actor, "drug_radioprotector", "in")
   sgm_g.give_reward("medkit_elite", 2)
   sgm_g.give_reward("antirad", 4)
   sgm_g.give_reward("bio_bandage", 3)
   dialogs.relocate_money(npc, r_quest_params("number", "mil_boarding_money_case_reward", 20000), "in")
   sgm_g.give_random_treasure()
   sgm_g.give_random_treasure()
   sgm_g.give_skill_book()
end

function mil_bolted_influence_spawn(actor, npc)
   if sgm_g.dont_has_alife_info("mil_bolted_influence_renegade_spawn") then
      sgm_g.create_force("mil_b1_renegade_returned_squad", "mil_smart_terrain_1")
      sgm_g.create_force("mil_b2_renegade_returned_squad", "mil_smart_terrain_2")
      sgm_g.create_force("mil_b3_renegade_returned_squad", "mil_smart_terrain_3")
      sgm_g.create_force("mil_b4_renegade_returned_squad", "mil_smart_terrain_4")
      sgm_g.create_force("mil_b5_renegade_returned_squad", "mil_smart_terrain_5")
      sgm_g.create_force("mil_b6_renegade_returned_squad", "mil_smart_terrain_6")
      give_info("mil_bolted_influence_renegade_spawn")
   end
end

function mil_bolted_influence_reward(actor, npc)
   sgm_g.give_reward("ammo_gauss,ammo_gauss_cardan", 3)
   sgm_g.give_reward("drug_engine")
   sgm_g.give_reward("medkit_elite", 5)
   sgm_g.give_reward("antirad", 5)
   sgm_g.give_reward("bio_bandage", 6)
   dialogs.relocate_money(npc, r_quest_params("number", "mil_bolted_influence_reward", 75000), "in")
   sgm_g.give_random_treasure()
   sgm_g.give_random_treasure()
   sgm_g.give_skill_book()
end

function agr_deliver_secret_docks_bring(actor, npc)
   dialogs.relocate_item_section(npc, "agru_secret_docks_1", "out")
   dialogs.relocate_item_section(npc, "agru_secret_docks_2", "out")
end

function agr_deliver_secret_docks_reward(actor, npc)
   sgm_g.give_reward("af_vaselisk")
   sgm_g.give_reward("medkit_elite", 5)
   dialogs.relocate_money(npc, 50000, "in")
   sgm_g.give_random_treasure()
   sgm_g.give_random_treasure()
   sgm_g.give_random_treasure()
end

function esc_whimsical_artefact_has(actor, npc)
   return db.actor:object("af_shapoklak")
end

function esc_whimsical_artefact_bring(actor, npc)
   dialogs.relocate_item_section(npc, "af_shapoklak", "out")
end

function esc_whimsical_artefact_reward(actor, npc)
   sgm_g.give_reward("ammo_5.56x45_ap", 2)
   sgm_g.give_reward("ammo_5.45x39_ap", 2)
   dialogs.relocate_money(npc, 4000, "in")
   sgm_g.give_random_treasure()
   sgm_g.give_random_treasure()
end

function esc_village_annex_bring(actor, npc)
   dialogs.relocate_item_section(npc, "esc_b2_tamerlan_flash", "out")
end

function esc_village_annex_reward(actor, npc)
   sgm_g.give_reward("psy_complex", 2)
   sgm_g.give_reward("bio_bandage", 4)
   sgm_g.give_reward("medkit", 4)
   sgm_g.give_reward("ammo_9x18_pmm", 3)
   sgm_g.give_reward("ammo_9x19_pbp", 3)
   sgm_g.give_reward("ammo_5.45x39_ap", 3)
   dialogs.relocate_money(npc, 5000, "in")
   sgm_g.give_random_treasure()
end

function esc_lull_before_borax_reward(actor, npc)
   ---------------------------------makdm
   sgm_g.give_reward("drug_anabiotic")
   --------------------------------------
   sgm_g.give_reward("conventer_grenade_box")
   sgm_g.give_reward("bandage", 5)
   sgm_g.give_reward("medkit", 2)
   sgm_g.give_reward("ammo_9x19_pbp", 2)
   sgm_g.give_reward("ammo_12x76_zhekan", 3)
   sgm_g.give_reward("ammo_5.45x39_fmj", 2)
   dialogs.relocate_money(npc, 3000, "in")
   sgm_g.give_random_treasure()
end

function esc_atp_annex_give_night_vision(actor, npc)
   dialogs.relocate_item_section(actor, "helm_respirator_m", "in")
end

function esc_atp_annex_bring(actor, npc)
   dialogs.relocate_item_section(npc, "esc_b3_safe_flash", "out")
end

function esc_atp_annex_reward(actor, npc)
   sgm_g.give_reward("remote_explosive_charge")
   sgm_g.give_reward("psy_complex", 2)
   --------------------------------------makdm
   sgm_g.give_reward("drug_anabiotic")
   -------------------------------------------
   sgm_g.give_reward("bio_bandage", 3)
   sgm_g.give_reward("medkit_army", 4)
   sgm_g.give_reward("ammo_9x18_pmm", 4)
   sgm_g.give_reward("ammo_9x19_pbp", 4)
   sgm_g.give_reward("ammo_5.45x39_fmj", 2)
   sgm_g.give_reward("ammo_5.45x39_ap", 2)
   dialogs.relocate_money(npc, 5000, "in")
   sgm_g.give_random_treasure()
end

function mar_army_cargo_give(actor, npc)
   sgm_g.create("mar_army_cargo", 170.30877685547, 11.944862365723, 530.21343994141, 235352, 1827)
   dialogs.relocate_item_section(actor, "mar_georadar", "in")
   sgm_g.game_autosave_assign("save_mar_army_cargo_georadar_received")
end

function mar_army_cargo_bring(actor, npc)
   dialogs.relocate_item_section(npc, "mar_army_cargo", "out")
end

function mar_army_cargo_reward(actor, npc)
   sgm_g.give_random_treasure()
   sgm_g.give_random_treasure()
end

function mar_mine_detector_bring(actor, npc)
   dialogs.relocate_item_section(npc, "mar_mine_sensor", "out")
end

function mar_mine_detector_give(actor, npc)
   dialogs.relocate_item_section(actor, "mar_mine_detector", "in")
   sgm_g.game_autosave_assign("save_mar_mine_detector_received")
end

function mar_capture_church_reward(actor, npc)
   sgm_g.give_reward("bio_bandage", 5)
   sgm_g.give_reward("medkit", 5)
   sgm_g.give_reward("ammo_9x18_pmm", 4)
   sgm_g.give_reward("ammo_9x19_pbp", 4)
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   dialogs.relocate_money(npc, 5000, "in")
   sgm_g.give_random_treasure()
   sgm_g.give_random_treasure()
end

function red_psyho_dead_group(actor, npc)
   sgm_g.create("red_psyho_scientific_halt_spot", -6.6774435043335, -2.3945868015289, -275.86642456055, 60703, 2200)
   sgm_g.create("red_psyho_experiment_place_spot", 225.26860046387, -7.8777375221252, -102.09394836426, 140603, 2147)
   sgm_g.create("red_psyho_security_corpse", -12.463531494141, -2.5266389846802, -276.50909423828, 55524, 2200)
   sgm_g.create("red_psyho_ecolog_corpse", -8.5272779464722, -2.4809272289276, -280.61871337891, 59488, 2200)
end

function red_psyho_halt_1(actor, npc)
   sgm_g.create("red_psyho_halt_place_1_spot", -86.309677124023, 0.053133428096771, -237.20504760742, 12774, 2196)
   sgm_g.create("red_psyho_halt_1_ecolog_1", -88.583641052246, 0.23857054114342, -241.02226257324, 12424, 2196)
   sgm_g.create("red_psyho_halt_1_ecolog_2", -88.002716064453, 0.17844703793526, -231.48352050781, 12530, 2196)
   sgm_g.create("red_psyho_halt_1_security_3", -90.459457397461, 0.10313460230827, -235.88131713867, 12224, 2196)
   sgm_g.create("red_psyho_halt_1_security_4", -91.653289794922, 0.12100675702095, -239.58142089844, 11983, 2196)
   sgm_g.create("red_psyho_halt_1_security_5", -96.527000427246, 0.068396776914597, -232.6838684082, 11240, 2196)
   sgm_g.release_objects_by_section("sgm_red_psyho_zone")
end

function red_psyho_give_group_pda(actor, npc)
   dialogs.relocate_item_section(npc, "red_psyho_killer_pda_1", "out")
   dialogs.relocate_item_section(npc, "red_psyho_killer_pda_2", "out")
end

function red_psyho_give_developments(actor, npc)
   dialogs.relocate_item_section(npc, "red_psyho_development_1", "out")
   dialogs.relocate_item_section(npc, "red_psyho_development_2", "out")
   dialogs.relocate_item_section(npc, "red_psyho_ecolog_pda", "out")
end

function red_psyho_reward(actor, npc)
   sgm_g.give_reward("antirad", 3)
   sgm_g.give_reward("medkit_scientic", 5)
   sgm_g.give_reward("ammo_5.56x45_ap", 4)
   sgm_g.give_reward("ammo_5.45x39_ap", 4)
   dialogs.relocate_money(npc, 10000, "in")
   sgm_g.give_random_treasure()
   sgm_g.give_random_treasure("red_forest")
   sgm_g.give_secret(1)
   sgm_g.give_skill_book()
end

------------------------------------------------------------------------------
--                        Функции автосохранений                            --
------------------------------------------------------------------------------
function save_pri_assault_monolith_base_began(actor, npc)
   sgm_g.game_autosave_assign("save_pri_assault_monolith_base_began")
end

function save_pri_expiation_sin_3_follow_to_squad(actor, npc)
   sgm_g.game_autosave_assign("save_pri_expiation_sin_3_follow_to_squad")
end

------------------------------------------------------------------------------
--                        Функции запуска квестов                           --
------------------------------------------------------------------------------
function zat_meet_authorities_agent(actor, npc)
   if sgm_g.get_global_pattern() == 1 then
      sgm_g.create("zat_authorities_agent", -426.664, 36.196, -396.447, 138096, 306)
   else
      sgm_g.create("zat_authorities_agent", -430.950, 2.888, 5.783, 133074, 14)
   end
   sgm_g.add_task("sgm_zat_meet_authorities_agent")
end

function zat_check_sbu_cell(actor, npc)
   sgm_g.create("zat_sbu_cell_spot", 301.473, 19.531, 535.454, 1480920, 287)
   local cell_items = "flash_avoid_witnesses,killer_outfit,helm_spectacles,money_meshochek_3000_4000"
   create_inventory_item(cell_items, "zat_avoid_witnesses_cell", 301.473, 19.531, 535.454, 1480920, 287)
   sgm_g.add_task("sgm_zat_check_sbu_cell")
end

function zat_danger_parcel(actor, npc)
   if sgm_g.get_global_pattern() == 1 then
      sgm_g.create("zat_duty_kanevskiy", 576.494, 10.687, -288.000, 1841060, 220)
      sgm_g.create("zat_duty_kanevskiy_drug", 581.163, 10.810, -287.285, 1842173, 220)
   else
      sgm_g.create("zat_duty_kanevskiy", -419.410, 25.774, -219.004, 149220, 93)
      sgm_g.create("zat_duty_kanevskiy_drug", -414.496, 25.517, -216.123, 156542, 93)
   end
   sgm_g.add_task("sgm_zat_danger_parcel")
end

function zat_meet_to_breeder(actor, npc)
   sgm_g.add_task("sgm_zat_meet_to_breeder")
end

function zat_breeder_search_unknown(actor, npc)
   local rnd_acid_star = math.random(1, 4)
   if sgm_g.get_global_pattern() == 1 then
      sgm_g.create("af_acid_star_spot", -422.45202636719, -7.3844261169434, 169.76614379883, 184065, 261)
      if rnd_acid_star == 1 then
         sgm_g.create("af_acid_star", -443.27081298828, -9.3646364212036, 144.91583251953, 119885, 214)
      elseif rnd_acid_star == 2 then
         sgm_g.create("af_acid_star", -442.24459838867, -8.9834318161011, 208.71829223633, 94634, 16)
      elseif rnd_acid_star == 3 then
         sgm_g.create("af_acid_star", -417.15051269531, -10.735691070557, 209.33422851563, 94634, 16)
      else
         sgm_g.create("af_acid_star", -380.91165161133, -8.9488620758057, 185.72372436523, 188300, 261)
      end
   else
      sgm_g.create("af_acid_star_spot", -282.26168823242, 17.576551437378, 358.14727783203, 380893, 115)
      if rnd_acid_star == 1 then
         sgm_g.create("af_acid_star", -268.34039306641, 11.098146438599, 350.78839111328, 407305, 113)
      elseif rnd_acid_star == 2 then
         sgm_g.create("af_acid_star", -259.89730834961, 12.442667007446, 366.71011352539, 423844, 113)
      elseif rnd_acid_star == 3 then
         sgm_g.create("af_acid_star", -243.37937927246, 9.1299333572388, 361.09149169922, 456733, 113)
      else
         sgm_g.create("af_acid_star", -269.69592285156, 12.474707603455, 353.48715209961, 404629, 113)
      end
   end
   sgm_g.add_task("sgm_zat_breeder_search_unknown")
end

function zat_accompany_to_boat(actor, npc)
   sgm_g.create("zat_accompany_to_boat_spot", 148.695, -7.344, 183.552, 1220159, 295)
   sgm_g.add_task("sgm_zat_accompany_to_boat")
end

function zat_refer_parcel(actor, npc)
   sgm_g.add_task("sgm_zat_refer_parcel")
   dialogs.relocate_item_section(actor, "zat_postman_parcel", "in")
end

function zat_assault_bandit_base(actor, npc)
   sgm_g.add_task("sgm_zat_assault_bandit_base")
end

function zat_deliver_monolith_case(actor, npc)
   sgm_g.add_task("sgm_zat_deliver_monolith_case")
end

function zat_will_leave_jupiter(actor, npc)
   sgm_g.add_task("sgm_zat_will_leave_jupiter")
end

function zat_bandit_kill_shakal(actor, npc)
   sgm_g.create("zat_bandit_kill_shakal_spot", -130.121, 24.142, -417.739, 680773, 4)
   sgm_g.create("zat_killer_shakal", -147.467, 23.585, -428.157, 646858, 4)
   sgm_g.create("zat_shakal_bodyguard", -147.223, 23.582, -432.216, 648288, 4)
   sgm_g.create("zat_shakal_interception", -148.964, 23.573, -423.975, 643965, 4)
   sgm_g.create("zat_shakal_rpg_1", -133.013, 27.279, -389.703, 675531, 4)
   sgm_g.create("zat_shakal_rpg_2", -138.134, 27.280, -389.639, 666298, 4)
   sgm_g.add_task("sgm_zat_bandit_kill_shakal")
   sgm_g.game_autosave_assign("save_zat_bandit_kill_shakal_search")
end

function zat_bring_flash_light(actor, npc)
   if sgm_g.get_global_pattern() == 1 then
      sgm_g.create("quest_flash_light", -181.315, 20.005, -184.315, 578636, 57)
   else
      sgm_g.create("quest_flash_light", -163.873, 8.219, 83.099, 613892, 246)
   end
   sgm_g.add_task("sgm_zat_bring_flash_light")
end

function zat_bring_drink_beylis(actor, npc)
   sgm_g.add_task("sgm_zat_bring_drink_beylis")
end

function zat_bring_sharpshooter_bino(actor, npc)
   sgm_g.create("zat_bandit_base_guider", 457.882, 37.498, -2.563, 1712008, 293)
   if sgm_g.get_global_pattern() == 1 then
      sgm_g.create("quest_sharpshooter_binocular", -395.200, 12.319, 10.139, 51661, 376)
   else
      sgm_g.create("quest_sharpshooter_binocular", -192.696, 5.122, -278.327, 390282, 559)
   end
   sgm_g.add_task("sgm_zat_bring_sharpshooter_bino")
end

function zat_monsters_wave_quest(actor, npc)
   sgm_g.create("zat_barge_commander", 148.775, -6.824, -134.896, 1219831, 149)
   sgm_g.create("zat_barge_stalker1", 132.121, -3.659, -142.520, 1192032, 150)
   sgm_g.create("zat_barge_stalker2", 143.593, -4.202, -161.406, 1211195, 149)
   sgm_g.create("zat_barge_stalker3", 142.008, -6.823, -142.053, 1208939, 149)
   sgm_g.create("zat_barge_stalker4", 169.499, 3.800, -162.827, 1255930, 149)
   sgm_g.create("zat_barge_stalker5", 138.512, -6.827, -142.066, 1203498, 149)
   sgm_g.create("zat_barge_stalker6", 137.932, -6.824, -135.269, 1202391, 149)
   sgm_g.create("zat_barge_stalker7", 158.784, -6.515, -132.784, 1238020, 13)
   sgm_g.create("zat_noah_barge_main_spot", 151.455, -6.823, -138.430, 1224672, 13)
   sgm_g.create("zat_noah_barge_firepos_spot", 132.904, -3.658, -135.626, 1196686, 150)
   sgm_g.add_task("sgm_zat_monsters_wave")
end

function zat_wisdom_books(actor, npc)
   create_random("zat_wisdom_book_1", 4, "-427.88925170898,40.906017303467,-391.25476074219,138100,306",
      "350.15295410156,33.24275970459,-392.08786010742,1548489,1",
      "411.13562011719,-5.7521514892578,232.09036254883,1637745,7",
      "-176.5627746582,19.940221786499,-153.60710144043,587876,57")
   create_random("zat_wisdom_book_2", 4, "-385.26831054688,6.8968181610107,-16.33740234375,200474,52",
      "-315.65933227539,13.372056007385,428.24304199219,316479,0",
      "64.273132324219,-4.5504374504089,29.154445648193,1073479,19",
      "152.62382507324,-6.3037400245667,-142.84803771973,1227071,13")
   create_random("zat_wisdom_book_3", 3, "-148.18193054199,24.089563369751,-429.84701538086,646856,4",
      "-179.21305847168,9.4111366271973,76.51448059082,582891,145",
      "105.87712097168,-0.61825501918793,188.03581237793,1149485,316")
   sgm_g.add_task("sgm_zat_wisdom_books")
end

function zat_mad_dog(actor, npc)
   sgm_g.create_force("zat_mad_dog_squad", -349.61730957031, 39.804275512695, -294.8235168457, 256767, 303)
   sgm_g.add_task("sgm_zat_mad_dog")
end

function zat_carrying_antidote(actor, npc)
   dialogs.relocate_item_section(actor, "zat_medic_antidote", "in")
   sgm_g.add_task("sgm_zat_carrying_antidote")
end

function jup_bring_heavy_medkits(actor, npc)
   sgm_g.create("quest_heavy_medkits", 348.967, 20.666, -314.291, 1273602, 369)
   sgm_g.add_task("sgm_jup_bring_heavy_medkits")
end

function jup_bring_photo_device(actor, npc)
   sgm_g.create("quest_photo_device", 12.862, 24.297, -408.320, 734792, 587)
   sgm_g.add_task("sgm_jup_bring_photo_device")
end

function jup_bring_arms_case(actor, npc)
   sgm_g.create("quest_arms_case", 41.033, 0.369, -255.812, 252954, 702)
   sgm_g.create("pri_monolith_case_guard_1", 35.032, 0.241, -252.660, 243954, 702)
   sgm_g.create("pri_monolith_case_guard_2", 35.032, 0.241, -252.660, 243954, 702)
   sgm_g.add_task("sgm_jup_bring_arms_case")
end

function jup_find_gromoboy_vintar(actor, npc)
   sgm_g.create("jup_monolith_thief", -335.597, 1.494, 263.818, 149065, 380)
   sgm_g.create_dead_body("monolith_dead_body_2", nil, 389.342, 0.600, 321.431, 1330578, 351)
   sgm_g.add_task("sgm_jup_find_gromoboy_vintar")
end

function jup_gromoboy_add_spawn(actor, npc)
   sgm_g.create("jup_find_gromoboy_vintar_spot", 387.004, 0.599, 321.342, 1327486, 351)
   local rnd_gromoboy = math.random(1, 5)
   if rnd_gromoboy == 1 then
      sgm_g.create("wpn_vintorez_bomber", 381.08807373047, 6.9604020118713, 311.65075683594, 1319054, 351)
   elseif rnd_gromoboy == 2 then
      sgm_g.create("wpn_vintorez_bomber", 362.90637207031, 1.0815975666046, 335.55255126953, 1293265, 352)
   elseif rnd_gromoboy == 3 then
      sgm_g.create("wpn_vintorez_bomber", 393.5439453125, 32.886432647705, 361.73297119141, 1336643, 350)
   elseif rnd_gromoboy == 4 then
      sgm_g.create("wpn_vintorez_bomber", 390.89743041992, 4.7360033988953, 331.01290893555, 1331632, 350)
   else
      sgm_g.create("wpn_vintorez_bomber", 365.70455932617, 38.065956115723, 333.98034667969, 1296669, 349)
   end
end

function jup_destroy_night_killers(actor, npc)
   sgm_g.create("jup_night_killers_spot", 224.694, -9.701, 163.109, 1101098, 507)
   sgm_g.create("jup_night_killer_1", 226.305, -6.898, 170.862, 1096311, 507)
   sgm_g.create("jup_night_killer_2", 221.680, -6.898, 170.785, 1096311, 507)
   sgm_g.create("jup_night_killer_3", 224.125, -5.768, 166.798, 1096309, 507)
   sgm_g.create("jup_night_killer_4", 224.155, -7.303, 156.093, 1099905, 507)
   sgm_g.create("jup_night_killer_5", 220.178, -29.688, 154.252, 1093835, 504)
   sgm_g.create("jup_night_killer_6", 230.813, -12.316, 189.934, 1111233, 507)
   sgm_g.create("jup_night_killer_7", 229.419, -9.415, 192.021, 1103387, 507)
   sgm_g.add_task("sgm_jup_destroy_night_killers")
end

function jup_follow_scientists(actor, npc)
   sgm_g.write_mod_param("jup_fw_scientists_deaths", 0)
   sgm_g.create("jup_mine_zombied_1", -45.294, 23.780, -335.701, 642480, 326)
   sgm_g.create("jup_mine_zombied_2", -77.302, 23.883, -33.869, 591810, 481)
   sgm_g.create("jup_mine_zombied_3", -98.973, 24.025, -330.878, 555829, 467)
   sgm_g.create("jup_mine_zombied_4", -124.607, 23.938, -332.254, 509581, 467)
   sgm_g.create("jup_mine_zombied_5", -122.798, 24.586, -314.923, 513422, 467)
   sgm_g.create("jup_mine_zombied_6", -117.867, 23.857, -302.533, 522437, 607)
   sgm_g.create("jup_mine_zombied_7", -90.212, 23.807, -302.245, 569725, 606)
   sgm_g.create("jup_mine_zombied_8", -53.059, 23.676, -307.369, 629844, 326)
   sgm_g.create("jup_mine_zombied_1", -45.294, 23.780, -335.701, 642480, 326)
   sgm_g.create("jup_mine_zombied_2", -77.302, 23.883, -33.869, 591810, 481)
   sgm_g.create("jup_mine_zombied_3", -98.973, 24.025, -330.878, 555829, 467)
   sgm_g.create("jup_mine_zombied_4", -124.607, 23.938, -332.254, 509581, 467)
   sgm_g.create("jup_mine_zombied_5", -122.798, 24.586, -314.923, 513422, 467)
   sgm_g.create("jup_mine_zombied_6", -117.867, 23.857, -302.533, 522437, 607)
   sgm_g.create("jup_mine_zombied_7", -90.212, 23.807, -302.245, 569725, 606)
   sgm_g.create("jup_mine_zombied_8", -53.059, 23.676, -307.369, 629844, 326)
   sgm_g.create("jup_mine_zombied_9", -180.892, 3.331, -77.640, 410666, 393)
   sgm_g.create("jup_mine_zombied_10", -169.949, 0.749, -153.351, 429141, 458)
   sgm_g.create("jup_mine_zombied_11", -141.502, 2.363, -150.306, 480621, 459)
   sgm_g.create("jup_mine_zombied_12", -164.128, -0.202, -87.584, 440684, 396)
   sgm_g.add_task("sgm_jup_follow_scientists")
   sgm_g.game_autosave_assign("save_jup_follow_scientists_init")
end

function jup_hostage_dest_spot(actor, npc)
   sgm_g.create("jup_hostage_dest_spot", -1.018, 3.413, 204.178, 714145, 409)
end

function jup_bring_detector_kit(actor, npc)
   local rnd_spawn = math.random(1, 2)
   if rnd_spawn == 1 then
      sgm_g.create("detector_modify_toolkit", 481.422, 36.931, -406.290, 1453595, 630)
   else
      sgm_g.create("detector_modify_toolkit", 417.800, 32.372, -361.604, 1378094, 628)
   end
   sgm_g.add_task("sgm_jup_bring_detector_kit")
end

function jup_rasvet_destroy_snorks(actor, npc)
   sgm_g.create_force("jup_rasvet_snorks_squad", 25.590, 1.619, 306.063, 757495, 432)
   sgm_g.add_task("sgm_jup_rasvet_destroy_snorks")
end

function jup_mercenary_check_plant(actor, npc)
   sgm_g.create("jup_plant_main_vhod_spot", 254.282, 27.201, -223.706, 1143400, 547)
   sgm_g.create("jup_plant_perimetr_spot", 324.742, 26.870, -255.489, 1236544, 549)
   sgm_g.create("jup_plant_second_stage_spot", 327.460, 34.593, -226.167, 1240512, 549)
   sgm_g.create("jup_plant_building_exit_spot", 344.514, 26.869, -253.907, 1265463, 549)
   sgm_g.add_task("sgm_jup_mercenary_check_plant")
end

function jup_mercenary_check_plant_capture_plant(actor, npc)
   sgm_g.create("jup_psi_controller_2", 347.689, 27.183, -277.183, 1270540, 549)
   sgm_g.create("jup_psi_controller_3", 342.520, 27.975, -232.123, 1262289, 549)
   sgm_g.create("jup_ambush_zombied_11", 298.274, 27.077, -267.674, 1200276, 633)
   sgm_g.create("jup_ambush_zombied_12", 267.152, 26.924, -244.206, 1160457, 635)
   sgm_g.create("jup_ambush_zombied_13", 278.499, 27.612, -231.468, 1175114, 548)
   sgm_g.create("jup_ambush_zombied_14", 241.849, 28.025, -253.978, 1126950, 636)
   sgm_g.create("jup_ambush_zombied_15", 290.338, 26.228, -239.453, 1190339, 634)
end

function jup_mercenary_check_plant_squad(actor, npc)
   sgm_g.create("jup_killer_first_squad_commander", 186.958, 28.213, -424.229, 1034208, 610)
   sgm_g.create("jup_killer_first_squad_member1", 181.896, 28.165, -420.229, 1025636, 610)
   sgm_g.create("jup_killer_first_squad_member2", 181.806, 28.178, -428.548, 1025624, 610)
   sgm_g.create("jup_killer_first_squad_member3", 177.744, 28.165, -423.131, 1018165, 610)
end

function jup_mercenary_check_plant_again_squad(actor, npc)
   sgm_g.create("jup_killer_second_squad_commander", 186.958, 28.213, -424.229, 1034208, 610)
   sgm_g.create("jup_killer_second_squad_member1", 181.896, 28.165, -420.229, 1025636, 610)
   sgm_g.create("jup_killer_second_squad_member2", 181.806, 28.178, -428.548, 1025624, 610)
   sgm_g.create("jup_killer_second_squad_member3", 177.744, 28.165, -423.131, 1018165, 610)
end

function jup_rasvet_eliminate_burrows(actor, npc)
   xr_effects.jup_rasvet_eliminate_burrows_hole_1_launch()
   sgm_g.add_task("sgm_jup_rasvet_eliminate_burrows")
end

function jup_search_anomal_prototype(actor, npc)
   dialogs.relocate_item_section(actor, "detector_serafim", "in")
   if get_rnd(1, 2) == 1 then
      sgm_g.create("af_prodigy_1_danger", -350.127, 40.109, -368.417, 255474, 29)
      sgm_g.create("af_prodigy_2_danger", 393.724, -5.444, 435.390, 1616516, 242)
   else
      sgm_g.create("af_prodigy_1_danger", -17.765, 24.970, 320.719, 908963, 237)
      sgm_g.create("af_prodigy_2_danger", 15.353, 9.714, -392.285, 974688, 8)
   end
   if get_rnd(1, 2) == 1 then
      sgm_g.create("af_prodigy_3_danger", 250.110, -29.630, 112.478, 1138454, 345)
      sgm_g.create("af_prodigy_4_danger", -394.972, 14.576, 353.005, 53094, 422)
   else
      sgm_g.create("af_prodigy_3_danger", 84.821, 5.7357, 17.804, 860122, 553)
      sgm_g.create("af_prodigy_4_danger", 366.424, -5.857, 370.567, 1297874, 611)
   end
   if get_rnd(1, 2) == 1 then
      sgm_g.create("af_prodigy_5_danger", 126.023, -0.241, 207.342, 352774, 707)
      sgm_g.create("af_prodigy_6_danger", -63.226, -0.422, -103.768, 126469, 772)
   else
      sgm_g.create("af_prodigy_5_danger", 114.879, -0.536, -243.568, 340252, 856)
      sgm_g.create("af_prodigy_6_danger", 192.634, -1.155, 287.737, 422584, 739)
   end
   sgm_g.add_task("sgm_jup_search_anomal_prototype")
end

function jup_weak_lighthouse(actor, npc)
   sgm_g.create("jup_weak_lighthouse", 393.38070678711, 22.838840484619, -369.36849975586, 1335828, 629)
   sgm_g.add_task("sgm_jup_weak_lighthouse")
end

function jup_examine_caravan(actor, npc)
   sgm_g.create("jup_killer_caravan_commander", -96.488662719727, 23.897964477539, -352.5168762207, 559366, 481)
   sgm_g.create("jup_killer_caravan_member1", -90.16471862793, 23.899240493774, -356.07702636719, 569636, 481)
   sgm_g.create("jup_killer_caravan_member2", -87.531158447266, 23.889177322388, -349.37356567383, 574433, 481)
   sgm_g.create("jup_killer_caravan_member3", -101.53507232666, 23.897756576538, -352.02645874023, 551042, 481)
   sgm_g.create("jup_caravan_gigant", -79.811882019043, 23.919052124023, -367.25283813477, 587193, 481)
   sgm_g.create("bloodsucker_2_nightmare_hunter", -59.879100799561, 23.960222244263, -377.0764465332, 618792, 481)
   sgm_g.add_task("sgm_jup_examine_caravan")
end

function jup_liquidate_valet(actor, npc)
   sgm_g.add_task("sgm_jup_liquidate_valet")
end

function pri_necessary_kill_kasilov(actor, npc)
   sgm_g.create("pri_army_kasilov", 182.344, -0.119, -187.372, 412041, 705)
   sgm_g.create("pri_army_chasovoy", 173.549, -0.508, -187.101, 403066, 705)
   sgm_g.add_task("sgm_pri_necessary_kill_kasilov")
end

function pri_find_science_briefing(actor, npc)
   sgm_g.create("pri_ecolog_briefing", 323.518, -8.536, 275.314, 485438, 682)
   sgm_g.add_task("sgm_pri_find_science_briefing")
   sgm_g.game_autosave_assign("save_jup_night_agent_meeting_talked")
end

function pri_science_briefing_reward_cell(actor, npc)
   sgm_g.create("pri_briefing_reward_spot", 339.287, 30.279, -340.712, 1531915, 75)
   cell_items = "money_meshochek_5000_10000,detector_omega,repair_arms_box,repair_outfit_box,bag_medkit_4"
   create_inventory_item(cell_items, "zat_science_briefing_cell", 339.287, 30.279, -340.712, 1531915, 75)
end

function pri_assault_monolith_base(actor, npc)
   sgm_g.create("pri_assault_monolith_firepos_spot", 9.466, 4.493, 287.466, 210359, 712)
   sgm_g.create("pri_assault_monolith_base_spot", 20.525, 4.904, 373.889, 224588, 694)
   sgm_g.create("pri_assault_squad_leader", 128.864, -0.484, -160.310, 355556, 705)
   sgm_g.create("pri_assault_squad_soldier1", 133.627, -0.475, -158.317, 361207, 705)
   sgm_g.create("pri_assault_squad_soldier2", 133.230, -0.509, -151.146, 360363, 705)
   sgm_g.create("pri_assault_squad_soldier3", 127.249, -0.469, -153.538, 353966, 705)
   sgm_g.create("pri_assault_squad_soldier4", 136.070, -0.507, -163.228, 363780, 705)
   sgm_g.add_task("sgm_pri_assault_monolith_base")
end

function pri_bloodsucker_vaccine(actor, npc)
   sgm_g.create("pri_bloodsucker_room_spot", 47.655, 16.540, -139.592, 261694, 698)
   sgm_g.add_task("sgm_pri_bloodsucker_vaccine")
end

function pri_expiation_sin_1_quest(actor, npc)
   sgm_g.create("drug_anabiotic", 32.794, 0.048, 354.131, 241793, 736)
   sgm_g.create("drug_anabiotic", 27.988, -2.934, 367.586, 235003, 694)
   sgm_g.create("drug_anabiotic", 112.071, 1.110, 394.982, 336351, 809)
   sgm_g.create("drug_anabiotic", 132.469, 5.194, -206.210, 361135, 709)
   sgm_g.create("drug_anabiotic", -227.879, -2.307, 80.840, 331134, 385)
   sgm_g.create("drug_anabiotic", -223.835, -2.375, 82.624, 335930, 385)
   sgm_g.create("drug_anabiotic", 160.212, -8.607, 176.161, 1240735, 225)
   sgm_g.give_item_to_sid("drug_anabiotic", "zat_a2_actor_treasure")
   sgm_g.give_item_to_sid("drug_anabiotic", "jup_b202_actor_treasure")
   sgm_g.give_item_to_sid("drug_anabiotic", "pri_a16_actor_treasure")
   sgm_g.create("pri_monolit_brother_leader_zombied", 35.852, 1.163, 360.252, 245838, 736)
   sgm_g.create("pri_monolit_brother_member1_zombied", 36.687, 1.206, 355.955, 246816, 736)
   sgm_g.create("pri_monolit_brother_member2_zombied", 35.462, 1.204, 366.607, 245847, 736)
   sgm_g.create("pri_monolit_brother_member3_zombied", 38.252, 1.206, 359.683, 249917, 736)
   sgm_g.create("pri_monolit_brother_member4_zombied", 37.085, 1.203, 373.399, 247895, 736)
   sgm_g.add_task("sgm_pri_expiation_sin_1")
end

function pri_expiation_sin_2_quest(actor, npc)
   sgm_g.create("pri_monolith_taynik_1", -292.939, 18.236, 352.931, 360299, 115)
   sgm_g.create("pri_monolith_taynik_2", -133.369, 24.562, -399.488, 674213, 4)
   sgm_g.create("pri_monolith_taynik_3", -168.219, 20.030, -169.211, 605084, 57)
   sgm_g.create("pri_monolith_taynik_4", -367.163, 39.999, -327.279, 230164, 29)
   sgm_g.create("pri_monolith_taynik_5", 237.024, 33.704, -332.134, 1370256, 310)
   sgm_g.create("pri_monolith_taynik_6", 374.906, 34.314, -20.161, 1586333, 294)
   sgm_g.create("pri_monolith_taynik_7", 389.957, -5.702, 229.289, 1608580, 7)
   sgm_g.create("pri_monolith_taynik_8", 233.920, 8.422, -18.156, 1364159, 55)
   sgm_g.create("pri_monolith_taynik_9", 76.783, -0.295, 31.003, 1021131, 19)
   sgm_g.create("pri_expiation_sin_2_taynik_1_spot", -292.939, 18.236, 352.931, 360299, 115)
   sgm_g.create("pri_expiation_sin_2_taynik_2_spot", -133.369, 24.562, -399.488, 674213, 4)
   sgm_g.create("pri_expiation_sin_2_taynik_3_spot", -168.219, 20.030, -169.211, 605084, 57)
   sgm_g.create("pri_expiation_sin_2_taynik_4_spot", -367.163, 39.999, -327.279, 230164, 29)
   sgm_g.create("pri_expiation_sin_2_taynik_5_spot", 237.024, 33.704, -332.134, 1370256, 310)
   sgm_g.create("pri_expiation_sin_2_taynik_6_spot", 374.906, 34.314, -20.161, 1586333, 294)
   sgm_g.create("pri_expiation_sin_2_taynik_7_spot", 389.957, -5.702, 229.289, 1608580, 7)
   sgm_g.create("pri_expiation_sin_2_taynik_8_spot", 233.920, 8.422, -18.156, 1364159, 55)
   sgm_g.create("pri_expiation_sin_2_taynik_9_spot", 76.783, -0.295, 31.003, 1021131, 19)
   sgm_g.add_task("sgm_pri_expiation_sin_2")
end

function pri_expiation_sin_3_quest(actor, npc)
   sgm_g.create("pri_knigi_vhod_spot", -169.344, 0.560, -358.036, 41200, 800)
   sgm_g.create("pri_knigi_center_spot", -181.270, 0.710, -364.715, 33801, 800)
   sgm_g.create("pri_knigi_antenni_spot", -173.870, 0.615, -345.086, 38576, 806)
   sgm_g.create("pri_knigi_voice_spot", -184.795, 0.699, -364.489, 31547, 800)
   sgm_g.add_task("sgm_pri_expiation_sin_3")
end

function pri_expiation_sin_3_create_base(actor, npc)
   sgm_g.create("pri_monolith_bodyguard", -180.116, 0.668, -348.861, 34718, 806)
   sgm_g.create("pri_monolith_library_base_leader", -184.544, 0.747, -343.627, 31565, 800)
   sgm_g.create("pri_monolith_library_base_mechanic", -170.889, 0.548, -343.642, 40297, 800)
   sgm_g.create("pri_monolith_library_base_saint_1", -173.804, 0.592, -346.318, 38574, 800)
   sgm_g.create("pri_monolith_library_base_saint_2", -178.322, 0.569, -346.984, 35634, 800)
   sgm_g.create("pri_monolith_library_base_saint_3", -175.208, 0.547, -342.163, 37734, 800)
   sgm_g.create("pri_monolith_library_base_sentry_1", -183.862, 0.548, -352.536, 31982, 800)
   sgm_g.create("pri_monolith_library_base_sentry_2", -189.003, 0.547, -367.837, 29335, 800)
   sgm_g.create("pri_monolith_library_base_sentry_3", -174.933, 0.548, -356.054, 37724, 800)
   sgm_g.create("pri_monolith_library_base_sentry_4", -166.767, 0.549, -370.279, 43176, 800)
   sgm_g.create("pri_monolith_library_base_sentry_5", -168.454, 0.559, -363.206, 41694, 800)
   sgm_g.create("pri_monolith_library_base_sentry_6", -182.486, 0.546, -368.317, 32842, 800)
   sgm_g.create("pri_monolith_library_base_sentry_7", -160.429, 0.548, -353.332, 47423, 800)
   sgm_g.create("pri_monolith_library_base_sentry_8", -160.554, 0.545, -335.640, 47449, 800)
   sgm_g.create("pri_monolith_library_base_sentry_9", -162.358, 0.547, -364.874, 46049, 800)
   sgm_g.create("pri_monolith_library_base_sentry_10", -162.548, 0.545, -370.912, 46044, 800)
end

function pri_expiation_sin_3_reinforcement(actor, npc)
   sgm_g.create("pri_monolit_brother_member5", -13.159, -0.424, 371.172, 180038, 694)
   sgm_g.create("pri_monolit_brother_member6", -13.090, -0.440, 363.539, 180027, 694)
   sgm_g.create("pri_monolit_brother_member7", -6.957, -0.326, 363.583, 188215, 694)
   sgm_g.create("pri_monolit_brother_member8", -6.792, -0.240, 371.513, 188227, 694)
   sgm_g.create("pri_killer_barricaded_1", -160.267, 0.696, -353.495, 47423, 800)
   sgm_g.create("pri_killer_barricaded_2", -162.571, 0.545, -365.358, 46048, 800)
   sgm_g.create("pri_killer_barricaded_3", -162.975, 0.547, -370.903, 45584, 800)
   sgm_g.create("pri_killer_barricaded_4", -164.319, 0.548, -337.944, 44663, 800)
   sgm_g.create("pri_killer_barricaded_5", -170.055, 0.547, -357.361, 40745, 800)
   sgm_g.create("pri_killer_barricaded_6", -174.626, 0.547, -355.953, 38148, 800)
   sgm_g.create("pri_killer_barricaded_7", -168.115, 0.547, -362.689, 42169, 800)
   sgm_g.create("pri_killer_barricaded_8", -166.840, 0.558, -370.568, 43176, 800)
   sgm_g.create("pri_killer_barricaded_9", -183.508, 0.675, -368.741, 32394, 800)
   sgm_g.create("pri_killer_barricaded_10", -184.871, 0.548, -360.890, 31552, 800)
   sgm_g.create("pri_killer_barricaded_11", -188.836, 0.546, -370.056, 29331, 800)
   sgm_g.create("pri_killer_barricaded_12", -177.342, 0.552, -357.021, 36479, 800)
   sgm_g.create("pri_killer_barricaded_13", -184.212, 0.546, -352.839, 31982, 800)
   sgm_g.create("pri_killer_barricaded_14", -171.298, 0.548, -343.003, 39829, 800)
   sgm_g.create("pri_killer_barricaded_15", -179.348, 0.670, -348.898, 35184, 800)
   sgm_g.create("pri_killer_barricaded_16", -185.040, 0.746, -345.500, 31562, 800)
   sgm_g.create("pri_killer_barricaded_17", -185.035, 0.737, -341.418, 31568, 800)
   sgm_g.create("pri_killer_barricaded_18", -170.186, 0.613, -353.044, 40748, 800)
end

function pri_rescue_underground_guide(actor, npc)
   sgm_g.create("pas_hostage_miller", 67.862, 3.093, 7.428, 39641, 918)
   sgm_g.create("pas_guide_keeper_alfa_1", 67.910522460938, 3.0929253101349, 3.3474779129028, 39735, 918)
   sgm_g.create("pas_guide_keeper_alfa_2", 64.623123168945, 3.0909745693207, 6.3886680603027, 39195, 918)
   sgm_g.create("pas_guide_keeper_alfa_3", 53.440910339355, 1.8163622617722, -0.12416955828667, 36580, 918)
   sgm_g.create("pas_guide_keeper_alfa_4", 44.966842651367, 1.9165991544724, -2.8190498352051, 33950, 918)
   sgm_g.create("pas_guide_keeper_alfa_5", 43.5202293396, 1.9147347211838, -1.5195467472076, 33597, 918)
   sgm_g.create("pas_guide_keeper_alfa_6", 31.860788345337, 1.5922700166702, -9.2163009643555, 30060, 917)
   sgm_g.create("pas_guide_keeper_alfa_7", 43.933292388916, 1.5910373926163, -17.596403121948, 33411, 917)
   sgm_g.create("pas_guide_keeper_alfa_8", 31.593544006348, 0.21451917290688, -33.719612121582, 30032, 916)
   sgm_g.create("pas_guide_keeper_alfa_9", 35.105571746826, 0.16528853774071, -32.84704208374, 30968, 916)
   sgm_g.create("pas_guide_keeper_alfa_10", 57.262401580811, 1.5892297029495, -34.300758361816, 37685, 916)
   sgm_g.create("pas_guide_keeper_alfa_11", 49.033813476563, 1.5834773778915, -10.817937850952, 33941, 917)
   sgm_g.create("pas_guide_keeper_alfa_12", 29.564182281494, -0.0020927786827087, 10.934850692749, 29516, 921)
   sgm_g.create("pas_guide_keeper_alfa_13", 26.984773635864, -3.4451484680176e-005, 7.2493515014648, 28910, 921)
   sgm_g.create("pas_guide_keeper_alfa_14", 16.088850021362, 1.4349075555801, -19.655681610107, 23612, 910)
   sgm_g.create("pas_guide_keeper_alfa_15", -18.039449691772, 1.5915925502777, -30.046287536621, 5908, 913)
   sgm_g.create("pas_guide_keeper_alfa_16", -14.069707870483, 1.5912865400314, 3.1127529144287, 6783, 911)
   sgm_g.create("pas_guide_keeper_alfa_17", -26.830018997192, 3.379020690918, 0.18996165692806, 4351, 911)
   sgm_g.create("pas_guide_keeper_alfa_18", -41.270706176758, 3.1834766864777, -17.463136672974, 1925, 913)
   sgm_g.create("pas_guide_keeper_alfa_19", -18.275665283203, 1.5874129533768, 37.014610290527, 5996, 908)
   sgm_g.create("pas_guide_keeper_alfa_20", 1.602419257164, 0.0063468515872955, 47.191032409668, 14241, 908)
   sgm_g.create("pas_guide_keeper_alfa_21", 25.92430305481, 0.37503758072853, 30.084823608398, 28521, 921)
   sgm_g.create("pri_underground_lowering_spot", 185.072, -0.509, -257.528, 414748, 696)
   sgm_g.create("pri_miller_destination_spot", 132.434, -0.096, -180.161, 359500, 824)
   sgm_g.add_task("sgm_pri_rescue_underground_guide")
end

function pri_fenix_vendetta(actor, npc)
   sgm_g.create_force("pri_inquisitor_squad_1", 93.535469055176, -0.96859180927277, 200.90673828125, 316917, 691)
   sgm_g.create_force("pri_inquisitor_squad_2", -46.890838623047, -0.38852578401566, -47.650688171387, 142097, 760)
   sgm_g.create_force("pri_inquisitor_squad_3", -204.72320556641, -0.50906491279602, -277.34506225586, 20970, 786)
   sgm_g.add_task("sgm_pri_fenix_vendetta")
end

function val_brigand(actor, npc)
   sgm_g.create_force("val_b15_renegade_squad", "val_smart_terrain_15")
   sgm_g.add_task("val_brigand")
end

function val_secret_development(actor, npc)
   sgm_g.create("x18_secret_gs67", 22.988, -14.817, 76.644, 5829, 1227)
   sgm_g.add_task("val_secret_development")
end

function mil_dislodge_invaders(actor, npc)
   sgm_g.add_task("mil_dislodge_invaders")
end

function mil_defence_b1(actor, npc)
   sgm_g.create("mil_monster_hole_spot", -202.91529846191, 5.3421750068665, 452.26483154297, 115559, 1385)
   sgm_g.add_task("mil_defence_b1")
end

function mil_boarding_money_case(actor, npc)
   sgm_g.create_force("val_b3_renegade_collector_squad", "val_smart_terrain_3")
   sgm_g.add_task("mil_boarding_money_case")
end

function mil_bolted_influence(actor, npc)
   sgm_g.add_task("mil_bolted_influence")
end

function mil_meet_with_morten(actor, npc)
   sgm_g.add_task("mil_meet_with_morten")
end

function esc_whimsical_artefact(actor, npc)
   local rnd_spawn = math.random(1, 3)
   if rnd_spawn == 1 then
      sgm_g.create("af_shapoklak", -254.26504516602, -14.175067901611, -19.347557067871, 10499, 1873)
   elseif rnd_spawn == 2 then
      sgm_g.create("af_shapoklak", 336.00494384766, 14.95620059967, 213.35205078125, 613081, 1878)
   else
      sgm_g.create("af_shapoklak", 216.22799682617, 20.169467926025, 200.26403808594, 535158, 2086)
   end
   sgm_g.add_task("esc_whimsical_artefact")
end

function esc_renew_spares(actor, npc)
   create_inventory_item(
      "ammo_9x18_fmj,ammo_9x19_fmj,ammo_5.45x39_fmj,ammo_12x70_buck,2,grenade_rgd5,2,wpn_addon_silencer,antirad,psy_complex,medkit,2,bandage,2",
      "esc_b1_ammunition_box", -140.7580871582, -28.67959022522, -352.5341796875, 114868, 1938)
   sgm_g.create("esc_b1_ammunition_box_spot", -140.7580871582, -28.67959022522, -352.5341796875, 114868, 1938)
   sgm_g.add_task("esc_renew_spares")
end

function esc_village_annex(actor, npc)
   sgm_g.create_force("esc_b2_stalker_invaders_squad", -157.87911987305, -30.243263244629, -329.14279174805, 92770, 1861)
   sgm_g.create("esc_b2_tamerlan", -246.2395324707, -24.808156967163, -135.27490234375, 14372, 1859)
   sgm_g.add_task("esc_village_annex")
end

function esc_lull_before_borax(actor, npc)
   sgm_g.create_force("esc_a2_monster_squad", "esc_monster_burrow_2")
   sgm_g.add_task("esc_lull_before_borax")
end

function esc_atp_annex(actor, npc)
   create_inventory_item("esc_b3_safe_flash", "esc_b3_bandit_safe", 108.42806243896, 0.41786095499992, 4.0751585960388,
      439428, 1927)
   sgm_g.create("esc_atp_annex_selfpos_spot", 21.268035888672, -0.97833907604218, -75.040618896484, 329380, 2044)
   sgm_g.add_task("esc_atp_annex")
end

function esc_spy_meeting(actor, npc)
   sgm_g.create("esc_spy_meeting_place_spot", 332.04925537109, 15.744373321533, -14.692591667175, 609649, 2061)
   sgm_g.add_task("esc_spy_meeting")
end

function esc_uncoupling(actor, npc)
   sgm_g.create("esc_b1_stalker_mechanic", -140.90934753418, -25.441181182861, -356.85256958008, 114051, 1938)
   sgm_g.add_task("esc_uncoupling")
end

function esc_army_halt(actor, npc)
   sgm_g.create("esc_army_halt_1", -12.365184783936, 0.86760592460632, 260.91003417969, 286075, 1928)
   sgm_g.create("esc_army_halt_2", 25.660511016846, 16.518115997314, 685.83953857422, 336405, 1850)
   sgm_g.create("esc_army_halt_1_spot", 131.40768432617, -0.71342599391937, 328.90283203125, 464662, 2028)
   sgm_g.create("esc_army_halt_2_spot", 1.0518981218338, 0.45629617571831, 275.21478271484, 303725, 1921)
   sgm_g.create("esc_army_halt_3_spot", 17.362344741821, 15.94375038147, 665.86407470703, 325633, 2054)
   sgm_g.add_task("esc_army_halt_3")
   sgm_g.add_task("esc_army_halt_2")
   sgm_g.add_task("esc_army_halt_1")
end

function mar_army_cargo(actor, npc)
   sgm_g.add_task("mar_army_cargo")
end

function mar_mine_detector(actor, npc)
   sgm_g.add_task("mar_mine_detector")
end

function mar_army_cargo_mechanic(actor, npc)
   sgm_g.create("mar_b2_stalker_mechanic", -6.1877589225769, 3.3588407039642, 12.140656471252, 135981, 1634)
end

function mar_mine_detector_sensor(actor, npc)
   sgm_g.create("mar_mine_sensor", -185.05250549316, 2.2925968170166, 534.27502441406, 110573, 1714)
   sgm_g.create("mar_mine_sensor_passage_spot", -55.97981262207, 0.30250319838524, 450.84841918945, 110573, 1714)
   sgm_g.create("mar_b4_charge", 411.21154785156, 4.1378383636475, 233.91334533691, 410938, 1696)
end

function red_psyho(actor, npc)
   sgm_g.create("jup_scientific_workman", -220.75009155273, -3.5371994972229, 67.087188720703, 343413, 385)
   sgm_g.add_task("red_psyho")
end

------------------------------------------------------------------------------
--                       Функции запуска мини-игр                           --
------------------------------------------------------------------------------
function start_minigame_21_point(actor, npc)
   local enemy_name = who_is_npc(actor, npc)
   sgm_g.run_dynamic_element(sgm_ui_mod_elements.card_game_21_point(), false, true)
   if enemy_name ~= nil then
      sgm_ui_mod_elements.card_game_21_enemy_name = game.translate_string(level.object_by_id(enemy_name:id())
         :character_name())
   end
end

function start_question_game(actor, npc)
   sgm_g.run_dynamic_element(sgm_ui_mod_elements.question_game(), false, true)
end

------------------------------------------------------------------------------
--            Функции связанные с проверкой и передачей денег               --
------------------------------------------------------------------------------
function actor_have_100_money(actor, npc)
   return db.actor:money() >= 100
end

function actor_give_100_money(actor, npc)
   dialogs.relocate_money(npc, 100, "out")
end

function actor_have_200_money(actor, npc)
   return db.actor:money() >= 200
end

function actor_give_200_money(actor, npc)
   dialogs.relocate_money(npc, 200, "out")
end

function actor_have_300_money(actor, npc)
   return db.actor:money() >= 300
end

function actor_give_300_money(actor, npc)
   dialogs.relocate_money(npc, 300, "out")
end

function actor_have_400_money(actor, npc)
   return db.actor:money() >= 400
end

function actor_give_400_money(actor, npc)
   dialogs.relocate_money(npc, 400, "out")
end

function actor_have_500_money(actor, npc)
   return db.actor:money() >= 500
end

function actor_give_500_money(actor, npc)
   dialogs.relocate_money(npc, 500, "out")
end

function actor_dont_500_money(actor, npc)
   return db.actor:money() < 500
end

function actor_have_800_money(actor, npc)
   return db.actor:money() >= 800
end

function actor_give_800_money(actor, npc)
   dialogs.relocate_money(npc, 800, "out")
end

function actor_have_1000_money(actor, npc)
   return db.actor:money() >= 1000
end

function actor_less_1000_money(actor, npc)
   return db.actor:money() < 1000
end

function actor_give_1000_money(actor, npc)
   dialogs.relocate_money(npc, 1000, "out")
end

function actor_have_1200_money(actor, npc)
   return db.actor:money() >= 1200
end

function actor_less_1200_money(actor, npc)
   return db.actor:money() < 1200
end

function actor_give_1200_money(actor, npc)
   dialogs.relocate_money(npc, 1200, "out")
end

function actor_have_1500_money(actor, npc)
   return db.actor:money() >= 1500
end

function actor_less_1500_money(actor, npc)
   return db.actor:money() < 1500
end

function actor_give_1500_money(actor, npc)
   dialogs.relocate_money(npc, 1500, "out")
end

function actor_have_1700_money(actor, npc)
   return db.actor:money() >= 1700
end

function actor_give_1700_money(actor, npc)
   dialogs.relocate_money(npc, 1700, "out")
end

function actor_have_2500_money(actor, npc)
   return db.actor:money() >= 2500
end

function actor_less_2500_money(actor, npc)
   return db.actor:money() < 2500
end

function actor_give_2500_money(actor, npc)
   dialogs.relocate_money(npc, 2500, "out")
end

function actor_have_2000_money(actor, npc)
   return db.actor:money() >= 2000
end

function actor_less_2000_money(actor, npc)
   return db.actor:money() < 2000
end

function actor_give_2000_money(actor, npc)
   dialogs.relocate_money(npc, 2000, "out")
end

function actor_have_3000_money(actor, npc)
   return db.actor:money() >= 3000
end

function actor_less_3000_money(actor, npc)
   return db.actor:money() < 3000
end

function actor_give_3000_money(actor, npc)
   dialogs.relocate_money(npc, 3000, "out")
end

function actor_have_4000_money(actor, npc)
   return db.actor:money() >= 4000
end

function actor_less_4000_money(actor, npc)
   return db.actor:money() < 4000
end

function actor_give_4000_money(actor, npc)
   dialogs.relocate_money(npc, 4000, "out")
end

function actor_have_4500_money(actor, npc)
   return db.actor:money() >= 4500
end

function actor_less_4500_money(actor, npc)
   return db.actor:money() < 4500
end

function actor_give_4500_money(actor, npc)
   dialogs.relocate_money(npc, 4500, "out")
end

function actor_have_5000_money(actor, npc)
   return db.actor:money() >= 5000
end

function actor_give_5000_money(actor, npc)
   dialogs.relocate_money(npc, 5000, "out")
end

function actor_less_5000_money(actor, npc)
   return db.actor:money() < 5000
end

function actor_have_5400_money(actor, npc)
   return db.actor:money() >= 5400
end

function actor_less_5400_money(actor, npc)
   return db.actor:money() < 5400
end

function actor_give_5400_money(actor, npc)
   dialogs.relocate_money(npc, 5400, "out")
end

function actor_have_10000_money(actor, npc)
   return db.actor:money() >= 10000
end

function actor_less_10000_money(actor, npc)
   return db.actor:money() < 10000
end

function actor_give_10000_money(actor, npc)
   dialogs.relocate_money(npc, 10000, "out")
end

function actor_have_20000_money(actor, npc)
   return db.actor:money() >= 20000
end

function actor_less_20000_money(actor, npc)
   return db.actor:money() < 20000
end

function actor_give_20000_money(actor, npc)
   dialogs.relocate_money(npc, 20000, "out")
end

function actor_have_25000_money(actor, npc)
   return db.actor:money() >= 25000
end

function actor_less_25000_money(actor, npc)
   return db.actor:money() < 25000
end

function actor_give_25000_money(actor, npc)
   dialogs.relocate_money(npc, 25000, "out")
end

function actor_have_50000_money(actor, npc)
   return db.actor:money() >= 50000
end

function actor_less_50000_money(actor, npc)
   return db.actor:money() < 50000
end

function actor_give_50000_money(actor, npc)
   dialogs.relocate_money(npc, 50000, "out")
end

function actor_have_100000_money(actor, npc)
   return db.actor:money() >= 100000
end

function actor_less_100000_money(actor, npc)
   return db.actor:money() < 100000
end

function actor_give_100000_money(actor, npc)
   dialogs.relocate_money(npc, 100000, "out")
end

function actor_have_something_money(actor, npc)
   return db.actor:money() > 0
end

------------------------------------------------------------------------------
--                            Банкир: вклад                                 --
------------------------------------------------------------------------------
local last_add_capital = 0
function actor_something_deposit(actor, npc)
   return sgm_g.read_mod_param("bankir_deposit_cash") > 0
end

function actor_something_percent(actor, npc)
   return sgm_g.read_mod_param("bankir_deposit_percent") > 0
end

function actor_have_percent_money(actor, npc)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   local percent = math.floor(currert * 0.1)
   return db.actor:money() >= percent
end

function actor_give_percent_money(actor, npc)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   local percent = math.floor(currert * 0.1)
   dialogs.relocate_money(npc, percent, "out")
end

function actor_less_100_money(actor, npc)
   return sgm_g.read_mod_param("bankir_capital_cash") < 100
end

function actor_more_100_money(actor, npc)
   return sgm_g.read_mod_param("bankir_capital_cash") >= 100
end

function bankir_load_money(first_speaker, second_speaker)
   db.actor:give_talk_message2("",
      game.translate_string("st_bankir_money") .. " " .. db.actor:money() .. " " .. game.translate_string("st_bankir_ru"),
      "ui_iconsTotal_found_thing", "iconed_answer_item")
end

function bankir_show_money(first_speaker, second_speaker)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   db.actor:give_talk_message2("",
      game.translate_string("st_bankir_counter") .. " " .. currert .. " " .. game.translate_string("st_bankir_ru"),
      "ui_iconsTotal_found_thing", "iconed_answer_item")
end

function bankir_10_capital_percent_money(first_speaker, second_speaker)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   local percent = math.floor(currert * 0.1)
   db.actor:give_talk_message2("", game.translate_string("st_bankir_result") .. " " .. currert .. " | 10% = " .. percent,
      "ui_iconsTotal_found_thing", "iconed_answer_item")
end

function bankir_20_capital_percent_money(first_speaker, second_speaker)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   local percent = math.floor(currert * 0.2)
   db.actor:give_talk_message2("", game.translate_string("st_bankir_result") .. " " .. currert .. " | 20% = " .. percent,
      "ui_iconsTotal_found_thing", "iconed_answer_item")
end

function bankir_set_zero_capital(actor, npc)
   mod_param_set_safe("bankir_capital_cash")
end

function bankir_capital_add(npc, val)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   sgm_g.write_mod_param("bankir_capital_cash", currert + val)
   last_add_capital = last_add_capital + val
   dialogs.relocate_money(npc, val, "out")
end

function bankir_capital_add_1000(actor, npc)
   bankir_capital_add(npc, 1000)
end

function bankir_capital_add_2000(actor, npc)
   bankir_capital_add(npc, 2000)
end

function bankir_capital_add_3000(actor, npc)
   bankir_capital_add(npc, 3000)
end

function bankir_capital_add_4000(actor, npc)
   bankir_capital_add(npc, 4000)
end

function bankir_capital_add_5000(actor, npc)
   bankir_capital_add(npc, 5000)
end

function bankir_capital_add_10000(actor, npc)
   bankir_capital_add(npc, 10000)
end

function bankir_capital_add_all(actor, npc)
   bankir_capital_add(npc, db.actor:money())
end

function bankir_capital_has_something(actor, npc)
   return sgm_g.read_mod_param("bankir_capital_cash") > 0
end

function bankir_capital_has_1000(actor, npc)
   return sgm_g.read_mod_param("bankir_capital_cash") >= 1000
end

function bankir_capital_has_2000(actor, npc)
   return sgm_g.read_mod_param("bankir_capital_cash") >= 2000
end

function bankir_capital_has_3000(actor, npc)
   return sgm_g.read_mod_param("bankir_capital_cash") >= 3000
end

function bankir_capital_has_4000(actor, npc)
   return sgm_g.read_mod_param("bankir_capital_cash") >= 4000
end

function bankir_capital_has_5000(actor, npc)
   return sgm_g.read_mod_param("bankir_capital_cash") >= 5000
end

function bankir_capital_has_10000(actor, npc)
   return sgm_g.read_mod_param("bankir_capital_cash") >= 10000
end

function bankir_capital_convert(npc, val, perc)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   dialogs.relocate_money(npc, val - (val * perc), "in")
   sgm_g.write_mod_param("bankir_capital_cash", currert - val)
end

function bankir_capital_10_convert_1000(actor, npc)
   bankir_capital_convert(npc, 1000, 0.1)
end

function bankir_capital_10_convert_2000(actor, npc)
   bankir_capital_convert(npc, 2000, 0.1)
end

function bankir_capital_10_convert_3000(actor, npc)
   bankir_capital_convert(npc, 3000, 0.1)
end

function bankir_capital_10_convert_4000(actor, npc)
   bankir_capital_convert(npc, 4000, 0.1)
end

function bankir_capital_10_convert_5000(actor, npc)
   bankir_capital_convert(npc, 5000, 0.1)
end

function bankir_capital_10_convert_10000(actor, npc)
   bankir_capital_convert(npc, 10000, 0.1)
end

function bankir_capital_10_convert_all(actor, npc)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   local percent = math.floor(currert * 0.1)
   local result = currert - percent
   dialogs.relocate_money(npc, result, "in")
   sgm_g.write_mod_param("bankir_capital_cash", 0)
end

function bankir_capital_10_convert_all2(actor, npc)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   dialogs.relocate_money(npc, currert, "in")
   sgm_g.write_mod_param("bankir_capital_cash", 0)
end

function bankir_capital_20_convert_1000(actor, npc)
   bankir_capital_convert(npc, 1000, 0.2)
end

function bankir_capital_20_convert_2000(actor, npc)
   bankir_capital_convert(npc, 2000, 0.2)
end

function bankir_capital_20_convert_3000(actor, npc)
   bankir_capital_convert(npc, 3000, 0.2)
end

function bankir_capital_20_convert_4000(actor, npc)
   bankir_capital_convert(npc, 4000, 0.2)
end

function bankir_capital_20_convert_5000(actor, npc)
   bankir_capital_convert(npc, 5000, 0.2)
end

function bankir_capital_20_convert_10000(actor, npc)
   bankir_capital_convert(npc, 10000, 0.2)
end

function bankir_capital_20_convert_all(actor, npc)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   local percent = math.floor(currert * 0.2)
   local result = currert - percent
   dialogs.relocate_money(npc, result, "in")
   sgm_g.write_mod_param("bankir_capital_cash", 0)
end

function bankir_capital_20_convert_all2(actor, npc)
   local currert = sgm_g.read_mod_param("bankir_capital_cash")
   dialogs.relocate_money(npc, currert, "in")
   sgm_g.write_mod_param("bankir_capital_cash", 0)
end

------------------------------------------------------------------------------
--                           Банкир: депозит                                --
------------------------------------------------------------------------------
function bankir_show_deposit(first_speaker, second_speaker)
   local currert = sgm_g.read_mod_param("bankir_deposit_cash")
   db.actor:give_talk_message2("",
      game.translate_string("st_bankir_counter2") .. currert .. game.translate_string("st_bankir_ru"),
      "ui_iconsTotal_found_thing", "iconed_answer_item")
end

function bankir_show_deposit_and_percent(first_speaker, second_speaker)
   local currert = sgm_g.read_mod_param("bankir_deposit_cash")
   local percent = sgm_g.read_mod_param("bankir_deposit_percent")
   db.actor:give_talk_message2("",
      game.translate_string("st_bankir_counter2") .. " " .. currert .. " " .. game.translate_string("st_bankir_ru"),
      "ui_iconsTotal_found_thing", "iconed_answer_item")
   if percent <= 0 then
      db.actor:give_talk_message2("",
         game.translate_string("st_bankir_percent") ..
         " " .. math.floor(currert * sgm_g.r_mod_params("number", "bankirs_default_percent", 0.10)),
         "ui_iconsTotal_found_thing", "iconed_answer_item")
   elseif percent > 0 then
      db.actor:give_talk_message2("",
         game.translate_string("st_bankir_percent") ..
         " " .. math.floor((currert * sgm_g.r_mod_params("number", "bankirs_default_percent", 0.10)) + percent),
         "ui_iconsTotal_found_thing", "iconed_answer_item")
   end
end

function bankir_show_something_percent(first_speaker, second_speaker)
   local currert = sgm_g.read_mod_param("bankir_deposit_cash")
   local percent = sgm_g.read_mod_param("bankir_deposit_percent")
   db.actor:give_talk_message2("",
      game.translate_string("st_bankir_counter2") .. " " .. currert .. " " .. game.translate_string("st_bankir_ru"),
      "ui_iconsTotal_found_thing", "iconed_answer_item")
   if percent <= 0 then
      db.actor:give_talk_message2("",
         game.translate_string("st_bankir_percent") ..
         " " .. math.floor(currert * sgm_g.r_mod_params("number", "bankirs_default_percent", 0.10)),
         "ui_iconsTotal_found_thing", "iconed_answer_item")
   elseif percent > 0 then
      if level.get_time_days() < sgm_g.read_mod_param("bankir_deposit_passed_time") then
         db.actor:give_talk_message2("",
            game.translate_string("st_bankir_percent") ..
            " " .. math.floor((currert * sgm_g.r_mod_params("number", "bankirs_default_percent", 0.10)) + percent),
            "ui_iconsTotal_found_thing", "iconed_answer_item")
      else
         db.actor:give_talk_message2("", game.translate_string("st_bankir_percent_today") .. " " .. math.floor(percent),
            "ui_iconsTotal_found_thing", "iconed_answer_item")
      end
   end
end

function bankir_set_zero_deposit(actor, npc)
   mod_param_set_safe("bankir_deposit_cash")
   mod_param_set_safe("bankir_deposit_percent")
   mod_param_set_safe("bankir_deposit_passed_time")
   mod_param_set_safe("bankir_deposit_allow", "false")
end

function bankir_deposit_add(npc, val)
   local currert = sgm_g.read_mod_param("bankir_deposit_cash")
   sgm_g.write_mod_param("bankir_deposit_cash", currert + val)
   dialogs.relocate_money(npc, val, "out")
   local currert3 = sgm_g.read_mod_param("bankir_deposit_passed_time")
   if currert3 == level.get_time_days() then
      sgm_g.write_mod_param("bankir_deposit_passed_time", level.get_time_days() + 1)
   elseif currert3 ~= level.get_time_days() then
      sgm_g.write_mod_param("bankir_deposit_passed_time", level.get_time_days() + 1)
   end
end

function bankir_deposit_add_1000(actor, npc)
   bankir_deposit_add(npc, 1000)
end

function bankir_deposit_add_2000(actor, npc)
   bankir_deposit_add(npc, 2000)
end

function bankir_deposit_add_3000(actor, npc)
   bankir_deposit_add(npc, 3000)
end

function bankir_deposit_add_4000(actor, npc)
   bankir_deposit_add(npc, 4000)
end

function bankir_deposit_add_5000(actor, npc)
   bankir_deposit_add(npc, 5000)
end

function bankir_deposit_add_10000(actor, npc)
   bankir_deposit_add(npc, 10000)
end

function bankir_deposit_add_25000(actor, npc)
   bankir_deposit_add(npc, 25000)
end

function bankir_deposit_add_50000(actor, npc)
   bankir_deposit_add(npc, 50000)
end

function bankir_deposit_add_100000(actor, npc)
   bankir_deposit_add(npc, 100000)
end

function bankir_deposit_add_all(actor, npc)
   bankir_deposit_add(npc, db.actor:money())
end

function bankir_deposit_convert_percent(actor, npc)
   local percent = sgm_g.read_mod_param("bankir_deposit_percent")
   dialogs.relocate_money(npc, percent, "in")
   sgm_g.write_mod_param("bankir_deposit_percent", 0)
end

function bankir_deposit_convert_all(actor, npc)
   local currert = sgm_g.read_mod_param("bankir_deposit_cash")
   dialogs.relocate_money(npc, currert, "in")
   sgm_g.write_mod_param("bankir_deposit_cash", 0)
   sgm_g.write_mod_param("bankir_deposit_percent", 0)
end

------------------------------------------------------------------------------
--                     Банкир: электронный обмен                            --
------------------------------------------------------------------------------
function bankir_show_web_money_course(first_speaker, second_speaker)
   local course_cop = math.floor(sgm_g.read_mod_param("web_money_course") * 100)
   db.actor:give_talk_message2("",
      game.translate_string("st_bankir_web_money_course_1") ..
      " " ..
      game.translate_string("st_bankir_web_money_course_3") ..
      " " .. course_cop .. " " .. game.translate_string("st_bankir_web_money_course_4"), "ui_iconsTotal_found_thing",
      "iconed_answer_item")
   db.actor:give_talk_message2("",
      game.translate_string("st_bankir_web_money_course_2") ..
      " " .. math.floor(sgm_g.get_web_money()) .. " " .. game.translate_string("st_bankir_web_money_course_5"),
      "ui_iconsTotal_found_thing", "iconed_answer_item")
end

function reward_web_money(val)
   local m_changed = val * sgm_g.read_mod_param("web_money_course")
   dialogs.relocate_money(db.actor, math.floor(m_changed), "in")
   sgm_functions.relocate_web_money(val, "out")
end

function actor_have_1000_web_money(actor, npc)
   return sgm_g.get_web_money() >= 1000
end

function actor_give_1000_web_money(actor, npc)
   reward_web_money(1000)
end

function actor_have_2000_web_money(actor, npc)
   return sgm_g.get_web_money() >= 2000
end

function actor_give_2000_web_money(actor, npc)
   reward_web_money(2000)
end

function actor_have_3000_web_money(actor, npc)
   return sgm_g.get_web_money() >= 3000
end

function actor_give_3000_web_money(actor, npc)
   reward_web_money(3000)
end

function actor_have_4000_web_money(actor, npc)
   return sgm_g.get_web_money() >= 4000
end

function actor_give_4000_web_money(actor, npc)
   reward_web_money(4000)
end

function actor_have_5000_web_money(actor, npc)
   return sgm_g.get_web_money() >= 5000
end

function actor_give_5000_web_money(actor, npc)
   reward_web_money(5000)
end

function actor_have_6000_web_money(actor, npc)
   return sgm_g.get_web_money() >= 6000
end

function actor_give_6000_web_money(actor, npc)
   reward_web_money(6000)
end

function actor_have_7000_web_money(actor, npc)
   return sgm_g.get_web_money() >= 7000
end

function actor_give_7000_web_money(actor, npc)
   reward_web_money(7000)
end

function actor_have_8000_web_money(actor, npc)
   return sgm_g.get_web_money() >= 8000
end

function actor_give_8000_web_money(actor, npc)
   reward_web_money(8000)
end

function actor_have_9000_web_money(actor, npc)
   return sgm_g.get_web_money() >= 9000
end

function actor_give_9000_web_money(actor, npc)
   reward_web_money(9000)
end

function actor_have_10000_web_money(actor, npc)
   return sgm_g.get_web_money() >= 10000
end

function actor_give_10000_web_money(actor, npc)
   reward_web_money(10000)
end

function actor_give_all_web_money(actor, npc)
   reward_web_money(sgm_g.get_web_money())
end

function actor_have_something_web_money(actor, npc)
   return sgm_g.get_web_money() > 0
end

function actor_dont_something_web_money(actor, npc)
   return sgm_g.get_web_money() == 0
end

------------------------------------------------------------------------------
--                           Телохранители                                  --
------------------------------------------------------------------------------
function bodyguard_set_release(actor, npc)
   news_manager.send_tip(db.actor,
      game.translate_string("st_bodyguard_commands_tip") ..
      " «" .. npc:character_name() .. "» - " .. game.translate_string("st_bodyguard_command_4_tip"), 0, "bodyguard", 6000,
      nil, "st_add_info_title")
   level.map_remove_object_spot(npc:id(), sgm_flags.spot_actor_guard)
   disable_info(npc:profile_name() .. "_stand_and_fire")
   disable_info(npc:profile_name() .. "_nofire")
   disable_info(npc:profile_name() .. "_stop")
   disable_info(npc:profile_name() .. "_release")
   disable_info(npc:profile_name() .. "_pursue")
   if npc:profile_name() == "zat_stalker_bodyguard" then
      xr_effects.respawn_zat_stalker_bodyguard()
   elseif npc:profile_name() == "zat_bandit_bodyguard" then
      xr_effects.respawn_zat_bandit_bodyguard()
   elseif npc:profile_name() == "jup_freedom_bodyguard" then
      xr_effects.respawn_jup_freedom_bodyguard()
   elseif npc:profile_name() == "jup_army_bodyguard" then
      xr_effects.respawn_jup_army_bodyguard()
   elseif npc:profile_name() == "jup_killer_bodyguard" then
      xr_effects.respawn_jup_killer_bodyguard()
   elseif npc:profile_name() == "pri_army_bodyguard" then
      xr_effects.respawn_pri_army_bodyguard()
   elseif npc:profile_name() == "pri_monolith_bodyguard" then
      xr_effects.respawn_pri_monolith_bodyguard()
   end
   start_flague_timer("timer_bodyguard_release", 1000)
   sgm_flags.value_bodyguard_release_victim = npc:id()
end

function zat_stalker_bodyguard_have_money(actor, npc)
   return db.actor:money() >= 4200
end

function zat_stalker_bodyguard_give_money(actor, npc)
   dialogs.relocate_money(npc, 4200, "out")
end

function zat_bandit_bodyguard_have_money(actor, npc)
   return db.actor:money() >= 4600
end

function zat_bandit_bodyguard_give_money(actor, npc)
   dialogs.relocate_money(npc, 4600, "out")
end

function jup_freedom_bodyguard_have_money(actor, npc)
   return db.actor:money() >= 7200
end

function jup_freedom_bodyguard_give_money(actor, npc)
   dialogs.relocate_money(npc, 7200, "out")
end

function jup_army_bodyguard_have_money(actor, npc)
   return db.actor:money() >= 8000
end

function jup_army_bodyguard_give_money(actor, npc)
   dialogs.relocate_money(npc, 8000, "out")
end

function jup_killer_bodyguard_have_money(actor, npc)
   return db.actor:money() >= 7600
end

function jup_killer_bodyguard_give_money(actor, npc)
   dialogs.relocate_money(npc, 7600, "out")
end

function pri_army_bodyguard_have_money(actor, npc)
   return db.actor:money() >= 10000
end

function pri_army_bodyguard_give_money(actor, npc)
   dialogs.relocate_money(npc, 10000, "out")
end

function pri_monolith_bodyguard_have_money(actor, npc)
   return db.actor:money() >= 12000
end

function pri_monolith_bodyguard_give_money(actor, npc)
   dialogs.relocate_money(npc, 12000, "out")
end

------------------------------------------------------------------------------
--                              Селекция                                    --
------------------------------------------------------------------------------
function check_any_breeding_af(type)
   local is_founded = false
   local function checks(temp, item)
      if item ~= nil then
         if sgm_g.find_in_string(item:section(), "af_") then
            if sgm_functions.ReadBreedingType(item:section()) ~= nil and sgm_functions.ReadBreedingType(item:section()) == type then
               is_founded = true
            end
            if type == nil then
               is_founded = true
            end
         end
      end
   end
   db.actor:iterate_inventory(checks, db.actor)
   return is_founded
end

function founded_any_af(actor, npc)
   return check_any_breeding_af()
end

function founded_af_type_1(actor, npc)
   return check_any_breeding_af(1)
end

function founded_af_type_2(actor, npc)
   return check_any_breeding_af(2)
end

function founded_af_type_3(actor, npc)
   return check_any_breeding_af(3)
end

function founded_af_type_all(actor, npc)
   return check_any_breeding_af(1) or check_any_breeding_af(2) or check_any_breeding_af(3)
end

function dont_founded_any_af(actor, npc)
   return not check_any_breeding_af()
end

function dont_founded_af_type_1(actor, npc)
   return not check_any_breeding_af(1)
end

function dont_founded_af_type_2(actor, npc)
   return not check_any_breeding_af(2)
end

function dont_founded_af_type_3(actor, npc)
   return not check_any_breeding_af(3)
end

function dont_founded_af_type_all(actor, npc)
   return not founded_af_type_all(actor, npc)
end

function breed_radiation_has_money(actor, npc)
   return db.actor:money() >= 26000
end

function breed_radiation_give_money(actor, npc)
   dialogs.relocate_money(npc, 26000, "out")
end

function breed_tonnage_has_money(actor, npc)
   return db.actor:money() >= 24500
end

function breed_tonnage_give_money(actor, npc)
   dialogs.relocate_money(npc, 24500, "out")
end

function breed_regeneration_has_money(actor, npc)
   return db.actor:money() >= 30000
end

function breed_regeneration_give_money(actor, npc)
   dialogs.relocate_money(npc, 30000, "out")
end

---/1-й тип аномальности
function breeder_section_1()
   return "af_medusa"
end

function breeder_has_1(actor, npc)
   return db.actor:object("af_medusa")
end

function breeder_lost_1(actor, npc)
   dialogs.relocate_item_section(npc, "af_medusa", "out")
end

function breeder_recover_1_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_medusa_breeding_1", "in")
end

function breeder_recover_1_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_medusa_breeding_2", "in")
end

function breeder_recover_1_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_medusa_breeding_3", "in")
end

function breeder_section_4()
   return "af_vyvert"
end

function breeder_has_4(actor, npc)
   return db.actor:object("af_vyvert")
end

function breeder_lost_4(actor, npc)
   dialogs.relocate_item_section(npc, "af_vyvert", "out")
end

function breeder_recover_4_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_vyvert_breeding_1", "in")
end

function breeder_recover_4_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_vyvert_breeding_2", "in")
end

function breeder_recover_4_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_vyvert_breeding_3", "in")
end

function breeder_section_7()
   return "af_cristall"
end

function breeder_has_7(actor, npc)
   return db.actor:object("af_cristall")
end

function breeder_lost_7(actor, npc)
   dialogs.relocate_item_section(npc, "af_cristall", "out")
end

function breeder_recover_7_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_cristall_breeding_1", "in")
end

function breeder_recover_7_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_cristall_breeding_2", "in")
end

function breeder_recover_7_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_cristall_breeding_3", "in")
end

function breeder_section_12()
   return "af_blood"
end

function breeder_has_12(actor, npc)
   return db.actor:object("af_blood")
end

function breeder_lost_12(actor, npc)
   dialogs.relocate_item_section(npc, "af_blood", "out")
end

function breeder_recover_12_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_blood_breeding_1", "in")
end

function breeder_recover_12_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_blood_breeding_2", "in")
end

function breeder_recover_12_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_blood_breeding_3", "in")
end

function breeder_section_18()
   return "af_electra_sparkler"
end

function breeder_has_18(actor, npc)
   return db.actor:object("af_electra_sparkler")
end

function breeder_lost_18(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_sparkler", "out")
end

function breeder_recover_18_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_sparkler_breeding_1", "in")
end

function breeder_recover_18_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_sparkler_breeding_2", "in")
end

function breeder_recover_18_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_sparkler_breeding_3", "in")
end

---/2-й тип аномальности
function breeder_section_2()
   return "af_cristall_flower"
end

function breeder_has_2(actor, npc)
   return db.actor:object("af_cristall_flower")
end

function breeder_lost_2(actor, npc)
   dialogs.relocate_item_section(npc, "af_cristall_flower", "out")
end

function breeder_recover_2_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_cristall_flower_breeding_1", "in")
end

function breeder_recover_2_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_cristall_flower_breeding_2", "in")
end

function breeder_recover_2_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_cristall_flower_breeding_3", "in")
end

function breeder_section_3()
   return "af_night_star"
end

function breeder_has_3(actor, npc)
   return db.actor:object("af_night_star")
end

function breeder_lost_3(actor, npc)
   dialogs.relocate_item_section(npc, "af_night_star", "out")
end

function breeder_recover_3_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_night_star_breeding_1", "in")
end

function breeder_recover_3_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_night_star_breeding_2", "in")
end

function breeder_recover_3_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_night_star_breeding_3", "in")
end

function breeder_section_5()
   return "af_gravi"
end

function breeder_has_5(actor, npc)
   return db.actor:object("af_gravi")
end

function breeder_lost_5(actor, npc)
   dialogs.relocate_item_section(npc, "af_gravi", "out")
end

function breeder_recover_5_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_gravi_breeding_1", "in")
end

function breeder_recover_5_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_gravi_breeding_2", "in")
end

function breeder_recover_5_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_gravi_breeding_3", "in")
end

function breeder_section_8()
   return "af_fireball"
end

function breeder_has_8(actor, npc)
   return db.actor:object("af_fireball")
end

function breeder_lost_8(actor, npc)
   dialogs.relocate_item_section(npc, "af_fireball", "out")
end

function breeder_recover_8_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_fireball_breeding_1", "in")
end

function breeder_recover_8_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_fireball_breeding_2", "in")
end

function breeder_recover_8_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_fireball_breeding_3", "in")
end

function breeder_section_9()
   return "af_dummy_glassbeads"
end

function breeder_has_9(actor, npc)
   return db.actor:object("af_dummy_glassbeads")
end

function breeder_lost_9(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_glassbeads", "out")
end

function breeder_recover_9_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_glassbeads_breeding_1", "in")
end

function breeder_recover_9_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_glassbeads_breeding_2", "in")
end

function breeder_recover_9_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_glassbeads_breeding_3", "in")
end

function breeder_section_13()
   return "af_mincer_meat"
end

function breeder_has_13(actor, npc)
   return db.actor:object("af_mincer_meat")
end

function breeder_lost_13(actor, npc)
   dialogs.relocate_item_section(npc, "af_mincer_meat", "out")
end

function breeder_recover_13_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_mincer_meat_breeding_1", "in")
end

function breeder_recover_13_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_mincer_meat_breeding_2", "in")
end

function breeder_recover_13_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_mincer_meat_breeding_3", "in")
end

function breeder_section_19()
   return "af_electra_flash"
end

function breeder_has_19(actor, npc)
   return db.actor:object("af_electra_flash")
end

function breeder_lost_19(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_flash", "out")
end

function breeder_recover_19_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_flash_breeding_1", "in")
end

function breeder_recover_19_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_flash_breeding_2", "in")
end

function breeder_recover_19_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_flash_breeding_3", "in")
end

---/3-й тип аномальности
function breeder_section_6()
   return "af_gold_fish"
end

function breeder_has_6(actor, npc)
   return db.actor:object("af_gold_fish")
end

function breeder_lost_6(actor, npc)
   dialogs.relocate_item_section(npc, "af_gold_fish", "out")
end

function breeder_recover_6_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_gold_fish_breeding_1", "in")
end

function breeder_recover_6_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_gold_fish_breeding_2", "in")
end

function breeder_recover_6_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_gold_fish_breeding_3", "in")
end

function breeder_section_10()
   return "af_eye"
end

function breeder_has_10(actor, npc)
   return db.actor:object("af_eye")
end

function breeder_lost_10(actor, npc)
   dialogs.relocate_item_section(npc, "af_eye", "out")
end

function breeder_recover_10_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_eye_breeding_1", "in")
end

function breeder_recover_10_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_eye_breeding_2", "in")
end

function breeder_recover_10_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_eye_breeding_3", "in")
end

function breeder_section_11()
   return "af_fire"
end

function breeder_has_11(actor, npc)
   return db.actor:object("af_fire")
end

function breeder_lost_11(actor, npc)
   dialogs.relocate_item_section(npc, "af_fire", "out")
end

function breeder_recover_11_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_fire_breeding_1", "in")
end

function breeder_recover_11_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_fire_breeding_2", "in")
end

function breeder_recover_11_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_fire_breeding_3", "in")
end

function breeder_section_14()
   return "af_soul"
end

function breeder_has_14(actor, npc)
   return db.actor:object("af_soul")
end

function breeder_lost_14(actor, npc)
   dialogs.relocate_item_section(npc, "af_soul", "out")
end

function breeder_recover_14_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_soul_breeding_1", "in")
end

function breeder_recover_14_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_soul_breeding_2", "in")
end

function breeder_recover_14_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_soul_breeding_3", "in")
end

function breeder_section_15()
   return "af_fuzz_kolobok"
end

function breeder_has_15(actor, npc)
   return db.actor:object("af_fuzz_kolobok")
end

function breeder_lost_15(actor, npc)
   dialogs.relocate_item_section(npc, "af_fuzz_kolobok", "out")
end

function breeder_recover_15_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_fuzz_kolobok_breeding_1", "in")
end

function breeder_recover_15_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_fuzz_kolobok_breeding_2", "in")
end

function breeder_recover_15_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_fuzz_kolobok_breeding_3", "in")
end

function breeder_section_16()
   return "af_baloon"
end

function breeder_has_16(actor, npc)
   return db.actor:object("af_baloon")
end

function breeder_lost_16(actor, npc)
   dialogs.relocate_item_section(npc, "af_baloon", "out")
end

function breeder_recover_16_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_baloon_breeding_1", "in")
end

function breeder_recover_16_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_baloon_breeding_2", "in")
end

function breeder_recover_16_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_baloon_breeding_3", "in")
end

function breeder_section_17()
   return "af_glass"
end

function breeder_has_17(actor, npc)
   return db.actor:object("af_glass")
end

function breeder_lost_17(actor, npc)
   dialogs.relocate_item_section(npc, "af_glass", "out")
end

function breeder_recover_17_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_glass_breeding_1", "in")
end

function breeder_recover_17_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_glass_breeding_2", "in")
end

function breeder_recover_17_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_glass_breeding_3", "in")
end

function breeder_section_20()
   return "af_electra_moonlight"
end

function breeder_has_20(actor, npc)
   return db.actor:object("af_electra_moonlight")
end

function breeder_lost_20(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_moonlight", "out")
end

function breeder_recover_20_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_moonlight_breeding_1", "in")
end

function breeder_recover_20_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_moonlight_breeding_2", "in")
end

function breeder_recover_20_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_electra_moonlight_breeding_3", "in")
end

function breeder_section_21()
   return "af_dummy_battery"
end

function breeder_has_21(actor, npc)
   return db.actor:object("af_dummy_battery")
end

function breeder_lost_21(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_battery", "out")
end

function breeder_recover_21_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_battery_breeding_1", "in")
end

function breeder_recover_21_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_battery_breeding_2", "in")
end

function breeder_recover_21_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_battery_breeding_3", "in")
end

function breeder_section_22()
   return "af_dummy_dummy"
end

function breeder_has_22(actor, npc)
   return db.actor:object("af_dummy_dummy")
end

function breeder_lost_22(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_dummy", "out")
end

function breeder_recover_22_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_dummy_breeding_1", "in")
end

function breeder_recover_22_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_dummy_breeding_2", "in")
end

function breeder_recover_22_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_dummy_dummy_breeding_3", "in")
end

function breeder_section_23()
   return "af_ice"
end

function breeder_has_23(actor, npc)
   return db.actor:object("af_ice")
end

function breeder_lost_23(actor, npc)
   dialogs.relocate_item_section(npc, "af_ice", "out")
end

function breeder_recover_23_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_ice_breeding_1", "in")
end

function breeder_recover_23_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_ice_breeding_2", "in")
end

function breeder_recover_23_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_ice_breeding_3", "in")
end

function breeder_section_24()
   return "af_monolit"
end

function breeder_has_24(actor, npc)
   return db.actor:object("af_monolit")
end

function breeder_lost_24(actor, npc)
   dialogs.relocate_item_section(npc, "af_monolit", "out")
end

function breeder_recover_24_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_monolit_breeding_1", "in")
end

function breeder_recover_24_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_monolit_breeding_2", "in")
end

function breeder_recover_24_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_monolit_breeding_3", "in")
end

function breeder_section_25()
   return "af_geliy"
end

function breeder_has_25(actor, npc)
   return db.actor:object("af_geliy")
end

function breeder_lost_25(actor, npc)
   dialogs.relocate_item_section(npc, "af_geliy", "out")
end

function breeder_recover_25_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_geliy_breeding_1", "in")
end

function breeder_recover_25_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_geliy_breeding_2", "in")
end

function breeder_recover_25_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_geliy_breeding_3", "in")
end

function breeder_section_26()
   return "af_vaselisk"
end

function breeder_has_26(actor, npc)
   return db.actor:object("af_vaselisk")
end

function breeder_lost_26(actor, npc)
   dialogs.relocate_item_section(npc, "af_vaselisk", "out")
end

function breeder_recover_26_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_vaselisk_breeding_1", "in")
end

function breeder_recover_26_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_vaselisk_breeding_2", "in")
end

function breeder_recover_26_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_vaselisk_breeding_3", "in")
end

function breeder_section_27()
   return "af_dragon_eye"
end

function breeder_has_27(actor, npc)
   return db.actor:object("af_dragon_eye")
end

function breeder_lost_27(actor, npc)
   dialogs.relocate_item_section(npc, "af_dragon_eye", "out")
end

function breeder_recover_27_b1(actor, npc)
   dialogs.relocate_item_section(npc, "af_dragon_eye_breeding_1", "in")
end

function breeder_recover_27_b2(actor, npc)
   dialogs.relocate_item_section(npc, "af_dragon_eye_breeding_2", "in")
end

function breeder_recover_27_b3(actor, npc)
   dialogs.relocate_item_section(npc, "af_dragon_eye_breeding_3", "in")
end

------------------------------------------------------------------------------
--                        Торгаш: заказ товаров                             --
------------------------------------------------------------------------------
local loaded_cost = 0
local loaded_need = 0
local loaded_item = "wpn_knife"
function pre_custom_goods(actor, npc)
   return sgm_g.get_actor_rank() >= loaded_need
end

function write_order(cost)
   if present_night() then
      loaded_cost = math.floor(cost / 6)
   else
      loaded_cost = math.floor(cost / 3)
   end
end

function custom_order(cost)
   if present_night() then
      loaded_cost = math.floor(cost / 2)
   else
      loaded_cost = cost
   end
end

function choose_item(item_name, need_rank)
   loaded_item = item_name
   if need_rank ~= nil then
      if sgm_g.get_actor_rank() >= need_rank then
         loaded_need = 0
      else
         loaded_need = need_rank
      end
   else
      loaded_need = 0
   end
end

function trader_order_is_executed(actor, npc)
   local get_npc = dialogs.who_is_npc(actor, npc)
   local npc_name = get_npc:profile_name()
   if npc_name == "jup_killer_base_trader" then
      npc_name = "jup_killer_trader"
   elseif npc_name == "pri_monolit_base_trader" then
      npc_name = "pri_monolith_trader"
   end
   if get_trader_order(npc_name) ~= nil and get_trader_order_time(npc_name) then
      return true
   else
      return false
   end
end

function trader_order_is_not_executed(actor, npc)
   local get_npc = dialogs.who_is_npc(actor, npc)
   local npc_name = get_npc:profile_name()
   if npc_name == "jup_killer_base_trader" then
      npc_name = "jup_killer_trader"
   elseif npc_name == "pri_monolit_base_trader" then
      npc_name = "pri_monolith_trader"
   end
   if get_trader_order(npc_name) ~= nil and get_trader_order_time(npc_name) then
      return false
   else
      return true
   end
end

function trader_activate_order(actor, npc)
   local get_npc = who_is_npc(actor, npc)
   local npc_nm = get_npc:profile_name()
   if npc_nm == "jup_killer_base_trader" then
      npc_nm = "jup_killer_trader"
   elseif npc_nm == "pri_monolit_base_trader" then
      npc_nm = "pri_monolith_trader"
   end
   sgm_g.inc_mod_param("stat_executed_orders")
   edit_trader_order(npc_nm, loaded_item)
   edit_trader_order_time(npc_nm, sgm_g.r_mod_params("number", "trader_order_delivery_time", 60))
end

function trader_deactivate_order(actor, npc)
   local get_npc = who_is_npc(actor, npc)
   local npc_nm = get_npc:profile_name()
   if npc_nm == "jup_killer_base_trader" then
      npc_nm = "jup_killer_trader"
   elseif npc_nm == "pri_monolit_base_trader" then
      npc_nm = "pri_monolith_trader"
   end
   edit_trader_order(npc_nm, "none")
   edit_trader_order_time(npc_nm, -1)
end

function zat_s_trader_w_1(first_speaker, second_speaker)
   custom_order(4000)
   choose_item("wpn_weapon", 110)
end

function zat_s_trader_o_1(first_speaker, second_speaker)
   custom_order(4400)
   choose_item("helm_piranhas", 93)
end

function zat_s_trader_o_2(first_speaker, second_speaker)
   custom_order(5400)
   choose_item("heavy_stalker_outfit", 85)
end

function zat_b_trader_w_1(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_bandit") then
      custom_order(1800)
      choose_item("wpn_weapon", 64)
   else
      custom_order(4000)
      choose_item("wpn_weapon", 75)
   end
end

function zat_b_trader_o_1(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_bandit") then
      custom_order(2800)
      choose_item("bandit_raid_outfit", 96)
   else
      custom_order(5200)
      choose_item("bandit_raid_outfit", 105)
   end
end

function zat_b_trader_o_2(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_bandit") then
      custom_order(6000)
      choose_item("bandit_exo_outfit", 205)
   else
      custom_order(9000)
      choose_item("bandit_exo_outfit", 250)
   end
end

function jup_f_trader_w_1(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_freedom") then
      custom_order(4000)
      choose_item("wpn_weapon", 160)
   else
      custom_order(5000)
      choose_item("wpn_weapon", 170)
   end
end

function jup_f_trader_o_1(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_freedom") then
      custom_order(4300)
      choose_item("svoboda_army_outfit", 170)
   else
      custom_order(5000)
      choose_item("svoboda_army_outfit", 180)
   end
end

function jup_f_trader_o_2(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_freedom") then
      custom_order(8600)
      choose_item("freedom_exo_outfit", 540)
   else
      custom_order(15000)
      choose_item("freedom_exo_outfit", 560)
   end
end

function jup_f_trader_o_3(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_dolg") then
      custom_order(8600)
      choose_item("dolg_exo_outfit", 540)
   else
      custom_order(15000)
      choose_item("dolg_exo_outfit", 560)
   end
end

function jup_k_trader_w_1(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_killer") then
      custom_order(2500)
      choose_item("wpn_weapon", 150)
   else
      custom_order(3000)
      choose_item("wpn_weapon", 180)
   end
end

function jup_k_trader_o_1(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_killer") then
      custom_order(2700)
      choose_item("helm_mercenary", 97)
   else
      custom_order(3200)
      choose_item("helm_mercenary", 104)
   end
end

function jup_k_trader_o_2(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_killer") then
      custom_order(3100)
      choose_item("killer_outfit", 95)
   else
      custom_order(3800)
      choose_item("killer_outfit", 102)
   end
end

function jup_k_trader_o_3(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_killer") then
      custom_order(7000)
      choose_item("killer_exo_outfit", 400)
   else
      custom_order(12000)
      choose_item("killer_exo_outfit", 445)
   end
end

function jup_r_trader_w_1(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_rasvet") then
      custom_order(1600)
      choose_item("wpn_weapon", 65)
   else
      custom_order(3500)
      choose_item("wpn_weapon", 70)
   end
end

function jup_r_trader_o_1(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_rasvet") then
      custom_order(3100)
      choose_item("cs_specnaz_outfit", 100)
   else
      custom_order(6200)
      choose_item("cs_specnaz_outfit", 110)
   end
end

function jup_r_trader_o_2(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_rasvet") then
      custom_order(8700)
      choose_item("csky_exo_outfit", 540)
   else
      custom_order(16000)
      choose_item("csky_exo_outfit", 560)
   end
end

function jup_e_trader_w_1(first_speaker, second_speaker)
   custom_order(8000)
   choose_item("ecolog_military_outfit", 300)
end

function jup_e_trader_o_1(first_speaker, second_speaker)
   custom_order(8600)
   choose_item("ecolog_military_outfit", 280)
end

function pri_a_trader_w_1(first_speaker, second_speaker)
   custom_order(12000)
   choose_item("wpn_mp5", 310)
end

function pri_a_trader_o_1(first_speaker, second_speaker)
   custom_order(3500)
   choose_item("military_outfit", 180)
end

function pri_a_trader_o_2(first_speaker, second_speaker)
   custom_order(9600)
   choose_item("army_exo_outfit", 500)
end

function pri_m_trader_w_1(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_monolith") then
      custom_order(4000)
      choose_item("wpn_weapon", 320)
   else
      custom_order(5000)
      choose_item("wpn_weapon", 350)
   end
end

function pri_m_trader_o_1(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_monolith") then
      custom_order(3000)
      choose_item("monolith_outfit", 250)
   else
      custom_order(4900)
      choose_item("monolith_outfit", 275)
   end
end

function pri_m_trader_o_2(first_speaker, second_speaker)
   if has_alife_info("actor_entry_in_monolith") then
      custom_order(6000)
      choose_item("monolit_exo_outfit", 600)
   else
      custom_order(10000)
      choose_item("monolit_exo_outfit", 650)
   end
end

function val_n_trader_w_1(first_speaker, second_speaker)
   custom_order(3000)
   choose_item("wpn_weapon", 400)
end

function val_n_trader_o_1(first_speaker, second_speaker)
   custom_order(4000)
   choose_item("outfit", 400)
end

function mil_n_trader_w_1(first_speaker, second_speaker)
   custom_order(15000)
   choose_item("wpn_weapon", 600)
end

function mil_n_trader_o_1(first_speaker, second_speaker)
   custom_order(7800)
   choose_item("army_nauchniy_outfit", 400)
end

function mil_n_trader_o_2(first_speaker, second_speaker)
   custom_order(7000)
   choose_item("stalker_reinforced_outfit", 390)
end

function esc_s_trader_w_1(first_speaker, second_speaker)
   custom_order(800)
   choose_item("wpn_colt1911", 15)
end

function esc_s_trader_w_2(first_speaker, second_speaker)
   custom_order(1200)
   choose_item("wpn_wincheaster1300", 40)
end

function esc_s_trader_o_1(first_speaker, second_speaker)
   custom_order(4400)
   choose_item("outfit", 93)
end

function mar_s_trader_w_1(first_speaker, second_speaker)
   custom_order(2200)
   choose_item("wpn_abakan", 70)
end

function mar_s_trader_w_2(first_speaker, second_speaker)
   custom_order(1200)
   choose_item("wpn_l85", 60)
end

function mar_s_trader_o_1(first_speaker, second_speaker)
   custom_order(4400)
   choose_item("outfit", 93)
end

function show_order_costs(first_speaker, second_speaker)
   db.actor:give_talk_message2("",
      game.translate_string("st_order_cost") .. " " .. loaded_cost .. " " .. game.translate_string("st_bankir_ru"),
      "ui_iconsTotal_found_thing", "iconed_answer_item")
   if loaded_need ~= 0 then
      db.actor:give_talk_message2("",
         game.translate_string("%c[110,0,200,0]") ..
         game.translate_string("st_custom_goods_need_rank") ..
         " " .. game.translate_string("%c[110,148,148,0]") .. loaded_need, "ui_iconsTotal_found_thing",
         "iconed_answer_item")
   end
   db.actor:give_talk_message2("", game.translate_string(sgm_functions.ReadDescription(loaded_item)),
      "ui_iconsTotal_agroprom_get_military_documents", "iconed_answer_item")
end

function order_has_money(actor, npc)
   return sgm_g.get_actor_rank() >= loaded_need and db.actor:money() >= loaded_cost
end

function order_agree_less_money(actor, npc)
   return db.actor:money() < loaded_cost
end

function order_agree_give_money(actor, npc)
   dialogs.relocate_money(npc, loaded_cost, "out")
   trader_activate_order(actor, npc)
end

function order_recoil_have_money(actor, npc)
   return db.actor:money() >= 500
end

function order_recoil_give_money(actor, npc)
   dialogs.relocate_money(npc, 500, "out")
   trader_deactivate_order(actor, npc)
end

------------------------------------------------------------------------------
--                      Торгаш: продажа бинокля                             --
------------------------------------------------------------------------------
function zat_stalker_trader_show_binos(first_speaker, second_speaker)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil and (bino_slot:section() == "wpn_binoc" or bino_slot:section() == "wpn_binocular_m1" or bino_slot:section() == "wpn_binocular_m3") then
      db.actor:give_talk_message2("", game.translate_string("st_binocular_m2"), "ui_mod_icon_binoculars",
         "iconed_answer_item")
   elseif bino_slot ~= nil and bino_slot:section() ~= nil and bino_slot:section() == "wpn_binocular_m2" then
      db.actor:give_talk_message2("", game.translate_string("st_binocular_default"), "ui_mod_icon_binoculars",
         "iconed_answer_item")
   end
end

function jup_freedom_trader_show_binos(first_speaker, second_speaker)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil and (bino_slot:section() == "wpn_binoc" or bino_slot:section() == "wpn_binocular_m2" or bino_slot:section() == "wpn_binocular_m3") then
      db.actor:give_talk_message2("", game.translate_string("st_binocular_m1"), "ui_mod_icon_binoculars",
         "iconed_answer_item")
   elseif bino_slot ~= nil and bino_slot:section() ~= nil and bino_slot:section() == "wpn_binocular_m1" then
      db.actor:give_talk_message2("", game.translate_string("st_binocular_default"), "ui_mod_icon_binoculars",
         "iconed_answer_item")
   end
end

function pri_army_trader_show_binos(first_speaker, second_speaker)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil and (bino_slot:section() == "wpn_binoc" or bino_slot:section() == "wpn_binocular_m2" or bino_slot:section() == "wpn_binocular_m1") then
      db.actor:give_talk_message2("", game.translate_string("st_binocular_m3"), "ui_mod_icon_binoculars",
         "iconed_answer_item")
   elseif bino_slot ~= nil and bino_slot:section() ~= nil and bino_slot:section() == "wpn_binocular_m3" then
      db.actor:give_talk_message2("", game.translate_string("st_binocular_default"), "ui_mod_icon_binoculars",
         "iconed_answer_item")
   end
end

function selected_other_bino(actor, npc)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil and bino_slot:section() ~= "wpn_binoc" then
      return true
   end
   return false
end

function dont_installed_m1(actor, npc)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil and bino_slot:section() ~= "wpn_binocular_m1" then
      return true
   end
   return false
end

function dont_installed_m2(actor, npc)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil and bino_slot:section() ~= "wpn_binocular_m2" then
      return true
   end
   return false
end

function dont_installed_m3(actor, npc)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil and bino_slot:section() ~= "wpn_binocular_m3" then
      return true
   end
   return false
end

function install_bino_def(actor, npc)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil then
      remove_inv_item(db.actor, bino_slot:section())
      dialogs.relocate_item_section(npc, "wpn_binoc", "in")
   end
end

function install_bino_m1(actor, npc)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil then
      remove_inv_item(db.actor, bino_slot:section())
      dialogs.relocate_item_section(npc, "wpn_binocular_m1", "in")
   end
end

function install_bino_m2(actor, npc)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil then
      remove_inv_item(db.actor, bino_slot:section())
      dialogs.relocate_item_section(npc, "wpn_binocular_m2", "in")
   end
end

function install_bino_m3(actor, npc)
   local bino_slot = db.actor:item_in_slot(5)
   if bino_slot ~= nil and bino_slot:section() ~= nil then
      remove_inv_item(db.actor, bino_slot:section())
      dialogs.relocate_item_section(npc, "wpn_binocular_m3", "in")
   end
end

------------------------------------------------------------------------------
--                       Шустрый: квесты-заказы                             --
------------------------------------------------------------------------------
function s_show_available_tasks(first_speaker, second_speaker)
   if sgm_g.dont_has_alife_info("shustriy_find_1_complete") then
      db.actor:give_talk_message2("", game.translate_string("shustriy_available_find_1_title"),
         "ui_inGame2_Shustriy_Find_1", "iconed_answer_item")
   end
   if sgm_g.dont_has_alife_info("shustriy_find_2_complete") then
      db.actor:give_talk_message2("", game.translate_string("shustriy_available_find_2_title"),
         "ui_inGame2_Shustriy_Find_2", "iconed_answer_item")
   end
   if sgm_g.dont_has_alife_info("shustriy_find_3_complete") then
      db.actor:give_talk_message2("", game.translate_string("shustriy_available_find_3_title"),
         "ui_inGame2_Shustriy_Find_3", "iconed_answer_item")
   end
   if has_alife_info("shustriy_find_4_allow") and sgm_g.dont_has_alife_info("shustriy_find_4_complete") then
      db.actor:give_talk_message2("", game.translate_string("shustriy_available_find_4_title"),
         "ui_inGame2_Shustriy_Find_4", "iconed_answer_item")
   end
end

function shustriy_give_find_1_quest(actor, npc)
   sgm_g.add_task("sgm_shustriy_find_1")
end

function shustriy_give_find_2_quest(actor, npc)
   sgm_g.add_task("sgm_shustriy_find_2")
end

function shustriy_give_find_3_quest(actor, npc)
   sgm_g.add_task("sgm_shustriy_find_3")
end

function shustriy_give_find_4_quest(actor, npc)
   sgm_g.add_task("sgm_shustriy_find_4")
end

function shustriy_give_find_1_spawn(actor, npc)
   local rnd_spawn = math.random(1, 4)
   if rnd_spawn == 1 then
      sgm_g.create("shustriy_ingram_m10", -168.658, 23.334, -154.524, 607901, 57)
   elseif rnd_spawn == 2 then
      sgm_g.create("shustriy_ingram_m10", 412.489, 43.874, -26.262, 1642568, 293)
   elseif rnd_spawn == 3 then
      sgm_g.create("shustriy_ingram_m10", -157.691, 23.828, -173.725, 626644, 57)
   else
      sgm_g.create("shustriy_ingram_m10", 313.457, 41.873, -420.498, 1497289, 1)
   end
end

function shustriy_give_find_2_spawn(actor, npc)
   sgm_g.create("shustriy_ak47", 313.724, 35.632, -233.085, 1222905, 549)
end

function shustriy_give_find_3_spawn(actor, npc)
   sgm_g.create("shustriy_mossberg_590mk", -422.774, 0.010, -371.828, 16230, 324)
end

function shustriy_give_find_4_spawn(actor, npc)
   sgm_g.create("shustriy_steyr_aug_ss190", 5.438, 4.531, 270.509, 205088, 713)
end

function there_available_tasks(actor, npc)
   return sgm_g.read_mod_param("shustriy_available_tasks") ~= nil and
       sgm_g.read_mod_param("shustriy_available_tasks") > 0
end

function nothing_available_tasks(actor, npc)
   return sgm_g.read_mod_param("shustriy_available_tasks") ~= nil and
       sgm_g.read_mod_param("shustriy_available_tasks") <= 0
end

function s_actor_has_1_order(actor, npc)
   return db.actor:object("shustriy_ingram_m10")
end

function s_actor_give_1_order(actor, npc)
   dialogs.relocate_item_section(npc, "shustriy_ingram_m10", "out")
end

function s_order_1_reward(actor, npc)
   local s_tasks = sgm_g.read_mod_param("shustriy_available_tasks")
   dialogs.relocate_item_section(actor, "remote_explosive_charge", "in")
   sgm_g.give_reward("conventer_grenade_box")
   dialogs.relocate_money(npc, math.random(1500, 3000), "in")
   give_info("shustriy_find_1_reward")
   disable_info("shustriy_find_is_active")
   dec_mod_param("shustriy_available_tasks")
end

function s_actor_has_2_order(actor, npc)
   return db.actor:object("shustriy_ak47")
end

function s_actor_give_2_order(actor, npc)
   dialogs.relocate_item_section(npc, "shustriy_ak47", "out")
end

function s_order_2_reward(actor, npc)
   local s_tasks = sgm_g.read_mod_param("shustriy_available_tasks")
   dialogs.relocate_item_section(actor, "remote_explosive_charge", "in", 2)
   dialogs.relocate_item_section(actor, "wpn_addon_scope_susat_custom", "in")
   dialogs.relocate_item_section(actor, "bag_medkit_2", "in")
   dialogs.relocate_money(npc, math.random(3000, 5000), "in")
   give_info("shustriy_find_2_reward")
   disable_info("shustriy_find_is_active")
   dec_mod_param("shustriy_available_tasks")
end

function s_actor_has_3_order(actor, npc)
   return db.actor:object("shustriy_mossberg_590mk")
end

function s_actor_give_3_order(actor, npc)
   dialogs.relocate_item_section(npc, "shustriy_mossberg_590mk", "out")
end

function s_order_3_reward(actor, npc)
   local s_tasks = sgm_g.read_mod_param("shustriy_available_tasks")
   dialogs.relocate_item_section(actor, "remote_explosive_charge", "in", 2)
   dialogs.relocate_item_section(actor, "wpn_usp", "in")
   sgm_g.give_reward("ammo_11.43x23_hydro", 2)
   dialogs.relocate_item_section(actor, "af_gravi", "in")
   sgm_g.give_reward("ammo_5.45x39_ap", 2)
   sgm_g.give_reward("ammo_5.56x45_ap", 2)
   dialogs.relocate_money(npc, math.random(7000, 9000), "in")
   give_info("shustriy_find_3_reward")
   disable_info("shustriy_find_is_active")
   dec_mod_param("shustriy_available_tasks")
end

function s_actor_has_4_order(actor, npc)
   return db.actor:object("shustriy_steyr_aug_ss190")
end

function s_actor_give_4_order(actor, npc)
   dialogs.relocate_item_section(npc, "shustriy_steyr_aug_ss190", "out")
end

function s_order_4_reward(actor, npc)
   local s_tasks = sgm_g.read_mod_param("shustriy_available_tasks")
   dialogs.relocate_item_section(actor, "remote_explosive_charge", "in", 3)
   dialogs.relocate_item_section(actor, "af_fireball", "in")
   dialogs.relocate_money(npc, math.random(6000, 10000), "in")
   give_info("shustriy_find_4_reward")
   disable_info("shustriy_find_is_active")
   dec_mod_param("shustriy_available_tasks")
end

------------------------------------------------------------------------------
--                      Зверобой: покупка трофеев                           --
------------------------------------------------------------------------------
function trapper_available_booty(first_speaker, second_speaker)
   parse_booty_tips("mutant_snork_booty")
   parse_booty_tips("mutant_psevdodog_booty")
   parse_booty_tips("mutant_krovosos_booty")
   parse_booty_tips("mutant_boar_booty")
   parse_booty_tips("mutant_dog_booty")
   parse_booty_tips("mutant_flesh_booty")
   parse_booty_tips("mutant_giant_booty")
   parse_booty_tips("mutant_chimera_booty")
   parse_booty_tips("mutant_controler_booty")
   parse_booty_tips("mutant_burer_booty")
end

function parse_booty_tips(booty_name)
   if sgm_functions.have_item_count(booty_name, 1) then
      db.actor:give_talk_message2("",
         game.translate_string("st_booty_count") ..
         " " ..
         game.translate_string(sgm_functions.ReadCaption(booty_name)) ..
         " = " .. sgm_functions.get_item_count(booty_name) .. game.translate_string("st_booty_shtuk"),
         "ui_iconsTotal_gar_kill_boars", "iconed_answer_item")
      db.actor:give_talk_message2("",
         game.translate_string("st_booty_costs") .. " " .. sgm_functions.consider_items_costs(booty_name) .. " RU",
         "ui_iconsTotal_found_thing", "iconed_answer_item")
   end
end

function relocates_booty(booty_name, npc)
   actor = db.actor
   for k, v in pairs(relocates_table(booty_name)) do
      if v ~= nil and alife():object(v) then
         alife():release(alife():object(v), true)
      end
   end
end

function relocates_table(need_item)
   local item_table = {}
   local item_section = need_item
   local item_cnt = 0
   local function relocator(temp, item)
      if item:section() == item_section and item_cnt == 0 then
         table.insert(item_table, item:id())
         item_cnt = 1
      elseif item:section() == item_section and item_cnt == 1 then
         table.insert(item_table, item:id())
         item_cnt = 0
      end
   end
   db.actor:iterate_inventory(relocator, db.actor)
   return item_table
end

function pre_trapper_booty_has(actor, npc)
   if has_any_items("mutant_snork_booty,mutant_psevdodog_booty,mutant_krovosos_booty,mutant_boar_booty,mutant_dog_booty,mutant_flesh_booty,mutant_giant_booty,mutant_chimera_booty,mutant_controler_booty,mutant_burer_booty") then
      return true
   else
      return false
   end
end

function pre_trapper_booty_dont(actor, npc)
   if has_any_items("mutant_snork_booty,mutant_psevdodog_booty,mutant_krovosos_booty,mutant_boar_booty,mutant_dog_booty,mutant_flesh_booty,mutant_giant_booty,mutant_chimera_booty,mutant_controler_booty,mutant_burer_booty") then
      return false
   else
      return true
   end
end

function has_mutant_snork_booty(actor, npc)
   return db.actor:object("mutant_snork_booty")
end

function has_mutant_psevdodog_booty(actor, npc)
   return db.actor:object("mutant_psevdodog_booty")
end

function has_mutant_krovosos_booty(actor, npc)
   return db.actor:object("mutant_krovosos_booty")
end

function has_mutant_boar_booty(actor, npc)
   return db.actor:object("mutant_boar_booty")
end

function has_mutant_dog_booty(actor, npc)
   return db.actor:object("mutant_dog_booty")
end

function has_mutant_flesh_booty(actor, npc)
   return db.actor:object("mutant_flesh_booty")
end

function has_mutant_giant_booty(actor, npc)
   return db.actor:object("mutant_giant_booty")
end

function has_mutant_chimera_booty(actor, npc)
   return db.actor:object("mutant_chimera_booty")
end

function has_mutant_controler_booty(actor, npc)
   return db.actor:object("mutant_controler_booty")
end

function has_mutant_burer_booty(actor, npc)
   return db.actor:object("mutant_burer_booty")
end

function trapper_snork_booty_reward(actor, npc)
   dialogs.relocate_money(npc, sgm_functions.consider_items_costs("mutant_snork_booty"), "in")
end

function trapper_snork_booty_relocate(actor, npc)
   relocates_booty("mutant_snork_booty", npc)
end

function trapper_psevdodog_booty_reward(actor, npc)
   dialogs.relocate_money(npc, sgm_functions.consider_items_costs("mutant_psevdodog_booty"), "in")
end

function trapper_psevdodog_booty_relocate(actor, npc)
   relocates_booty("mutant_psevdodog_booty", npc)
end

function trapper_krovosos_booty_reward(actor, npc)
   dialogs.relocate_money(npc, sgm_functions.consider_items_costs("mutant_krovosos_booty"), "in")
end

function trapper_krovosos_booty_relocate(actor, npc)
   relocates_booty("mutant_krovosos_booty", npc)
end

function trapper_boar_booty_reward(actor, npc)
   dialogs.relocate_money(npc, sgm_functions.consider_items_costs("mutant_boar_booty"), "in")
end

function trapper_boar_booty_relocate(actor, npc)
   relocates_booty("mutant_boar_booty", npc)
end

function trapper_dog_booty_reward(actor, npc)
   dialogs.relocate_money(npc, sgm_functions.consider_items_costs("mutant_dog_booty"), "in")
end

function trapper_dog_booty_relocate(actor, npc)
   relocates_booty("mutant_dog_booty", npc)
end

function trapper_flesh_booty_reward(actor, npc)
   dialogs.relocate_money(npc, sgm_functions.consider_items_costs("mutant_flesh_booty"), "in")
end

function trapper_flesh_booty_relocate(actor, npc)
   relocates_booty("mutant_flesh_booty", npc)
end

function trapper_giant_booty_reward(actor, npc)
   dialogs.relocate_money(npc, sgm_functions.consider_items_costs("mutant_giant_booty"), "in")
end

function trapper_giant_booty_relocate(actor, npc)
   relocates_booty("mutant_giant_booty", npc)
end

function trapper_chimera_booty_reward(actor, npc)
   dialogs.relocate_money(npc, sgm_functions.consider_items_costs("mutant_chimera_booty"), "in")
end

function trapper_chimera_booty_relocate(actor, npc)
   relocates_booty("mutant_chimera_booty", npc)
end

function trapper_controler_booty_reward(actor, npc)
   dialogs.relocate_money(npc, sgm_functions.consider_items_costs("mutant_controler_booty"), "in")
end

function trapper_controler_booty_relocate(actor, npc)
   relocates_booty("mutant_controler_booty", npc)
end

function trapper_burer_booty_reward(actor, npc)
   dialogs.relocate_money(npc, sgm_functions.consider_items_costs("mutant_burer_booty"), "in")
end

function trapper_burer_booty_relocate(actor, npc)
   relocates_booty("mutant_burer_booty", npc)
end

------------------------------------------------------------------------------
--                 Новиков: модернизация детекторов                         --
------------------------------------------------------------------------------
function novikov_available_modyfy(first_speaker, second_speaker)
   parse_detector_tips("detector_simple")
   parse_detector_tips("detector_advanced")
   parse_detector_tips("detector_elite")
   parse_detector_tips("detector_scientific")
   parse_detector_tips("detector_omega")
end

function parse_detector_tips(detector_name)
   if sgm_functions.have_item_count(detector_name, 1) then
      db.actor:give_talk_message2("", game.translate_string(sgm_functions.ReadCaption(detector_name)),
         "ui_iconsTotal_yan_find_scientist", "iconed_answer_item")
   end
end

function replace_detector(detector_name)
   actor = db.actor
   for k, v in pairs(replace_table(detector_name)) do
      if v ~= nil and alife():object(v) then
         alife():release(alife():object(v), true)
      end
   end
end

function replace_table(need_item)
   local item_table = {}
   local item_section = need_item
   local item_cnt = 0
   local function relocator(temp, item)
      if item:section() == item_section and item_cnt == 0 then
         table.insert(item_table, item:id())
         item_cnt = 1
      end
   end
   db.actor:iterate_inventory(relocator, db.actor)
   return item_table
end

function pre_novikov_has_any(actor, npc)
   if has_any_items("detector_simple,detector_advanced,detector_elite,detector_scientific,detector_omega") then
      return true
   else
      return false
   end
end

function pre_novikov_has_nothing(actor, npc)
   if has_any_items("detector_simple,detector_advanced,detector_elite,detector_scientific,detector_omega") then
      return false
   else
      return true
   end
end

function has_money_to_detector_simple(actor, npc)
   return db.actor:money() >= 2400
end

function not_money_to_detector_simple(actor, npc)
   return db.actor:money() < 2400
end

function give_money_to_detector_simple(actor, npc)
   dialogs.relocate_money(npc, 2400, "out")
end

function has_money_to_detector_advanced(actor, npc)
   return db.actor:money() >= 4500
end

function not_money_to_detector_advanced(actor, npc)
   return db.actor:money() < 4500
end

function give_money_to_detector_advanced(actor, npc)
   dialogs.relocate_money(npc, 4500, "out")
end

function has_money_to_detector_elite(actor, npc)
   return db.actor:money() >= 8100
end

function not_money_to_detector_elite(actor, npc)
   return db.actor:money() < 8100
end

function give_money_to_detector_elite(actor, npc)
   dialogs.relocate_money(npc, 8100, "out")
end

function has_money_to_detector_scientific(actor, npc)
   return db.actor:money() >= 7000
end

function not_money_to_detector_scientific(actor, npc)
   return db.actor:money() < 7000
end

function give_money_to_detector_scientific(actor, npc)
   dialogs.relocate_money(npc, 7000, "out")
end

function has_money_to_detector_omega(actor, npc)
   return db.actor:money() >= 12500
end

function not_money_to_detector_omega(actor, npc)
   return db.actor:money() < 12500
end

function give_money_to_detector_omega(actor, npc)
   dialogs.relocate_money(npc, 12500, "out")
end

function modify_detector_simple(actor, npc)
   dialogs.relocate_item_section(actor, "detector_simple_up", "in")
   replace_detector("detector_simple")
end

function modify_detector_advanced(actor, npc)
   dialogs.relocate_item_section(actor, "detector_advanced_up", "in")
   replace_detector("detector_advanced")
end

function modify_detector_elite(actor, npc)
   dialogs.relocate_item_section(actor, "detector_elite_up", "in")
   replace_detector("detector_elite")
end

function modify_detector_scientific(actor, npc)
   dialogs.relocate_item_section(actor, "detector_scientific_up", "in")
   replace_detector("detector_scientific")
end

function modify_detector_omega(actor, npc)
   dialogs.relocate_item_section(actor, "detector_omega_up", "in")
   replace_detector("detector_omega")
end

function has_detector_simple(actor, npc)
   return db.actor:object("detector_simple")
end

function has_detector_advanced(actor, npc)
   return db.actor:object("detector_advanced")
end

function has_detector_elite(actor, npc)
   return db.actor:object("detector_elite")
end

function has_detector_scientific(actor, npc)
   return db.actor:object("detector_scientific")
end

function has_detector_omega(actor, npc)
   return db.actor:object("detector_omega")
end

------------------------------------------------------------------------------
--                      Телохранитель: вооружение                           --
------------------------------------------------------------------------------
issued_pistols_list = {
   { "wpn_pm" },
   { "wpn_pb" },
   { "wpn_fort" },
   { "wpn_hpsa" },
   { "wpn_beretta" },
   { "wpn_walther" },
   { "wpn_sig220" },
   { "wpn_colt1911" },
   { "wpn_usp" },
   { "wpn_desert_eagle" },
   { "wpn_pm_actor" },
   { "wpn_desert_eagle_nimble" },
   { "wpn_sig220_nimble" },
   { "wpn_usp_nimble" },
   { "wpn_fort_snag" },
   { "wpn_fort_actor" },
   { "wpn_beretta_m1" },
   { "wpn_beretta_m2" },
   { "wpn_beretta_m3" },
   { "wpn_fort_m1" },
   { "wpn_fort_m2" },
   { "wpn_fort_m3" },
   { "wpn_pm_m1" },
   { "wpn_pm_m2" },
   { "wpn_pm_m3" },
   { "wpn_sig220_m1" },
   { "wpn_sig220_m2" },
   { "wpn_sig220_m3" },
}
issued_rifles_list = {
   { "wpn_bm16" },
   { "wpn_toz34" },
   { "wpn_wincheaster1300" },
   { "wpn_spas12" },
   { "wpn_protecta" },
   { "wpn_ak74u" },
   { "wpn_mp5" },
   { "wpn_ak74" },
   { "wpn_abakan" },
   { "wpn_l85" },
   { "wpn_lr300" },
   { "wpn_sig550" },
   { "wpn_groza" },
   { "wpn_val" },
   { "wpn_vintorez" },
   { "wpn_svu" },
   { "wpn_svd" },
   { "wpn_rg-6" },
   { "wpn_rpg7" },
   { "wpn_g36" },
   { "wpn_fn2000" },
   { "wpn_pkm" },
   { "wpn_gauss" },
   { "wpn_sig550_luckygun" },
   { "wpn_pkm_zulus" },
   { "wpn_wincheaster1300_trapper" },
   { "wpn_groza_nimble" },
   { "wpn_mp5_nimble" },
   { "wpn_spas12_nimble" },
   { "wpn_svd_nimble" },
   { "wpn_svu_nimble" },
   { "wpn_vintorez_nimble" },
   { "wpn_g36_nimble" },
   { "wpn_fn2000_nimble" },
   { "wpn_protecta_nimble" },
   { "wpn_ak74u_snag" },
   { "wpn_abakan_m1" },
   { "wpn_abakan_m2" },
   { "wpn_abakan_m3" },
   { "wpn_ak74u_m1" },
   { "wpn_ak74u_m2" },
   { "wpn_ak74u_m3" },
   { "wpn_ak74_m1" },
   { "wpn_ak74_m2" },
   { "wpn_ak74_m3" },
   { "wpn_bm16_m1" },
   { "wpn_bm16_m2" },
   { "wpn_bm16_m3" },
   { "wpn_sig550_m1" },
   { "wpn_sig550_m2" },
   { "wpn_sig550_m3" },
   { "wpn_spas12_m1" },
   { "wpn_spas12_m2" },
   { "wpn_spas12_m3" },
   { "wpn_groza_m1" },
   { "wpn_groza_m2" },
   { "wpn_groza_m3" },
   { "wpn_lr300_m1" },
   { "wpn_lr300_m2" },
   { "wpn_lr300_m3" },
   { "wpn_mp5_m1" },
   { "wpn_mp5_m2" },
   { "wpn_mp5_m3" },
   { "wpn_toz34_m1" },
   { "wpn_toz34_m2" },
   { "wpn_toz34_m3" },
   { "wpn_vintorez_m1" },
   { "wpn_vintorez_m2" },
   { "wpn_vintorez_m3" },
   { "wpn_wincheaster1300_m1" },
   { "wpn_wincheaster1300_m2" },
   { "wpn_wincheaster1300_m3" },
}
issued_medkits_list = {
   { "medkit" },
   { "medkit_army" },
   { "medkit_scientic" },
   { "medkit_elite" }
}
function bodyguard_available_equipment(actor, npc)
   parse_bodyguard_slot(2, actor, "ui_mod_1st_slot")
   parse_bodyguard_slot(3, actor, "ui_mod_2nd_slot")
end

function parse_bodyguard_slot(slot_value, npc, slot_icon)
   if npc:item_in_slot(slot_value) ~= nil and npc:item_in_slot(slot_value):section() ~= nil then
      db.actor:give_talk_message2("",
         game.translate_string("%c[110,0,128,64]") ..
         game.translate_string(sgm_functions.ReadCaption(npc:item_in_slot(slot_value):section())), slot_icon,
         "iconed_answer_item")
      db.actor:give_talk_message2("",
         game.translate_string(sgm_functions.ReadDescription(npc:item_in_slot(slot_value):section())),
         "ui_mod_empty_slot", "iconed_answer_item")
   end
end

function release_old_weapon(victim, slot_operation)
   if victim:item_in_slot(slot_operation) ~= nil and victim:item_in_slot(slot_operation):section() ~= nil and victim:object(victim:item_in_slot(slot_operation):section()) then
      if alife():object(victim:object(victim:item_in_slot(slot_operation):section()):id()) then
         alife():release(alife():object(victim:object(victim:item_in_slot(slot_operation):section()):id()), true)
      end
   end
end

function relocate_weapon_to_bodyguard(victim, section, type, amount, show_time)
   if db.actor then
      if not amount then
         amount = 1
      end
      for i = 1, amount do
         if type == "in" then
            if quest_section[section] == true and victim ~= nil and victim:object(section) ~= nil then
               victim:transfer_item(victim:object(section), db.actor)
            else
               alife():create(section, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(),
                  db.actor:id())
            end
         elseif type == "out" then
            if victim == nil then
               abort("Couldn't relocate item to NULL")
            end
            db.actor:transfer_item(db.actor:object(section), victim)
            if sgm_functions.ReadAmmoClass(section) ~= nil then
               parse_ammo = utils.parse_spawns(sgm_functions.ReadAmmoClass(section))
               for k, v in pairs(parse_ammo) do
                  for i = 1, v.prob do
                     alife():create(v.section, vector(), 0, 0, victim:id())
                  end
               end
            end
         end
      end
      if death_manager.ammo_sections[section] == true then
         local ltx = system_ini()
         local box_size = ltx:r_s32(section, "box_size")
         amount = amount * box_size
      end
      news_manager.relocate_item(db.actor, type, section, amount, show_time)
   end
end

function has_available_pistol(actor, npc)
   for k, v in pairs(issued_pistols_list) do
      if db.actor:object(v[1]) then
         return true
      end
   end
   return false
end

function has_available_rifle(actor, npc)
   for k, v in pairs(issued_rifles_list) do
      if db.actor:object(v[1]) then
         return true
      end
   end
   return false
end

function has_available_medkit(actor, npc)
   for k, v in pairs(issued_medkits_list) do
      if db.actor:object(v[1]) and read_obj_mod_param(npc, "issued_medkit") == nil then --/not npc:object(v[1])
         return true
      end
   end
   return false
end

--/
function actor_have_pm(actor, npc)
   return db.actor:object("wpn_pm")
end

function actor_have_pb(actor, npc)
   return db.actor:object("wpn_pb")
end

function actor_have_fort(actor, npc)
   return db.actor:object("wpn_fort")
end

function actor_have_hpsa(actor, npc)
   return db.actor:object("wpn_hpsa")
end

function actor_have_beretta(actor, npc)
   return db.actor:object("wpn_beretta")
end

function actor_have_walther(actor, npc)
   return db.actor:object("wpn_walther")
end

function actor_have_sig220(actor, npc)
   return db.actor:object("wpn_sig220")
end

function actor_have_colt1911(actor, npc)
   return db.actor:object("wpn_colt1911")
end

function actor_have_usp(actor, npc)
   return db.actor:object("wpn_usp")
end

function actor_have_desert_eagle(actor, npc)
   return db.actor:object("wpn_desert_eagle")
end

function actor_have_pm_actor(actor, npc)
   return db.actor:object("wpn_pm_actor")
end

function actor_have_desert_eagle_nimble(actor, npc)
   return db.actor:object("wpn_desert_eagle_nimble")
end

function actor_have_sig220_nimble(actor, npc)
   return db.actor:object("wpn_sig220_nimble")
end

function actor_have_usp_nimble(actor, npc)
   return db.actor:object("wpn_usp_nimble")
end

function actor_have_fort_snag(actor, npc)
   return db.actor:object("wpn_fort_snag")
end

function actor_have_fort_actor(actor, npc)
   return db.actor:object("wpn_fort_actor")
end

function actor_have_beretta_m1(actor, npc)
   return db.actor:object("wpn_beretta_m1")
end

function actor_have_beretta_m2(actor, npc)
   return db.actor:object("wpn_beretta_m2")
end

function actor_have_beretta_m3(actor, npc)
   return db.actor:object("wpn_beretta_m3")
end

function actor_have_fort_m1(actor, npc)
   return db.actor:object("wpn_fort_m1")
end

function actor_have_fort_m2(actor, npc)
   return db.actor:object("wpn_fort_m2")
end

function actor_have_fort_m3(actor, npc)
   return db.actor:object("wpn_fort_m3")
end

function actor_have_pm_m1(actor, npc)
   return db.actor:object("wpn_pm_m1")
end

function actor_have_pm_m2(actor, npc)
   return db.actor:object("wpn_pm_m2")
end

function actor_have_pm_m3(actor, npc)
   return db.actor:object("wpn_pm_m3")
end

function actor_have_sig220_m1(actor, npc)
   return db.actor:object("wpn_sig220_m1")
end

function actor_have_sig220_m2(actor, npc)
   return db.actor:object("wpn_sig220_m2")
end

function actor_have_sig220_m3(actor, npc)
   return db.actor:object("wpn_sig220_m3")
end

---
function actor_have_bm16(actor, npc)
   return db.actor:object("wpn_bm16")
end

function actor_have_toz34(actor, npc)
   return db.actor:object("wpn_toz34")
end

function actor_have_wincheaster1300(actor, npc)
   return db.actor:object("wpn_wincheaster1300")
end

function actor_have_spas12(actor, npc)
   return db.actor:object("wpn_spas12")
end

function actor_have_protecta(actor, npc)
   return db.actor:object("wpn_protecta")
end

function actor_have_ak74u(actor, npc)
   return db.actor:object("wpn_ak74u")
end

function actor_have_mp5(actor, npc)
   return db.actor:object("wpn_mp5")
end

function actor_have_ak74(actor, npc)
   return db.actor:object("wpn_ak74")
end

function actor_have_abakan(actor, npc)
   return db.actor:object("wpn_abakan")
end

function actor_have_l85(actor, npc)
   return db.actor:object("wpn_l85")
end

function actor_have_lr300(actor, npc)
   return db.actor:object("wpn_lr300")
end

function actor_have_sig550(actor, npc)
   return db.actor:object("wpn_sig550")
end

function actor_have_groza(actor, npc)
   return db.actor:object("wpn_groza")
end

function actor_have_val(actor, npc)
   return db.actor:object("wpn_val")
end

function actor_have_vintorez(actor, npc)
   return db.actor:object("wpn_vintorez")
end

function actor_have_svu(actor, npc)
   return db.actor:object("wpn_svu")
end

function actor_have_svd(actor, npc)
   return db.actor:object("wpn_svd")
end

function actor_have_rg_6(actor, npc)
   return db.actor:object("wpn_rg-6")
end

function actor_have_rpg7(actor, npc)
   return db.actor:object("wpn_rpg7")
end

function actor_have_g36(actor, npc)
   return db.actor:object("wpn_g36")
end

function actor_have_fn2000(actor, npc)
   return db.actor:object("wpn_fn2000")
end

function actor_have_pkm(actor, npc)
   return db.actor:object("wpn_pkm")
end

function actor_have_gauss(actor, npc)
   return db.actor:object("wpn_gauss")
end

function actor_have_sig550_luckygun(actor, npc)
   return db.actor:object("wpn_sig550_luckygun")
end

function actor_have_pkm_zulus(actor, npc)
   return db.actor:object("wpn_pkm_zulus")
end

function actor_have_wincheaster1300_trapper(actor, npc)
   return db.actor:object("wpn_wincheaster1300_trapper")
end

function actor_have_groza_nimble(actor, npc)
   return db.actor:object("wpn_groza_nimble")
end

function actor_have_mp5_nimble(actor, npc)
   return db.actor:object("wpn_mp5_nimble")
end

function actor_have_spas12_nimble(actor, npc)
   return db.actor:object("wpn_spas12_nimble")
end

function actor_have_svd_nimble(actor, npc)
   return db.actor:object("wpn_svd_nimble")
end

function actor_have_svu_nimble(actor, npc)
   return db.actor:object("wpn_svu_nimble")
end

function actor_have_vintorez_nimble(actor, npc)
   return db.actor:object("wpn_vintorez_nimble")
end

function actor_have_g36_nimble(actor, npc)
   return db.actor:object("wpn_g36_nimble")
end

function actor_have_fn2000_nimble(actor, npc)
   return db.actor:object("wpn_fn2000_nimble")
end

function actor_have_protecta_nimble(actor, npc)
   return db.actor:object("wpn_protecta_nimble")
end

function actor_have_ak74u_snag(actor, npc)
   return db.actor:object("wpn_ak74u_snag")
end

function actor_have_abakan_m1(actor, npc)
   return db.actor:object("wpn_abakan_m1")
end

function actor_have_abakan_m2(actor, npc)
   return db.actor:object("wpn_abakan_m2")
end

function actor_have_abakan_m3(actor, npc)
   return db.actor:object("wpn_abakan_m3")
end

function actor_have_ak74u_m1(actor, npc)
   return db.actor:object("wpn_ak74u_m1")
end

function actor_have_ak74u_m2(actor, npc)
   return db.actor:object("wpn_ak74u_m2")
end

function actor_have_ak74u_m3(actor, npc)
   return db.actor:object("wpn_ak74u_m3")
end

function actor_have_ak74_m1(actor, npc)
   return db.actor:object("wpn_ak74_m1")
end

function actor_have_ak74_m2(actor, npc)
   return db.actor:object("wpn_ak74_m2")
end

function actor_have_ak74_m3(actor, npc)
   return db.actor:object("wpn_ak74_m3")
end

function actor_have_bm16_m1(actor, npc)
   return db.actor:object("wpn_bm16_m1")
end

function actor_have_bm16_m2(actor, npc)
   return db.actor:object("wpn_bm16_m2")
end

function actor_have_bm16_m3(actor, npc)
   return db.actor:object("wpn_bm16_m3")
end

function actor_have_sig550_m1(actor, npc)
   return db.actor:object("wpn_sig550_m1")
end

function actor_have_sig550_m2(actor, npc)
   return db.actor:object("wpn_sig550_m2")
end

function actor_have_sig550_m3(actor, npc)
   return db.actor:object("wpn_sig550_m3")
end

function actor_have_spas12_m1(actor, npc)
   return db.actor:object("wpn_spas12_m1")
end

function actor_have_spas12_m2(actor, npc)
   return db.actor:object("wpn_spas12_m2")
end

function actor_have_spas12_m3(actor, npc)
   return db.actor:object("wpn_spas12_m3")
end

function actor_have_groza_m1(actor, npc)
   return db.actor:object("wpn_groza_m1")
end

function actor_have_groza_m2(actor, npc)
   return db.actor:object("wpn_groza_m2")
end

function actor_have_groza_m3(actor, npc)
   return db.actor:object("wpn_groza_m3")
end

function actor_have_lr300_m1(actor, npc)
   return db.actor:object("wpn_lr300_m1")
end

function actor_have_lr300_m2(actor, npc)
   return db.actor:object("wpn_lr300_m2")
end

function actor_have_lr300_m3(actor, npc)
   return db.actor:object("wpn_lr300_m3")
end

function actor_have_mp5_m1(actor, npc)
   return db.actor:object("wpn_mp5_m1")
end

function actor_have_mp5_m2(actor, npc)
   return db.actor:object("wpn_mp5_m2")
end

function actor_have_mp5_m3(actor, npc)
   return db.actor:object("wpn_mp5_m3")
end

function actor_have_toz34_m1(actor, npc)
   return db.actor:object("wpn_toz34_m1")
end

function actor_have_toz34_m2(actor, npc)
   return db.actor:object("wpn_toz34_m2")
end

function actor_have_toz34_m3(actor, npc)
   return db.actor:object("wpn_toz34_m3")
end

function actor_have_vintorez_m1(actor, npc)
   return db.actor:object("wpn_vintorez_m1")
end

function actor_have_vintorez_m2(actor, npc)
   return db.actor:object("wpn_vintorez_m2")
end

function actor_have_vintorez_m3(actor, npc)
   return db.actor:object("wpn_vintorez_m3")
end

function actor_have_wincheaster1300_m1(actor, npc)
   return db.actor:object("wpn_wincheaster1300_m1")
end

function actor_have_wincheaster1300_m2(actor, npc)
   return db.actor:object("wpn_wincheaster1300_m2")
end

function actor_have_wincheaster1300_m3(actor, npc)
   return db.actor:object("wpn_wincheaster1300_m3")
end

--/
function actor_sent_bodyguard(npc, slot, item)
   release_old_weapon(npc, slot)
   relocate_weapon_to_bodyguard(npc, item, "out")
   if slot == 2 then
      write_obj_mod_param(npc, "issued_pistol_weapon", item)
   elseif slot == 3 then
      write_obj_mod_param(npc, "issued_rifle_weapon", item)
   end
end

function actor_give_pm(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_pm")
end

function actor_give_pb(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_pb")
end

function actor_give_fort(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_fort")
end

function actor_give_hpsa(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_hpsa")
end

function actor_give_beretta(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_beretta")
end

function actor_give_walther(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_walther")
end

function actor_give_sig220(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_sig220")
end

function actor_give_colt1911(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_colt1911")
end

function actor_give_usp(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_usp")
end

function actor_give_desert_eagle(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_desert_eagle")
end

function actor_give_pm_actor(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_pm_actor")
end

function actor_give_desert_eagle_nimble(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_desert_eagle_nimble")
end

function actor_give_sig220_nimble(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_sig220_nimble")
end

function actor_give_usp_nimble(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_usp_nimble")
end

function actor_give_fort_snag(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_fort_snag")
end

function actor_give_fort_actor(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_fort_actor")
end

function actor_give_beretta_m1(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_beretta_m1")
end

function actor_give_beretta_m2(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_beretta_m2")
end

function actor_give_beretta_m3(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_beretta_m3")
end

function actor_give_fort_m1(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_fort_m1")
end

function actor_give_fort_m2(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_fort_m2")
end

function actor_give_fort_m3(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_fort_m3")
end

function actor_give_pm_m1(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_pm_m1")
end

function actor_give_pm_m2(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_pm_m2")
end

function actor_give_pm_m3(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_pm_m3")
end

function actor_give_sig220_m1(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_sig220_m1")
end

function actor_give_sig220_m2(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_sig220_m2")
end

function actor_give_sig220_m3(actor, npc)
   actor_sent_bodyguard(npc, 2, "wpn_sig220_m3")
end

---
function actor_give_bm16(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_bm16")
end

function actor_give_toz34(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_toz34")
end

function actor_give_wincheaster1300(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_wincheaster1300")
end

function actor_give_spas12(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_spas12")
end

function actor_give_protecta(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_protecta")
end

function actor_give_ak74u(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_ak74u")
end

function actor_give_mp5(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_mp5")
end

function actor_give_ak74(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_ak74")
end

function actor_give_abakan(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_abakan")
end

function actor_give_l85(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_l85")
end

function actor_give_lr300(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_lr300")
end

function actor_give_sig550(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_sig550")
end

function actor_give_groza(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_groza")
end

function actor_give_val(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_val")
end

function actor_give_vintorez(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_vintorez")
end

function actor_give_svu(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_svu")
end

function actor_give_svd(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_svd")
end

function actor_give_rg_6(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_rg-6")
end

function actor_give_rpg7(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_rpg7")
end

function actor_give_g36(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_g36")
end

function actor_give_fn2000(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_fn2000")
end

function actor_give_pkm(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_pkm")
end

function actor_give_gauss(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_gauss")
end

function actor_give_sig550_luckygun(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_sig550_luckygun")
end

function actor_give_pkm_zulus(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_pkm_zulus")
end

function actor_give_wincheaster1300_trapper(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_wincheaster1300_trapper")
end

function actor_give_groza_nimble(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_groza_nimble")
end

function actor_give_mp5_nimble(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_mp5_nimble")
end

function actor_give_spas12_nimble(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_spas12_nimble")
end

function actor_give_svd_nimble(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_svd_nimble")
end

function actor_give_svu_nimble(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_svu_nimble")
end

function actor_give_vintorez_nimble(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_vintorez_nimble")
end

function actor_give_g36_nimble(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_g36_nimble")
end

function actor_give_fn2000_nimble(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_fn2000_nimble")
end

function actor_give_protecta_nimble(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_protecta_nimble")
end

function actor_give_ak74u_snag(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_ak74u_snag")
end

function actor_give_abakan_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_abakan_m1")
end

function actor_give_abakan_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_abakan_m2")
end

function actor_give_abakan_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_abakan_m3")
end

function actor_give_ak74u_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_ak74u_m1")
end

function actor_give_ak74u_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_ak74u_m2")
end

function actor_give_ak74u_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_ak74u_m3")
end

function actor_give_ak74_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_ak74_m1")
end

function actor_give_ak74_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_ak74_m2")
end

function actor_give_ak74_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_ak74_m3")
end

function actor_give_bm16_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_bm16_m1")
end

function actor_give_bm16_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_bm16_m2")
end

function actor_give_bm16_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_bm16_m3")
end

function actor_give_sig550_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_sig550_m1")
end

function actor_give_sig550_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_sig550_m2")
end

function actor_give_sig550_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_sig550_m3")
end

function actor_give_spas12_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_spas12_m1")
end

function actor_give_spas12_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_spas12_m2")
end

function actor_give_spas12_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_spas12_m3")
end

function actor_give_groza_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_groza_m1")
end

function actor_give_groza_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_groza_m2")
end

function actor_give_groza_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_groza_m3")
end

function actor_give_lr300_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_lr300_m1")
end

function actor_give_lr300_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_lr300_m2")
end

function actor_give_lr300_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_lr300_m3")
end

function actor_give_mp5_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_mp5_m1")
end

function actor_give_mp5_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_mp5_m2")
end

function actor_give_mp5_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_mp5_m3")
end

function actor_give_toz34_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_toz34_m1")
end

function actor_give_toz34_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_toz34_m2")
end

function actor_give_toz34_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_toz34_m3")
end

function actor_give_vintorez_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_vintorez_m1")
end

function actor_give_vintorez_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_vintorez_m2")
end

function actor_give_vintorez_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_vintorez_m3")
end

function actor_give_wincheaster1300_m1(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_wincheaster1300_m1")
end

function actor_give_wincheaster1300_m2(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_wincheaster1300_m2")
end

function actor_give_wincheaster1300_m3(actor, npc)
   actor_sent_bodyguard(npc, 3, "wpn_wincheaster1300_m3")
end

--/
function actor_have_medkit(actor, npc)
   return db.actor:object("medkit")
end

function actor_have_medkit_army(actor, npc)
   return db.actor:object("medkit_army")
end

function actor_have_medkit_scientic(actor, npc)
   return db.actor:object("medkit_scientic")
end

function actor_have_medkit_elite(actor, npc)
   return db.actor:object("medkit_elite")
end

function actor_give_medkit(actor, npc)
   dialogs.relocate_item_section(npc, "medkit", "out")
   write_obj_mod_param(npc, "issued_medkit", "medkit")
end

function actor_give_medkit_army(actor, npc)
   dialogs.relocate_item_section(npc, "medkit_army", "out")
   write_obj_mod_param(npc, "issued_medkit", "medkit_army")
end

function actor_give_medkit_scientic(actor, npc)
   dialogs.relocate_item_section(npc, "medkit_scientic", "out")
   write_obj_mod_param(npc, "issued_medkit", "medkit_scientic")
end

function actor_give_medkit_elite(actor, npc)
   dialogs.relocate_item_section(npc, "medkit_elite", "out")
   write_obj_mod_param(npc, "issued_medkit", "medkit_elite")
end

------------------------------------------------------------------------------
--                  Сыч: продажа информации об инструментах                 --
------------------------------------------------------------------------------
local toolkit_1_cost = 10000
local toolkit_2_cost = 20000
local toolkit_3_cost = 30000
local toolkit_4_cost = 25000
local toolkit_5_cost = 40000
local toolkit_1_counter = 0
local toolkit_2_counter = 0
local toolkit_3_counter = 0
local toolkit_4_counter = 0
local toolkit_5_counter = 0
function pre_remained_any_toolkits(actor, npc)
   toolkit_1_counter = 0
   toolkit_2_counter = 0
   toolkit_3_counter = 0
   toolkit_4_counter = 0
   toolkit_5_counter = 0
   for a = 1, 65534 do
      local obj = alife():object(a)
      if obj then
         if obj:section_name() ~= nil and sgm_g.find_in_string(obj:section_name(), "toolkit_1") and find_out_string(obj:section_name(), "signaller") and level.map_has_object_spot(obj.id, sgm_flags.spot_toolkit_place) == 0 and (level.object_by_id(obj.id) == nil or level.object_by_id(obj.id):parent() == nil) then
            toolkit_1_counter = toolkit_1_counter + 1
         elseif obj:section_name() ~= nil and sgm_g.find_in_string(obj:section_name(), "toolkit_2") and find_out_string(obj:section_name(), "signaller") and level.map_has_object_spot(obj.id, sgm_flags.spot_toolkit_place) == 0 and (level.object_by_id(obj.id) == nil or level.object_by_id(obj.id):parent() == nil) then
            toolkit_2_counter = toolkit_2_counter + 1
         elseif obj:section_name() ~= nil and sgm_g.find_in_string(obj:section_name(), "toolkit_3") and find_out_string(obj:section_name(), "signaller") and level.map_has_object_spot(obj.id, sgm_flags.spot_toolkit_place) == 0 and (level.object_by_id(obj.id) == nil or level.object_by_id(obj.id):parent() == nil) then
            toolkit_3_counter = toolkit_3_counter + 1
         elseif obj:section_name() ~= nil and sgm_g.find_in_string(obj:section_name(), "signaller_toolkit_1") and level.map_has_object_spot(obj.id, sgm_flags.spot_toolkit_place) == 0 and (level.object_by_id(obj.id) == nil or level.object_by_id(obj.id):parent() == nil) then
            toolkit_4_counter = toolkit_4_counter + 1
         elseif obj:section_name() ~= nil and sgm_g.find_in_string(obj:section_name(), "signaller_toolkit_2") and level.map_has_object_spot(obj.id, sgm_flags.spot_toolkit_place) == 0 and (level.object_by_id(obj.id) == nil or level.object_by_id(obj.id):parent() == nil) then
            toolkit_5_counter = toolkit_5_counter + 1
         end
      end
   end
   return sgm_g.has_any_info("zat_a2_mechanic_toolkit_search,jup_b217_tech_instruments_start") and
       (toolkit_1_counter > 0 or toolkit_2_counter > 0 or toolkit_3_counter > 0 or (has_alife_info("actor_come_to_pripyat") and (toolkit_4_counter > 0 or toolkit_5_counter > 0)))
end

function pre_remained_toolkit_1(actor, npc)
   return toolkit_1_counter > 0
end

function pre_remained_toolkit_2(actor, npc)
   return toolkit_2_counter > 0
end

function pre_remained_toolkit_3(actor, npc)
   return toolkit_3_counter > 0
end

function pre_remained_toolkit_4(actor, npc)
   return toolkit_4_counter > 0 and has_alife_info("actor_come_to_pripyat")
end

function pre_remained_toolkit_5(actor, npc)
   return toolkit_5_counter > 0 and has_alife_info("actor_come_to_pripyat")
end

function pre_exhausted_toolkit_1(actor, npc)
   return toolkit_1_counter <= 0
end

function pre_exhausted_toolkit_2(actor, npc)
   return toolkit_2_counter <= 0
end

function pre_exhausted_toolkit_3(actor, npc)
   return toolkit_3_counter <= 0
end

function pre_exhausted_toolkit_4(actor, npc)
   return toolkit_4_counter <= 0 and has_alife_info("actor_come_to_pripyat")
end

function pre_exhausted_toolkit_5(actor, npc)
   return toolkit_5_counter <= 0 and has_alife_info("actor_come_to_pripyat")
end

function has_money_on_toolkit_1(actor, npc)
   return db.actor:money() >= toolkit_1_cost
end

function has_money_on_toolkit_2(actor, npc)
   return db.actor:money() >= toolkit_2_cost
end

function has_money_on_toolkit_3(actor, npc)
   return db.actor:money() >= toolkit_3_cost
end

function has_money_on_toolkit_4(actor, npc)
   return db.actor:money() >= toolkit_4_cost
end

function has_money_on_toolkit_5(actor, npc)
   return db.actor:money() >= toolkit_5_cost
end

function not_money_on_toolkit_1(actor, npc)
   return db.actor:money() < toolkit_1_cost
end

function not_money_on_toolkit_2(actor, npc)
   return db.actor:money() < toolkit_2_cost
end

function not_money_on_toolkit_3(actor, npc)
   return db.actor:money() < toolkit_3_cost
end

function not_money_on_toolkit_4(actor, npc)
   return db.actor:money() < toolkit_4_cost
end

function not_money_on_toolkit_5(actor, npc)
   return db.actor:money() < toolkit_5_cost
end

function give_money_on_toolkit_1(actor, npc)
   dialogs.relocate_money(npc, toolkit_1_cost, "out")
end

function give_money_on_toolkit_2(actor, npc)
   dialogs.relocate_money(npc, toolkit_2_cost, "out")
end

function give_money_on_toolkit_3(actor, npc)
   dialogs.relocate_money(npc, toolkit_3_cost, "out")
end

function give_money_on_toolkit_4(actor, npc)
   dialogs.relocate_money(npc, toolkit_4_cost, "out")
end

function give_money_on_toolkit_5(actor, npc)
   dialogs.relocate_money(npc, toolkit_5_cost, "out")
end

function reveal_toolkit(section, new)
   local reveal_step = 0
   local toolkit_level = "zaton"
   for a = 1, 65534 do
      local obj = alife():object(a)
      if obj and reveal_step == 0 then
         if obj:section_name() ~= nil and sgm_g.find_in_string(obj:section_name(), section) and ((new == false and find_out_string(obj:section_name(), "signaller")) or new == true) and level.map_has_object_spot(obj.id, sgm_flags.spot_toolkit_place) == 0 and (level.object_by_id(obj.id) == nil or level.object_by_id(obj.id):parent() == nil) then
            if new == true then
               sgm_g.add_spot_on_map(obj.id, sgm_flags.spot_toolkit_place, "st_military_instruments_name")
            else
               sgm_g.add_spot_on_map(obj.id, sgm_flags.spot_toolkit_place, "st_simply_instruments_name")
            end
            toolkit_level = get_level_by_game_vertex(obj.m_game_vertex_id)
            reveal_step = 1
         end
      end
   end
   if toolkit_level == "zaton" then
      news_manager.send_tip(db.actor, "st_reveal_toolkit_zaton_descr", 0, "information_dealer", 3500, nil,
         "st_from_pda_title")
   elseif toolkit_level == "jupiter" then
      news_manager.send_tip(db.actor, "st_reveal_toolkit_jupiter_descr", 0, "information_dealer", 3500, nil,
         "st_from_pda_title")
   elseif toolkit_level == "pripyat" then
      news_manager.send_tip(db.actor, "st_reveal_toolkit_pripyat_descr", 0, "information_dealer", 3500, nil,
         "st_from_pda_title")
   end
   reveal_step = 0
end

function reveal_one_toolkit_1(actor, npc)
   reveal_toolkit("toolkit_1", false)
end

function reveal_one_toolkit_2(actor, npc)
   reveal_toolkit("toolkit_2", false)
end

function reveal_one_toolkit_3(actor, npc)
   reveal_toolkit("toolkit_3", false)
end

function reveal_one_toolkit_4(actor, npc)
   reveal_toolkit("signaller_toolkit_1", true)
end

function reveal_one_toolkit_5(actor, npc)
   reveal_toolkit("signaller_toolkit_2", true)
end

------------------------------------------------------------------------------
--      Проводники: доставка вещей в личные ящики на других локациях        --
------------------------------------------------------------------------------
--/НЕ РАБОТАЕТ/--
local actor_box_weight = 0.0
local guide_cost_factor = 50
function show_actor_box_weight_tip(actor, npc)
   db.actor:give_talk_message2("", game.translate_string("st_actor_box_currert_weight") .. " " .. actor_box_weight,
      "ui_inGame2_Mp3_player", "iconed_answer_item")
end

function show_actor_box_weight_and_cost_tip(actor, npc)
   db.actor:give_talk_message2("",
      game.translate_string("st_actor_box_currert_mass") ..
      " " ..
      actor_box_weight ..
      game.translate_string("st_actor_box_transportation_cost") .. " " .. calculate_weight_cost(actor_box_weight),
      "ui_inGame2_Mp3_player", "iconed_answer_item")
end

function set_actor_box_weight(actor, npc)
   local level_name = level.name()
   if level_name == "zaton" then
      actor_box_weight = get_actor_box_items_weight(get_story_object("zat_a2_actor_treasure"))
   elseif level_name == "jupiter" then
      actor_box_weight = get_actor_box_items_weight(get_story_object("jup_b202_actor_treasure"))
   elseif level_name == "pripyat" then
      actor_box_weight = get_actor_box_items_weight(get_story_object("pri_a16_actor_treasure"))
   end
end

function set_guide_factor_to_25(actor, npc)
   guide_cost_factor = 25
end

function set_guide_factor_to_50(actor, npc)
   guide_cost_factor = 50
end

function set_guide_factor_to_75(actor, npc)
   guide_cost_factor = 75
end

function set_guide_factor_to_100(actor, npc)
   guide_cost_factor = 100
end

function set_guide_factor_to_200(actor, npc)
   guide_cost_factor = 200
end

function actor_box_has_items(actor, npc)
   return actor_box_weight > 0
end

function actor_box_not_items(actor, npc)
   return actor_box_weight <= 0
end

function get_actor_box_items_weight(box)
   local weight = 0.0
   local function calc(temp, item)
      if item ~= nil and item:section() ~= nil then
         weight = weight + sgm_functions.ReadItemWeight(item:section()) * item:condition()
      end
   end
   box:iterate_inventory_box(calc, box)
   return math.floor(weight)
end

function calculate_weight_cost(weight_value)
   return weight_value * guide_cost_factor
end

function special_give_to_sid(item_name, sid, need_cond)
   local sobj
   if get_story_object_id(sid) ~= nil then
      sobj = alife():create(item_name, vector(), 0, 0, get_story_object_id(sid))
   end
end

function inv_box_delivery_to(box_sid, target_sid)
   local parent_box = get_story_object(box_sid)
   local children_box = get_story_object(target_sid)
   if parent_box ~= nil then
      local function calc(temp, item)
         if item ~= nil and item:section() ~= nil then
            --/parent_box:transfer_item(item,children_box) --/Не катит!!! Даже с get_story_object() обьект на другой локации не может получить предмет, та же история и с level.object_by_id().
            special_give_to_sid(item:section(), target_sid, item:condition())
            alife():release(alife():object(item:id()), true)
         end
      end
      parent_box:iterate_inventory_box(calc, parent_box)
   end
end

function actor_box_delivery_has_money(actor, npc)
   return db.actor:money() >= calculate_weight_cost(actor_box_weight)
end

function actor_box_delivery_not_money(actor, npc)
   return db.actor:money() < calculate_weight_cost(actor_box_weight)
end

function actor_box_delivery_give_money(actor, npc)
   dialogs.relocate_money(npc, calculate_weight_cost(actor_box_weight), "out")
end

function convert_actor_box_from_zaton_to_jupiter(actor, npc)
   inv_box_delivery_to("zat_a2_actor_treasure", "jup_b202_actor_treasure")
end

function convert_actor_box_from_zaton_to_pripyat(actor, npc)
   inv_box_delivery_to("zat_a2_actor_treasure", "pri_a16_actor_treasure")
end

function convert_actor_box_from_jupiter_to_zaton(actor, npc)
   inv_box_delivery_to("jup_b202_actor_treasure", "zat_a2_actor_treasure")
end

function convert_actor_box_from_jupiter_to_pripyat(actor, npc)
   inv_box_delivery_to("jup_b202_actor_treasure", "pri_a16_actor_treasure")
end

function convert_actor_box_from_pripyat_to_zaton(actor, npc)
   inv_box_delivery_to("pri_a16_actor_treasure", "zat_a2_actor_treasure")
end

function convert_actor_box_from_pripyat_to_jupiter(actor, npc)
   inv_box_delivery_to("pri_a16_actor_treasure", "jup_b202_actor_treasure")
end

------------------------------------------------------------------------------
--                         Сыч: продажа тайников                            --
------------------------------------------------------------------------------
web_money_treasure_level = level.name()
function web_money_treasure_select_zaton(actor, npc)
   web_money_treasure_level = "zaton"
end

function web_money_treasure_select_jupiter(actor, npc)
   web_money_treasure_level = "jupiter"
end

function web_money_treasure_select_pripyat(actor, npc)
   web_money_treasure_level = "pripyat"
end

function web_money_treasure_select_escape(actor, npc)
   web_money_treasure_level = "escape"
end

function web_money_treasure_select_marsh(actor, npc)
   web_money_treasure_level = "marsh"
end

function web_money_treasure_select_agroprom(actor, npc)
   web_money_treasure_level = "agroprom"
end

function web_money_treasure_select_red_forest(actor, npc)
   web_money_treasure_level = "red_forest"
end

function web_money_treasure_select_darkvalley(actor, npc)
   web_money_treasure_level = "darkvalley"
end

function web_money_treasure_select_military(actor, npc)
   web_money_treasure_level = "military"
end

function actor_have_web_money_to_1_treasure(actor, npc)
   return sgm_g.get_web_money() >= 1000
end

function actor_give_web_money_to_1_treasure(actor, npc)
   sgm_functions.relocate_web_money(1000, "out")
   sgm_g.give_random_treasure(web_money_treasure_level, 1)
end

function actor_have_web_money_to_2_treasure(actor, npc)
   return sgm_g.get_web_money() >= 2000
end

function actor_give_web_money_to_2_treasure(actor, npc)
   sgm_functions.relocate_web_money(2000, "out")
   sgm_g.give_random_treasure(web_money_treasure_level, 2)
end

function actor_have_web_money_to_3_treasure(actor, npc)
   return sgm_g.get_web_money() >= 3000
end

function actor_give_web_money_to_3_treasure(actor, npc)
   sgm_functions.relocate_web_money(3000, "out")
   sgm_g.give_random_treasure(web_money_treasure_level, 3)
end

function actor_have_web_money_to_4_treasure(actor, npc)
   return sgm_g.get_web_money() >= 4000
end

function actor_give_web_money_to_4_treasure(actor, npc)
   sgm_functions.relocate_web_money(4000, "out")
   sgm_g.give_random_treasure(web_money_treasure_level, 4)
end

function actor_have_web_money_to_5_treasure(actor, npc)
   return sgm_g.get_web_money() >= 5000
end

function actor_give_web_money_to_5_treasure(actor, npc)
   sgm_functions.relocate_web_money(5000, "out")
   sgm_g.give_random_treasure(web_money_treasure_level, 5)
end

function actor_have_web_money_to_6_treasure(actor, npc)
   return sgm_g.get_web_money() >= 6000
end

function actor_give_web_money_to_6_treasure(actor, npc)
   sgm_functions.relocate_web_money(6000, "out")
   sgm_g.give_random_treasure(web_money_treasure_level, 6)
end

function actor_have_web_money_to_7_treasure(actor, npc)
   return sgm_g.get_web_money() >= 7000
end

function actor_give_web_money_to_7_treasure(actor, npc)
   sgm_functions.relocate_web_money(7000, "out")
   sgm_g.give_random_treasure(web_money_treasure_level, 7)
end

function actor_have_web_money_to_8_treasure(actor, npc)
   return sgm_g.get_web_money() >= 8000
end

function actor_give_web_money_to_8_treasure(actor, npc)
   sgm_functions.relocate_web_money(8000, "out")
   sgm_g.give_random_treasure(web_money_treasure_level, 8)
end

function actor_less_web_money_to_treasure(actor, npc)
   return sgm_g.get_web_money() < 1000
end

------------------------------------------------------------------------------
--                    Герман: покупка неизвестных образцов                  --
------------------------------------------------------------------------------
local german_reward = 0
local german_sample_cost = 5000
function german_sample_is_retail(actor, npc)
   return not sgm_g.check_item_count("_danger", 2, true)
end

function german_sample_is_gross(actor, npc)
   return sgm_g.check_item_count("_danger", 2, true)
end

function german_sample_anyhas(actor, npc)
   local result = false
   for i = 1, 6 do
      if db.actor:object("af_prodigy_" .. i .. "_danger") then
         result = true
      end
   end
   if sgm_g.dont_has_alife_info("jup_search_anomal_prototype_gather_allowed") then
      result = false
   end
   return result
end

function german_bring_finded_sample(actor, npc)
   german_reward = 0
   for i = 1, 6 do
      local sample_count = get_item_count("af_prodigy_" .. i .. "_danger")
      if sample_count > 0 then
         german_reward = german_reward + german_sample_cost * sample_count
         dialogs.relocate_item_section_from_actor(actor, npc, "af_prodigy_" .. i .. "_danger", "all")
      end
   end
end

function german_reward_money_for_sample(actor, npc)
   dialogs.relocate_money(npc, german_reward, "in")
end

------------------------------------------------------------------------------
--                        Работодатель: выдача заданий                      --
------------------------------------------------------------------------------
local kill_stalker_ammo_reward = {
   cell_1 = "ammo_9x18_pmm,2",
   cell_2 = "ammo_9x19_pbp,2",
   cell_3 = "ammo_11.43x23_hydro,2",
   cell_4 = "ammo_12x70_buck, ammo_12x76_zhekan",
   cell_5 = "ammo_5.45x39_fmj, ammo_5.45x39_ap",
   cell_6 = "ammo_9x39_ap,2",
   cell_7 = "ammo_5.56x45_ss190, ammo_5.56x45_ap",
   cell_8 = "ammo_7.62x54_7h1",
   cell_9 = "grenade_f1, grenade_rgd5",
   cell_10 = "grenade_gd-05, grenade_gd-05_lighting"
}
function give_kill_stalker_reward()
   local cell_selected = math.random(1, 10)
   local cell_line = "cell_" .. cell_selected
   if kill_stalker_ammo_reward[cell_line] ~= nil then
      local get_contain = kill_stalker_ammo_reward[cell_line]
      give_objects_to_actor(get_contain, true)
   end
end

function employer_setup(actor, npc)
   local get_npc = who_is_npc(actor, npc)
   local npc_profile = get_npc:profile_name()
   local random_quest = math.random(1, 4)
   local random_type = math.random(1, 2)
   local employer_type = "find_item"
   if random_type == 1 then
      employer_type = "find_item"
   elseif random_type == 2 then
      employer_type = "kill_stalker"
   end
   local employer_quest
   if npc_profile == "esc_stalker_employer" then
      random_quest = math.random(1, 3)
      employer_quest = "esc_employer_" .. employer_type .. "_" .. random_quest
   elseif npc_profile == "zat_stalker_employer" then
      random_quest = math.random(1, 4)
      employer_quest = "zat_employer_" .. employer_type .. "_" .. random_quest
   elseif npc_profile == "jup_dolg_employer" then
      random_quest = math.random(1, 4)
      employer_quest = "jup_employer_" .. employer_type .. "_" .. random_quest
   elseif npc_profile == "pri_army_employer" then
      random_quest = math.random(1, 4)
      employer_quest = "pri_employer_" .. employer_type .. "_" .. random_quest
   elseif npc_profile == "val_b2_employer" then
      random_quest = math.random(1, 4)
      employer_quest = "val_employer_" .. employer_type .. "_" .. random_quest
   elseif npc_profile == "mil_b7_employer" then
      random_quest = math.random(1, 4)
      employer_quest = "mil_employer_" .. employer_type .. "_" .. random_quest
   end
   local employer_target = sgm_g.read_string(employer_quest, "employer_target", "misc\\tasks\\tm_employer.ltx")
   sgm_g.write_mod_param("employer_currert_quest", employer_quest)
   sgm_g.write_mod_param("employer_currert_target", employer_target)
   sgm_g.write_mod_param("employer_currert_type", employer_type)
end

function employer_deliver_quest(actor, npc)
   local ini = ini_file("misc\\tasks\\tm_employer.ltx")
   local random_place = math.random(1, 3)
   local currert_place = sgm_functions.check_section_comma(ini, sgm_g.read_mod_param("employer_currert_quest"),
      "employer_place_" .. random_place, nil, 5)
   --/create_inventory_item(sgm_g.read_mod_param("employer_currert_target"),"default_inventory_box",tonumber(currert_place[1]),tonumber(currert_place[2]),tonumber(currert_place[3]),tonumber(currert_place[4]),tonumber(currert_place[5]))
   sgm_g.create(sgm_g.read_mod_param("employer_currert_target"), tonumber(currert_place[1]), tonumber(currert_place[2]),
      tonumber(currert_place[3]), tonumber(currert_place[4]), tonumber(currert_place[5]))
   sgm_g.write_mod_param("employer_activate", "true")
   local distance_to_target = db.actor:position():distance_to(
      vector():set(tonumber(currert_place[1]), tonumber(currert_place[2]), tonumber(currert_place[3])),
      tonumber(currert_place[4]), tonumber(currert_place[5]))
   sgm_g.write_mod_param("employer_currert_distance", math.floor(distance_to_target))
   sgm_g.add_task(sgm_g.read_mod_param("employer_currert_quest"))
end

function employer_is_activated(actor, npc)
   return sgm_g.read_mod_param("employer_activate") == "true"
end

function employer_is_deactivated(actor, npc)
   return sgm_g.read_mod_param("employer_activate") == "false"
end

function employer_item_is_found(actor, npc)
   return db.actor:object(sgm_g.read_mod_param("employer_currert_target"))
end

function employer_item_is_not_found(actor, npc)
   return not db.actor:object(sgm_g.read_mod_param("employer_currert_target"))
end

function employer_target_is_killed(actor, npc)
   local target_sid_id = get_story_object_id(sgm_g.read_mod_param("employer_currert_target"))
   local target_subbject = alife():object(target_sid_id)
   return target_subbject:alive() == false
end

function employer_target_is_not_killed(actor, npc)
   local target_sid_id = get_story_object_id(sgm_g.read_mod_param("employer_currert_target"))
   local target_subbject = alife():object(target_sid_id)
   return target_subbject:alive() == true
end

function employer_type_is_find_item(actor, npc)
   return sgm_g.read_mod_param("employer_currert_type") == "find_item"
end

function employer_type_is_kill_stalker(actor, npc)
   return sgm_g.read_mod_param("employer_currert_type") == "kill_stalker"
end

function employer_available(actor, npc)
   return check_game_timer("employer_break_timer") == nil or check_game_timer("employer_break_timer")
end

function employer_dont_available(actor, npc)
   return check_game_timer("employer_break_timer") == false
end

function employer_bring_item(actor, npc)
   dialogs.relocate_item_section(npc, sgm_g.read_mod_param("employer_currert_target"), "out")
end

function employer_sgm_g.give_reward(actor, npc)
   local get_npc = who_is_npc(actor, npc)
   local npc_profile = get_npc:profile_name()
   local t_remained_value = check_game_timer("timer_quest_" .. sgm_g.read_mod_param("employer_currert_quest"), true) -
       get_general_game_time()
   local reward_main = 500
   local reward_bonus = 0
   local break_timer = 30
   if npc_profile == "esc_stalker_employer" then
      break_timer = 90
      reward_main = sgm_g.read_mod_param("employer_currert_distance") * 2
      if t_remained_value > 0 then
         reward_bonus = t_remained_value * 70
      end
   elseif npc_profile == "zat_stalker_employer" then
      break_timer = 30
      reward_main = sgm_g.read_mod_param("employer_currert_distance") * 6
      if t_remained_value > 0 then
         reward_bonus = t_remained_value * 70
      end
   elseif npc_profile == "jup_dolg_employer" then
      break_timer = 30
      reward_main = sgm_g.read_mod_param("employer_currert_distance") * 6
      if t_remained_value > 0 then
         reward_bonus = t_remained_value * 80
      end
   elseif npc_profile == "pri_army_employer" then
      break_timer = 30
      reward_main = sgm_g.read_mod_param("employer_currert_distance") * 5
      if t_remained_value > 0 then
         reward_bonus = t_remained_value * 90
      end
   elseif npc_profile == "val_b2_employer" then
      break_timer = 30
      reward_main = sgm_g.read_mod_param("employer_currert_distance") * 7
      if t_remained_value > 0 then
         reward_bonus = t_remained_value * 100
      end
   elseif npc_profile == "mil_b7_employer" then
      break_timer = 30
      reward_main = sgm_g.read_mod_param("employer_currert_distance") * 6
      if t_remained_value > 0 then
         reward_bonus = t_remained_value * 100
      end
   end
   if sgm_g.read_mod_param("employer_currert_type") == "kill_stalker" then
      if npc_profile == "esc_stalker_employer" then
         reward_bonus = reward_bonus + 500
      elseif npc_profile == "zat_stalker_employer" then
         reward_bonus = reward_bonus + 1000
      elseif npc_profile == "jup_dolg_employer" then
         reward_bonus = reward_bonus + 1000
      elseif npc_profile == "pri_army_employer" then
         reward_bonus = reward_bonus + 1000
      elseif npc_profile == "val_b2_employer" then
         reward_bonus = reward_bonus + 1100
      elseif npc_profile == "mil_b7_employer" then
         reward_bonus = reward_bonus + 1500
      end
      give_kill_stalker_reward()
   end
   local calculate_reward = reward_main + reward_bonus
   dialogs.relocate_money(npc, math.floor(calculate_reward), "in")
   give_info("employer_" .. sgm_g.read_mod_param("employer_currert_type") .. "_reward")
   sgm_g.start_game_timer("employer_break_timer", break_timer)
end

-------------------------------------------------makdm

function red_geyger_respawn()
   sgm_g.release_objects_by_section("geiger_counter")
   sgm_g.create("geiger_counter", 14.9601459503174, 4.22950077056885, 35.063549041748, 74235, 2186)
end

function set_smart_clear(smart_name)
   xr_effects.clear_smart_terrain(db.actor, nil, { smart_name })
end

function fix_red_forest()
   set_smart_clear("red_monster_burrow_1")
   set_smart_clear("red_monster_burrow_3")
   set_smart_clear("red_monster_burrow_7")
   set_smart_clear("red_monster_burrow_8")
   set_smart_clear("red_monster_burrow_4")
   set_smart_clear("red_monster_burrow_6")
   set_squad_removed("red_simulation_bloodsucker_nightmare")
   set_squad_removed("red_1_simulation_snork")
   set_squad_removed("red_2_simulation_snork")
   set_squad_removed("red_3_simulation_snork")
   set_squad_removed("red_4_simulation_snork")
   set_squad_removed("red_5_simulation_snork")
   set_squad_removed("red_6_simulation_snork")
   set_squad_removed("red_7_simulation_snork")
   set_squad_removed("red_8_simulation_snork")
   sgm_g.release_objects_by_section("sgm_red_psyho_zone_2")
end

------------------------
-------------------------------------//SGM SPECIFICS(in dialogs.script)//-------------------------------------------------
function transfer_medkit(first_speaker, second_speaker)
   local reputation_value = 0
   local medkit_half_cost = 0
   if first_speaker:object("medkit") ~= nil then
      dialogs.relocate_item_section(second_speaker, "medkit", "out")
      reputation_value = 20
      medkit_half_cost = 125
   elseif first_speaker:object("medkit_army") ~= nil then
      dialogs.relocate_item_section(second_speaker, "medkit_army", "out")
      reputation_value = 30
      medkit_half_cost = 325
   elseif first_speaker:object("medkit_scientic") ~= nil then
      dialogs.relocate_item_section(second_speaker, "medkit_scientic", "out")
      reputation_value = 45
      medkit_half_cost = 400
   elseif first_speaker:object("medkit_elite") ~= nil then
      dialogs.relocate_item_section(second_speaker, "medkit_elite", "out")
      reputation_value = 60
      medkit_half_cost = 700
   end
   alife():create("medkit_script", second_speaker:position(), second_speaker:level_vertex_id(),
      second_speaker:game_vertex_id(), second_speaker:id())
   --' Тут надо анлочить аптечку для использования.
   xr_wounded.unlock_medkit(second_speaker)
   if second_speaker:relation(first_speaker) ~= game_object.enemy then
      second_speaker:set_relation(game_object.friend, first_speaker)
   end
   first_speaker:change_character_reputation(reputation_value)
   if first_speaker:id() == db.actor:id() then
      if has_alife_info("sgm_achievements_lifeguard") then
         local sum = (sgm_g.r_mod_params("number", "wounded_for_help_reward", 100) * sgm_g.read_mod_param("stat_help_wounded")) +
             medkit_half_cost
         dialogs.relocate_money(db.actor, sum, "in")
         congratulate_with_event(10000, game.translate_string("st_help_wounded_payment") .. " - " .. sum, false, false)
      end
      sgm_g.inc_mod_param("stat_help_wounded", 1)
   end
end

--' Use this function instead.
function relocate_item_section(victim, section, type, amount, show_time)
   if db.actor then
      if not amount then
         amount = 1
      end
      for i = 1, amount do
         if type == "in" then
            --' Трансферить нужно только квестовые предметы.
            if quest_section[section] == true and victim ~= nil and victim:object(section) ~= nil then
               victim:transfer_item(victim:object(section), db.actor)
            else
               alife():create(section,
                  db.actor:position(),
                  db.actor:level_vertex_id(),
                  db.actor:game_vertex_id(),
                  db.actor:id())
            end
         elseif type == "out" then
            if victim == nil then
               abort("Couldn't relocate item to NULL")
            end
            db.actor:transfer_item(db.actor:object(section), victim)
         end
      end
      if death_manager.ammo_sections[section] == true then
         local ltx = system_ini()
         local box_size = ltx:r_s32(section, "box_size")
         amount = amount * box_size
      end
      news_manager.relocate_item(db.actor, type, section, amount, show_time)
   end
end

function relocate_money(victim, num, type, show_time)
   if db.actor then
      if type == "in" then
         db.actor:give_money(num)
         game_stats.money_quest_update(num)
      elseif type == "out" then
         if victim == nil then
            abort("Couldn't relocate money to NULL")
         end
         db.actor:transfer_money(num, victim)
         game_stats.money_quest_update(-num)
      elseif type == "out2" then
         db.actor:give_money(-tonumber(num))
         game_stats.money_quest_update(-num)
      end
      news_manager.relocate_money(db.actor, type, num, show_time)
   end
end

function relocate_item_section_to_actor(first_speaker, second_speaker, section, amount, show_time)
   -- Сначала выясним кто из них актер
   local npc = who_is_npc(first_speaker, second_speaker)
   local v = 0
   --' Трансферить нужно только квестовые предметы.
   if not amount then
      amount = 1
   end

   local function transfer_object_item(temp, item)
      --printf("item:section(): [%s]", item:section())
      if (item:section() == section and v ~= 0) then
         npc:transfer_item(item, db.actor)
         v = v - 1
      end
   end

   if amount > 1 then
      v = amount
      npc:iterate_inventory(transfer_object_item, nil)
   else
      if npc:object(section) ~= nil then
         npc:transfer_item(npc:object(section), db.actor)
      else
         alife():create(section,
            db.actor:position(),
            db.actor:level_vertex_id(),
            db.actor:game_vertex_id(),
            db.actor:id())
      end
   end

   if v ~= 0 then
      for i = 1, v do
         alife():create(section,
            db.actor:position(),
            db.actor:level_vertex_id(),
            db.actor:game_vertex_id(),
            db.actor:id())
      end
   end
   if death_manager.ammo_sections[section] == true then
      local ltx = system_ini()
      local box_size = ltx:r_s32(section, "box_size")
      amount = amount * box_size
   end
   news_manager.relocate_item(db.actor, "in", section, amount, show_time)
end

function relocate_money_to_actor(first_speaker, second_speaker, num, show_time)
   db.actor:give_money(num)
   game_stats.money_quest_update(num)
   news_manager.relocate_money(db.actor, "in", num, show_time)
end

function relocate_money_from_actor(first_speaker, second_speaker, num, show_time)
   local victim = who_is_npc(first_speaker, second_speaker)
   if victim == nil then
      abort("Couldn't relocate money to NULL")
   end
   db.actor:transfer_money(num, victim)
   game_stats.money_quest_update(-num)
   news_manager.relocate_money(db.actor, "out", num, show_time)
end

--section - Имя секции для передачи; amount - количество, также принимает стринг "all"
function relocate_item_section_from_actor(first_speaker, second_speaker, section, amount, show_time)
   local npc = who_is_npc(first_speaker, second_speaker)
   local actor = who_is_actor(first_speaker, second_speaker)
   local i = 0
   --printf("Amount [%s]", tostring(amount))
   if not amount then
      amount = 1
   end

   local function transfer_object_item(temp, item)
      --printf("item:section(): [%s]", item:section())
      if (item:section() == section and i ~= 0) then
         db.actor:transfer_item(item, npc)
         i = i - 1
      end
   end

   if amount == "all" then
      i = -1
      actor:iterate_inventory(transfer_object_item, nil)
      amount = (i + 1) * (-1)
      i = 0
   elseif amount > 1 then
      i = amount
      actor:iterate_inventory(transfer_object_item, nil)
   elseif amount < 1 then
      abort("Wrong parameters in function 'relocate_item_section_from_actor'!")
   else
      actor:transfer_item(actor:object(section), npc)
   end

   if i ~= 0 then
      assert("Actor do not has enough items! Transferred [%s], needed [%s]", tostring(amount - i), tostring(amount))
   end

   if death_manager.ammo_sections[db.actor.section] == true then
      local ltx = system_ini()
      local box_size = ltx:r_s32(section, "box_size")
      amount = amount * box_size
   end
   news_manager.relocate_item(db.actor, "out", section, amount - i, show_time)
end

function medic_magic_potion(first_speaker, second_speaker)
   sgm_g.write_mod_param("actor_toxicity", -1.0)
end

function actor_needs_bless(first_speaker, second_speaker)
   if db.actor.health < 1 or db.actor.radiation > 0 or db.actor.bleeding > 0 or sgm_g.read_mod_param("actor_toxicity") > -1.0 then
      return true
   end
end

-------------------------------------//Copyright GeJorge//-------------------------------------------------
