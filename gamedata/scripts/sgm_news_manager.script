function merge_tips_icon(tips_icons)
	sgm_tips_icons = {
		activated_item             = "ui_inGame2_Istoriya_dolga",
		detector_battery           = "ui_inGame2_PD_Opitniy_stalker",
		founded_area               = "ui_inGame2_Put_v_pripyat",
		top_secret                 = "ui_iconsTotal_bar_darklab_documents",
		taynik                     = "ui_inGame2_Polucheni_koordinaty_taynika",
		chimera                    = "ui_inGame2_PD_Ohotnik_na_mutantov",
		mp3_player                 = "ui_inGame2_Mp3_player",
		money                      = "ui_inGame2_Dengi_polucheni",
		remont                     = "ui_inGame2_Remont",
		diagterev                  = "ui_inGame2_Hero_Diagterev",
		elbrus                     = "ui_inGame2_Stalker_Elbrus",
		bodyguard                  = "ui_inGame2_Razgovor_s_glazu_na_glaz",
		medal                      = "ui_inGame2_Otryad_Skat",
		af_autoselect              = "ui_inGame2_BreederSearch",
		sgm_achievement_sniper     = "ui_mod_pda_achievement_sniper",
		sgm_achievement_client     = "ui_mod_pda_achievement_client",
		sgm_achievement_marauder   = "ui_mod_pda_achievement_marauder",
		sgm_achievement_guidebook  = "ui_mod_pda_achievement_guidebook",
		sgm_achievement_pathfinder = "ui_mod_pda_achievement_pathfinder",
		sgm_achievement_magnate    = "ui_mod_pda_achievement_magnate",
		sgm_achievement_assistant  = "ui_mod_pda_achievement_assistant",
		sgm_achievement_lifeguard  = "ui_mod_pda_achievement_lifeguard",
		portrait_Sich              = "ui_inGame2_Sich",
		portrait_Noy               = "ui_inGame2_Noy",
		portrait_Sultan            = "ui_inGame2_Sultan",
		portrait_Zulus             = "ui_inGame2_Zulus",
		portrait_Brodyaga_dolg     = "ui_inGame2_Brodyaga_dolg",
		portrait_Shulga            = "ui_inGame2_Shulga",
		portrait_Flint             = "ui_inGame2_Flint",
		portrait_Brodyaga_svob     = "ui_inGame2_Brodyaga_svoboda",
		portrait_Dyadka_Yar        = "ui_inGame2_Dyadka_Yar",
		portrait_Loki              = "ui_inGame2_Loki",
		portrait_Brodyaga_mon      = "ui_inGame2_Brodyaga_monolit",
		portrait_Novikov           = "ui_inGame2_Novikov",
		portrait_Vano              = "ui_inGame2_Vano",
		portrait_Kostoprav         = "ui_inGame2_Kostoprav",
		portrait_Tremor            = "ui_inGame2_Tremor",
		portrait_Kardan            = "ui_inGame2_Kardan",
		portrait_Gluhar            = "ui_inGame2_Gluhar",
		portrait_Gavaets           = "ui_inGame2_Gavaets",
		portrait_Garik             = "ui_inGame2_Garik",
		portrait_Lotsman           = "ui_inGame2_Lotsman",
		portrait_Gonta             = "ui_inGame2_Gonta",
		portrait_Zveroboy          = "ui_inGame2_Zveroboy",
		portrait_Boroda            = "ui_inGame2_Boroda",
		portrait_Vano_nauchniy     = "ui_inGame2_Vano_nauchniy",
		portrait_Strelok           = "ui_inGame2_Strelok",
		portrait_Azot              = "ui_inGame2_Azot",
		portrait_Sokolov           = "ui_inGame2_Sokolov",
		portrait_Rogovets          = "ui_inGame2_Rogovets",
		portrait_Kovalskiy         = "ui_inGame2_Kovalskiy",
		portrait_Sokolov_ecolog    = "ui_inGame2_Sokolov_ecolog",
		portrait_German            = "ui_inGame2_German",
		portrait_Ozerskiy          = "ui_inGame2_Ozerskiy",
		portrait_Hero              = "ui_inGame2_Hero",
		portrait_renegade_1        = "ui_inGame2_renegade_1",
		portrait_renegade_2        = "ui_inGame2_renegade_2",
		portrait_renegade_3        = "ui_inGame2_renegade_3",
		portrait_bandit_1          = "ui_inGame2_bandit_1",
		portrait_bandit_2          = "ui_inGame2_bandit_2",
		portrait_bandit_3          = "ui_inGame2_bandit_3",
		portrait_bandit_3_mask     = "ui_inGame2_bandit_3_mask",
		portrait_bandit_4          = "ui_inGame2_bandit_4",
		portrait_Nebo_1            = "ui_npc_u_rasvet_1",
		portrait_Nebo_2            = "ui_npc_u_rasvet_2",
		portrait_Nebo_3            = "ui_npc_u_rasvet_3",
		portrait_Nebo_4            = "ui_npc_u_rasvet_4",
		portrait_Nebo_Exo          = "ui_npc_u_rasvet_exo",
		portrait_Dolg_1            = "ui_inGame2_Dolg_1",
		portrait_Dolg_2            = "ui_inGame2_Dolg_2",
		portrait_Dolg_1_mask       = "ui_inGame2_Dolg_1_mask",
		portrait_Dolg_3            = "ui_inGame2_Dolg_3",
		portrait_Dolg_4            = "ui_inGame2_Dolg_4",
		portrait_ecolog_mil        = "ui_inGame2_ecolog_military",
		portrait_Freedom_1         = "ui_inGame2_Freedom_1",
		portrait_Freedom_2         = "ui_inGame2_Freedom_2",
		portrait_Freedom_2_mask    = "ui_inGame2_Freedom_2_mask",
		portrait_Freedom_3         = "ui_inGame2_Freedom_3",
		portrait_Freedom_4         = "ui_inGame2_Freedom_4",
		portrait_merc_2            = "ui_inGame2_merc_2",
		portrait_merc_4            = "ui_inGame2_merc_4",
		portrait_monolit_1         = "ui_inGame2_monolit_1",
		portrait_monolit_2         = "ui_inGame2_monolit_2",
		portrait_monolit_3         = "ui_inGame2_monolit_3",
		portrait_monolit_4         = "ui_inGame2_monolit_4",
		portrait_neutral_1         = "ui_inGame2_neutral_1",
		portrait_neutral_2         = "ui_inGame2_neutral_2",
		portrait_neutral_2_mask    = "ui_inGame2_neutral_2_mask",
		portrait_neutral_3         = "ui_inGame2_neutral_3",
		portrait_neutral_4         = "ui_inGame2_neutral_4",
		portrait_neutral_nauch     = "ui_inGame2_neutral_nauchniy",
		portrait_Soldier_1         = "ui_inGame2_Soldier_1",
		portrait_Soldier_2         = "ui_inGame2_Soldier_2",
		portrait_Soldier_3         = "ui_inGame2_Soldier_3",
		portrait_Soldier_4         = "ui_inGame2_Soldier_4",
		portrait_Zombied_1         = "ui_inGame2_Zombied_1",
		portrait_Zombied_2         = "ui_inGame2_Zombied_2",
		portrait_Zombied_3         = "ui_inGame2_Zombied_3",
		portrait_Zombied_4         = "ui_inGame2_Zombied_4",
	}
	for k, v in pairs(sgm_tips_icons) do tips_icons[k] = v end
end

--/ SGM in
function send_tip(actor, news_id, timeout, sender, showtime, sender_id, title_id, play_snd)
	if news_id == nil then return false end
	if sender_id ~= nil then
		local sim = alife()
		if sim ~= nil then
			local npc = sim:object(get_story_object_id(sender_id))
			if npc ~= nil then
				if npc.online then
					--� ������� ��������� �� ����������
					if xr_wounded.is_heavy_wounded_by_id(npc.id) then
						printf("[PDA]Cannot send tips [%s], sender is heavy wounded", tostring(news_id))
						return false
					end
				end
				-- � ������ ������� ������ �� ������
				if npc:alive() == 1 then
					printf("[PDA]Cannot send tips [%s], sender is dead", tostring(news_id))
					return false
				end
			end
		end
	end
	if timeout == nil then timeout = 0 end
	if showtime == nil then showtime = 5000 end
	if play_snd == nil or play_snd == "nil" or play_snd == true or play_snd == "true" then
		xr_sound.set_sound_play(actor:id(), "pda_tips")
	end
	local texture = "ui_iconsTotal_grouping"
	if sender ~= nil then
		if type(sender) == "string" then
			if sgm_tips_icons[sender] then
				texture = sgm_tips_icons[sender]
			end
		elseif is_npc_stalker(sender:clsid()) then
			texture = sender:character_icon()
		end
	end
	if db.actor:is_talking() then
		if title_id ~= nil then
			local news_caption = game.translate_string(title_id)
			local news_text = game.translate_string(news_id)
			db.actor:give_talk_message2(news_caption, news_text, texture, "iconed_answer_item")
		else
			local news_caption = game.translate_string("st_tip")
			local news_text = game.translate_string(news_id)
			db.actor:give_talk_message2(news_caption, news_text, texture, "iconed_answer_item")
		end
	else
		if title_id ~= nil then
			local news_caption = game.translate_string(title_id)
			local news_text = game.translate_string(news_id)
			db.actor:give_game_news(news_caption, news_text, texture, timeout * 1000, showtime, 0)
		else
			local news_caption = game.translate_string("st_tip")
			local news_text = game.translate_string(news_id)
			db.actor:give_game_news(news_caption, news_text, texture, timeout * 1000, showtime, 0)
		end
	end
	return true
end

function bodyguard_tip(actor, news_id, timeout, sender, showtime, sender_id, title_id)
	if news_id == nil then return false end
	if sender_id ~= nil then
		local sim = alife()
		if sim ~= nil then
			local npc = sim:object(get_story_object_id(sender_id))
			if npc ~= nil then
				if npc.online then
					--� ������� ��������� �� ����������
					if xr_wounded.is_heavy_wounded_by_id(npc.id) then
						printf("[PDA]Cannot send tips [%s], sender is heavy wounded", tostring(news_id))
						return false
					end
				end
				-- � ������ ������� ������ �� ������
				if npc:alive() == 1 then
					printf("[PDA]Cannot send tips [%s], sender is dead", tostring(news_id))
					return false
				end
			end
		end
	end
	if timeout == nil then timeout = 0 end
	if showtime == nil then showtime = 5000 end
	xr_sound.set_sound_play(actor:id(), "pda_tips")
	local texture = "ui_iconsTotal_grouping"
	if sender ~= nil then
		if type(sender) == "string" then
			if sgm_tips_icons[sender] then
				texture = sgm_tips_icons[sender]
			end
		elseif is_npc_stalker(sender:clsid()) then
			texture = sender:character_icon()
		end
	end
	if title_id ~= nil then
		local news_caption = game.translate_string(title_id)
		local news_text = game.translate_string(news_id)
		actor:give_game_news(news_caption, news_text, texture, timeout * 1000, showtime, 0)
	else
		local news_caption = game.translate_string("st_tip")
		local news_text = game.translate_string(news_id)
		actor:give_game_news(news_caption, news_text, texture, timeout * 1000, showtime, 0)
	end
	return true
end

function bankir_tip(actor, timeout, sender, showtime, sender_id, title_id, message0, message1, numb1, message2, numb2)
	if sender_id ~= nil then
		local sim = alife()
		if sim ~= nil then
			local npc = sim:object(get_story_object_id(sender_id))
			if npc ~= nil then
				if npc.online then
					--� ������� ��������� �� ����������
					if xr_wounded.is_heavy_wounded_by_id(npc.id) then
						printf("[PDA]Cannot send tips [%s], sender is heavy wounded", tostring(news_id))
						return false
					end
				end
				-- � ������ ������� ������ �� ������
				if npc:alive() == 1 then
					printf("[PDA]Cannot send tips [%s], sender is dead", tostring(news_id))
					return false
				end
			end
		end
	end
	if timeout == nil then timeout = 0 end
	if showtime == nil then showtime = 5000 end
	xr_sound.set_sound_play(actor:id(), "pda_tips")
	local texture = "ui_iconsTotal_grouping"
	if sender ~= nil then
		if type(sender) == "string" then
			if sgm_tips_icons[sender] then
				texture = sgm_tips_icons[sender]
			end
		elseif is_npc_stalker(sender:clsid()) then
			texture = sender:character_icon()
		end
	end
	if db.actor:is_talking() then
		if title_id ~= nil then
			local news_caption = game.translate_string(title_id)
			local news_text = game.translate_string(message0) ..
				game.translate_string("\\n") ..
				game.translate_string(message1) ..
				" " .. numb1 .. game.translate_string("\\n") .. game.translate_string(message2) .. " " .. numb2
			db.actor:give_talk_message2(news_caption, news_text, texture, "iconed_answer_item")
		end
	else
		if title_id ~= nil then
			local news_caption = game.translate_string(title_id)
			local news_text = game.translate_string(message0) ..
				game.translate_string("\\n") ..
				game.translate_string(message1) ..
				" " .. numb1 .. game.translate_string("\\n") .. game.translate_string(message2) .. " " .. numb2
			db.actor:give_game_news(news_caption, news_text, texture, timeout * 1000, showtime, 0)
		end
	end
	return true
end

function send_add_skill(item_name)
	local news_caption = game.translate_string("st_add_skill")
	local news_text = game.translate_string(item_name)
	sgm_g.play_folder_snd([[device\pda\pda_news]])
	db.actor:give_game_news(news_caption, news_text, "ui_iconsTotal_weapons", 0, 5000)
end

function send_currert_skill(item_name)
	local news_caption = game.translate_string("st_info_skill")
	local news_text = game.translate_string("st_info2_skill") ..
		"%c[255,153,238,26]" .. " " .. game.translate_string(item_name) .. " " .. game.translate_string("st_info3_skill")
	db.actor:give_game_news(news_caption, news_text, "ui_iconsTotal_weapons", 0, 5000)
end

function send_deserve(name)
	local news_caption = game.translate_string("send_deserve_title")
	local news_text = game.translate_string(name)
	sgm_g.play_folder_snd([[device\pda\pda_news]])
	db.actor:give_game_news(news_caption, news_text, "ui_iconsTotal_bar_darklab_documents2", 0, 5000)
end

function send_repair(item_name, item_cond)
	local news_caption = game.translate_string("st_repair_title")
	local news_text = game.translate_string(item_name) .. "[" .. game.translate_string("st_repair_cond") ..
		item_cond .. "]"
	sgm_g.play_folder_snd([[device\pda\pda_news]])
	db.actor:give_game_news(news_caption, news_text, "ui_iconsTotal_weapons", 0, 4000)
end

function send_unique_treasure(treasure_name)
	local news_caption = game.translate_string("st_found_unique_treasure")
	local descr_caption = ""
	if sgm_g.find_in_string(treasure_name, "zat_") then
		descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("zaton")
	elseif sgm_g.find_in_string(treasure_name, "jup_") then
		descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("jupiter")
	end
	if db.actor:is_talking() then
		db.actor:give_talk_message2(news_caption, descr_caption, "ui_inGame2_Polucheni_koordinaty_taynika",
			"iconed_answer_item")
	else
		db.actor:give_game_news(news_caption, descr_caption, "ui_inGame2_Polucheni_koordinaty_taynika", 0, 3000)
	end
end

--/ SGM out

function send_task(actor, type, task)
	if db.actor == nil then
		return false
	end
	local time_on_screen = 10000
	if type == "updated" then
		time_on_screen = 5000
	end
	xr_sound.set_sound_play(db.actor:id(), "pda_task")
	local news_caption = game.translate_string(action_descr_by_type[type])
	local news_text = game.translate_string(task:get_title())
	local icon = task:get_icon_name()
	if (icon == nil) then
		icon = "ui_iconsTotal_storyline"
	end
	--/ SGM in
	if news_text ~= nil and news_caption ~= nil then
		if db.actor:is_talking() then
			db.actor:give_talk_message2(news_caption, news_text .. ".", icon, "iconed_answer_item")
		else
			db.actor:give_game_news(news_caption, news_text .. ".", icon, 0, time_on_screen)
		end
	end
	--/ SGM out
end

--/ SGM in
function send_treasure(param, treasure_name)
	local news_caption = ""
	local descr_caption = ""
	if (param == 0) then
		news_caption = game.translate_string("st_found_new_treasure")
	elseif (param == 1) then
		news_caption = game.translate_string("st_got_treasure")
	elseif (param == 2) then
		news_caption = game.translate_string("st_found_old_treasure")
	end
	if (param == 0) then
		if sgm_g.find_in_string(treasure_name, "zat_") then
			descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("zaton")
		elseif sgm_g.find_in_string(treasure_name, "jup_") then
			descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("jupiter")
		elseif sgm_g.find_in_string(treasure_name, "pri_") then
			descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("pripyat")
		elseif sgm_g.find_in_string(treasure_name, "val_") then
			descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("darkvalley")
		elseif sgm_g.find_in_string(treasure_name, "mil_") then
			descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("military")
		elseif sgm_g.find_in_string(treasure_name, "agr_") then
			descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("agroprom")
		elseif sgm_g.find_in_string(treasure_name, "esc_") then
			descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("escape")
		elseif sgm_g.find_in_string(treasure_name, "mar_") then
			descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("marsh")
		elseif sgm_g.find_in_string(treasure_name, "red_") then
			descr_caption = game.translate_string("%c[110,200,128,0]") .. game.translate_string("red_forest")
		end
	end
	if db.actor:is_talking() then
		db.actor:give_talk_message2(news_caption, descr_caption, "ui_inGame2_Polucheni_koordinaty_taynika",
			"iconed_answer_item")
	else
		db.actor:give_game_news(news_caption, descr_caption, "ui_inGame2_Polucheni_koordinaty_taynika", 0, 3000)
	end
end

function relocate_item(actor, type, item, amount, show_time)
	local show_value = 3000
	if sgm_g.exists(show_time) then
		show_value = show_time
	end
	if db.actor == nil then return false end
	if not amount then
		amount = 1
	end
	local news_caption = ""
	local news_text = ""
	if type == "in" then
		if amount == 1 then
			news_caption = game.translate_string("general_in_item")
			news_text = game.translate_string(get_inv_name(item))
		else
			news_caption = game.translate_string("general_in_item")
			news_text = game.translate_string(get_inv_name(item)) .. " x" .. amount
		end
		if db.actor:is_talking() then
			db.actor:give_talk_message2(news_caption, news_text, "ui_inGame2_Predmet_poluchen", "iconed_answer_item")
		else
			db.actor:give_game_news(news_caption, news_text, "ui_inGame2_Predmet_poluchen", 0, show_value)
		end
	elseif type == "out" then
		if amount == 1 then
			news_caption = game.translate_string("general_out_item")
			news_text = game.translate_string(get_inv_name(item))
		else
			news_caption = game.translate_string("general_out_item")
			news_text = game.translate_string(get_inv_name(item)) .. " x" .. amount
		end
		if db.actor:is_talking() then
			db.actor:give_talk_message2(news_caption, news_text, "ui_inGame2_Predmet_otdan", "iconed_answer_item")
		else
			db.actor:give_game_news(news_caption, news_text, "ui_inGame2_Predmet_otdan", 0, show_value)
		end
	end
end

function relocate_money(actor, type, amount, show_time)
	local show_value = 3000
	if sgm_g.exists(show_time) then
		show_value = show_time
	end
	if db.actor == nil then return false end
	if type == "in" then
		local news_caption = game.translate_string("general_in_money")
		local news_text = game.translate_string(tostring(amount))
		if db.actor:is_talking() then
			db.actor:give_talk_message2(news_caption, news_text, "ui_inGame2_Dengi_polucheni", "iconed_answer_item")
		else
			db.actor:give_game_news(news_caption, news_text, "ui_inGame2_Dengi_polucheni", 0, show_value)
		end
	elseif type == "out" then
		local news_caption = game.translate_string("general_out_money")
		local news_text = game.translate_string(tostring(amount))
		if db.actor:is_talking() then
			db.actor:give_talk_message2(news_caption, news_text, "ui_inGame2_Dengi_otdani", "iconed_answer_item")
		else
			db.actor:give_game_news(news_caption, news_text, "ui_inGame2_Dengi_otdani", 0, show_value)
		end
	end
end

function relocate_web_money(actor, type, amount, show_time)
	local show_value = 3000
	if sgm_g.exists(show_time) then
		show_value = show_time
	end
	if db.actor == nil then return false end
	if type == "in" then
		local news_caption = game.translate_string("st_in_web_money")
		local news_text = game.translate_string(tostring(amount))
		if db.actor:is_talking() then
			db.actor:give_talk_message2(news_caption, news_text, "ui_inGame2_Dengi_polucheni", "iconed_answer_item")
		else
			db.actor:give_game_news(news_caption, news_text, "ui_inGame2_Dengi_polucheni", 0, show_value)
		end
	elseif type == "out" then
		local news_caption = game.translate_string("st_out_web_money")
		local news_text = game.translate_string(tostring(amount))
		if db.actor:is_talking() then
			db.actor:give_talk_message2(news_caption, news_text, "ui_inGame2_Dengi_otdani", "iconed_answer_item")
		else
			db.actor:give_game_news(news_caption, news_text, "ui_inGame2_Dengi_otdani", 0, show_value)
		end
	end
end

--/ SGM out
