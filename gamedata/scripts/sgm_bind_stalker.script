------------------------------------
function take_item_from_box(box, item)
	local box_name = box:name()
	sgm_callbacks.on_take_item_from_box(box, item)
end

------------------------------------>
function info_callback(npc, info_id)
	printf("*INFO*: npc='%s' id='%s'", npc:name(), info_id)
	sgm_callbacks.on_enterring_info(npc, info_id)
end

------------------------------------>
function on_trade(item, sell_bye, money)
	if sell_bye == true then
		sgm_callbacks.on_trade(item, money, 1)
		game_stats.money_trade_update(money)
	else
		sgm_callbacks.on_trade(item, money, 2)
		game_stats.money_trade_update(-money)
	end
end
------------------------------------>
function on_item_take(obj)
	sgm_callbacks.on_item_take(obj)
end

------------------------------------>
function on_item_drop(obj)
	sgm_callbacks.on_item_drop(obj)
end

------------------------------------>
function use_inventory_item(obj)
	sgm_callbacks.on_use_item(obj)
	if sgm_g.find_in_string(item_name, "dv_") and sgm_g.find_in_string(item_name, "_case") then
		sgm_callbacks.on_use_deserve(obj)
	end
	if sgm_g.find_in_string(item_name, "skill_book") then
		sgm_callbacks.on_use_skill_book(obj)
	end
	if sgm_g.find_in_string(item_name, "sleeping_bag") then
		sgm_callbacks.on_use_sleeping_bag(obj)
	end
end

------------------------------------>
function anabiotic_callback_pre()
	sgm_flags.is_ui_disabled = true
end
------------------------------------>
function anabiotic_callback_post()
	sgm_callbacks.on_forward_game_time(0, rnd)
end

------------------------------------>
function anabiotic_callback2()
	sgm_flags.is_ui_disabled = false
end
------------------------------------>
function update()
	if sgm_g.mod_update() then
		sgm_loader.SGMLoader()
	end
end

------------------------------------>
function save(packet)
	--/ SGM in
	if sgm_g.get_game_unique_id() then
		data_param_save_all()
	end
	--/ SGM out
	set_save_marker(packet, "save", false, "actor_binder")
	object_binder.save(self, packet)
	packet:w_u8(level.get_game_difficulty())
	if self.st.disable_input_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		utils.w_CTime(packet, self.st.disable_input_time)
	end
	xr_logic.pstor_save_all(self.object, packet)
	self.weather_manager:save(packet)
	release_body_manager.get_release_body_manager():save(packet)
	self.surge_manager:save(packet)
	--/ SGM in
	sgm_loader.save(packet)
	--/ SGM out
end

------------------------------------>
function load(reader)
	-- todo переписать под скрипт ix-ray callback load
	sgm_loader.load(reader)
end