---==================================================================================================---
--------------------------------------------------------------------------------------------------------
------------------------------------------(ŒÔˆËË —√Ã‡)--------------------------------------------------
--------------------------------------------------------------------------------------------------------
---==================================================================================================---
local options_names = {
   [1] = "activate_automatic_use",
   [2] = "activate_auto_energy",
   [3] = "deactivate_no_wpn",
   [4] =
   "deactivate_vibros",
   [5] = "deactivate_minetrap",
   [6] = "more_monsters",
   [7] = "deactivate_blackday",
   [8] =
   "marauder_container",
   [9] = "disable_ai_granade",
   [10] = "disable_abandoned",
   [11] = "activate_alfa_force"
}
local show_descr_box = true
class "mod_options" (CUIScriptWnd)
function mod_options:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function mod_options:__finalize()
end

function mod_options:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("ui_mod_options_main.xml")
   xml:InitStatic("background", self)
   self.form = xml:InitStatic("form", self)
   self.options_field = xml:InitStatic("form:options_field", self.form)
   xml:InitStatic("form:title", self.form)
   self.return_box = CUIMessageBoxEx()
   self:Register(self.return_box, "return_box")
   self.apply_box = CUIMessageBoxEx()
   self:Register(self.apply_box, "apply_box")
   self.descr_box = CUIMessageBoxEx()
   self:Register(self.descr_box, "descr_box")
   self:start_button(xml, "btn_exit")
   self:start_button(xml, "btn_return")
   self:start_button(xml, "btn_apply")
   self:start_button(xml, "btn_hud")
   self:start_button(xml, "btn_optimization")
   for i = 1, sgm_g.get_table_lines(options_names) do
      self:register_check_option(xml, options_names[i])
      if show_descr_box then
         self:register_descr_box(xml, "descr_" .. options_names[i])
      end
   end
   sgm_version.show_version(self)
end

function mod_options:InitCallBacks()
   self:AddCallback("btn_exit", ui_events.BUTTON_CLICKED, self.press_exit, self)
   self:AddCallback("btn_return", ui_events.BUTTON_CLICKED, self.press_return, self)
   self:AddCallback("btn_apply", ui_events.BUTTON_CLICKED, self.press_apply, self)
   self:AddCallback("btn_hud", ui_events.BUTTON_CLICKED, self.press_hud, self)
   self:AddCallback("btn_optimization", ui_events.BUTTON_CLICKED, self.press_optimization, self)
   self:AddCallback("return_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.return_box_yes, self)
   self:AddCallback("return_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.return_box_no, self)
   self:AddCallback("apply_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.apply_box_ok, self)
   self:AddCallback("apply_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.apply_box_ok, self)
   self:AddCallback("descr_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.descr_box_ok, self)
   self:AddCallback("descr_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.descr_box_ok, self)
   for i = 1, sgm_g.get_table_lines(options_names) do
      self:AddCallback("descr_" .. options_names[i], ui_events.BUTTON_CLICKED, self["descr_" .. options_names[i]], self)
   end
end

function mod_options:descr_activate_alfa_force()
   self.descr_box:InitMessageBox("mb_descr_activate_alfa_force")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_disable_abandoned()
   self.descr_box:InitMessageBox("mb_descr_disable_abandoned")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_more_monsters()
   self.descr_box:InitMessageBox("mb_descr_more_monsters")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_deactivate_minetrap()
   self.descr_box:InitMessageBox("mb_descr_deactivate_minetrap")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_disable_ai_granade()
   self.descr_box:InitMessageBox("mb_descr_disable_ai_granade")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_marauder_container()
   self.descr_box:InitMessageBox("mb_descr_marauder_container")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_deactivate_no_wpn()
   self.descr_box:InitMessageBox("mb_descr_deactivate_no_wpn")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_deactivate_vibros()
   self.descr_box:InitMessageBox("mb_descr_deactivate_vibros")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_deactivate_sleeping()
   self.descr_box:InitMessageBox("mb_descr_deactivate_sleeping")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_deactivate_blackday()
   self.descr_box:InitMessageBox("mb_descr_deactivate_blackday")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_activate_auto_energy()
   self.descr_box:InitMessageBox("mb_descr_activate_auto_energy")
   self.descr_box:ShowDialog(true)
end

function mod_options:descr_activate_automatic_use()
   self.descr_box:InitMessageBox("mb_descr_activate_automatic_use")
   self.descr_box:ShowDialog(true)
end

function mod_options:return_box_yes()
   if db.actor ~= nil then
      for i = 1, sgm_g.get_table_lines(options_names) do
         disable_info("opt_" .. options_names[i])
      end
      disable_info("opt_activate_shock_motion")
      disable_info("opt_activate_carrying_hud")
      disable_info("opt_activate_carrying_breathing")
      disable_info("opt_disable_hud_time")
      disable_info("opt_disable_hud_wpn")
      disable_info("opt_disable_shock_hits")
      disable_info("opt_disable_actor_vertigo")
      disable_info("opt_disable_hit_marks")
      disable_info("opt_disable_statistic_event")
      disable_info("opt_show_rank_counter")
   end
   self.return_box:ShowDialog(false)
   self.return_box:HideDialog()
   self:press_exit()
end

function mod_options:return_box_no()
   self.return_box:ShowDialog(false)
   self.return_box:HideDialog()
end

function mod_options:apply_box_ok()
   self.apply_box:ShowDialog(false)
   self.apply_box:HideDialog()
end

function mod_options:descr_box_ok()
   self.descr_box:ShowDialog(false)
   self.descr_box:HideDialog()
end

function mod_options:press_hud()
   if self.mod_hud_dlg == nil then
      self.mod_hud_dlg = sgm_ui_mod_hud.mod_hud()
      self.mod_hud_dlg.owner = self
   end
   self.mod_hud_dlg:ShowDialog(true)
   self:HideDialog()
   self:Show(false)
end

function mod_options:press_optimization()
   if self.mod_options_add_dlg == nil then
      self.mod_options_add_dlg = sgm_ui_mod_optimization.mod_optimization()
      self.mod_options_add_dlg.owner = self
   end
   self.mod_options_add_dlg:ShowDialog(true)
   self:HideDialog()
   self:Show(false)
end

function mod_options:press_exit()
   self.owner:ShowDialog(true)
   self:HideDialog()
   self.owner:Show(true)
end

function mod_options:press_return()
   self.return_box:InitMessageBox("mb_mod_options_default")
   self.return_box:ShowDialog(true)
end

function mod_options:press_apply()
   for i = 1, sgm_g.get_table_lines(options_names) do
      self:apply_option(options_names[i])
   end
   self:press_exit()
   self.apply_box:InitMessageBox("mb_mod_options_main_apply")
   self.apply_box:ShowDialog(true)
end

function mod_options:OnKeyboard(dik, keyboard_action) --virtual function
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:press_exit()
      end
      if dik == DIK_keys.DIK_RETURN then
         self:press_apply()
      end
   end
   return true
end

function mod_options:start_button(xml, button_name)
   self["get_" .. button_name] = xml:Init3tButton("form:" .. button_name, self.form)
   self:Register(self["get_" .. button_name], button_name)
end

function mod_options:apply_option(opt_name)
   sgm_functions.info_give_on_boolean(self["btn_" .. opt_name]:GetCheck(), "opt_" .. opt_name)
end

function mod_options:register_descr_box(xml, box_name)
   self:Register(xml:Init3tButton("form:options_field:" .. box_name, self.options_field), box_name)
end

function mod_options:register_check_option(xml, opt_name)
   local btn
   btn = xml:InitCheck("form:options_field:btn_" .. opt_name, self.options_field)
   self:Register(btn, "btn_" .. opt_name)
   self["btn_" .. opt_name] = btn
   btn:SetCheck(sgm_functions.info_get_boolean("opt_" .. opt_name))
end

---------------------------------//Copyright GeJorge//-----------------------------------------------
