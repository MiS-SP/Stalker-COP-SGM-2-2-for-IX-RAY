local sleep_control = nil
local wide = false
class "sleep_dialog" (CUIScriptWnd)
function sleep_dialog:__init()
	super()
	self:SetWndRect(Frect():set(0, 0, 1024, 768))
	if (device().width / device().height > (1024 / 768 + 0.01)) then
		wide = true
	end

	local xml = CScriptXmlInit()
	xml:ParseFile("sgm_ui_sleep_dialog.xml")

	self.back = xml:InitStatic("background", self)
	--	self.sleep_static = xml:InitSleepStatic("sleep_static", self.back)

	self.sleep_static = xml:InitStatic("sleep_static", self.back)
	self.sleep_static2 = xml:InitStatic("sleep_static", self.back)
	self.static_cover = xml:InitStatic("static_cover", self.back)
	self.st_marker = xml:InitStatic("st_marker", self.static_cover)

	sleep_st_tbl = {}
	for i = 1, 24 do
		sleep_st_tbl[i] = xml:InitStatic("sleep_st_" .. i, self.back)
	end

	self.time_track = xml:InitTrackBar("time_track", self.back)
	self:Register(self.time_track, "time_track")

	self.btn_sleep = xml:Init3tButton("btn_sleep", self.back)
	self:Register(self.btn_sleep, "btn_sleep")

	self.btn_cancel = xml:Init3tButton("btn_cancel", self.back)
	self:Register(self.btn_cancel, "btn_cancel")

	self.sleep_mb = CUIMessageBoxEx()
	self:Register(self.sleep_mb, "sleep_mb")
	--------------------------------------------------------------------------------
	self:AddCallback("btn_sleep", ui_events.BUTTON_CLICKED, self.OnButtonSleep, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.OnButtonCancel, self)
	self:AddCallback("sleep_mb", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMessageBoxOk, self)
end

function sleep_dialog:Initialize()
	local cur_hours = level.get_time_hours()
	for i = 1, 24 do
		local hours = cur_hours + i
		if (hours >= 24) then
			hours = hours - 24
		end
		sleep_st_tbl[i]:TextControl():SetText(hours .. game.translate_string("st_sleep_hours"))
	end

	local delta = math.floor(591 / 24 * cur_hours)
	local r = Frect():set(delta, 413, 591, 531)
	self.sleep_static:SetTextureRect(r)
	local width = 591 - delta
	if (wide) then
		width = width * 0.8
	end
	self.sleep_static:SetWndSize(vector2():set(width, 118))

	r = Frect():set(0, 413, delta, 531)
	self.sleep_static2:SetTextureRect(r)
	local width = delta
	if (wide) then
		width = width * 0.8
	end
	self.sleep_static2:SetWndSize(vector2():set(width, 118))

	local pos = self.sleep_static2:GetWndPos()
	pos.x = self.sleep_static:GetWndPos().x + self.sleep_static:GetWidth()
	self.sleep_static2:SetWndPos(pos)
end

function sleep_dialog:TestAndShow()
	--/ SGM in
	if (db.actor.bleeding > 0 or db.actor.radiation > 0 or (sgm_g.read_mod_param("dream_limited") ~= nil and sgm_g.read_mod_param("dream_limited") ~= "none")) then
		self.sleep_mb:InitMessageBox("message_box_ok")
		if (db.actor.bleeding > 0 and db.actor.radiation > 0) then
			self.sleep_mb:SetText("sleep_warning_all_pleasures")
		elseif (db.actor.bleeding > 0) then
			self.sleep_mb:SetText("sleep_warning_bleeding")
		elseif (db.actor.radiation > 0) then
			self.sleep_mb:SetText("sleep_warning_radiation")
		elseif (sgm_g.read_mod_param("dream_limited") ~= nil and sgm_g.read_mod_param("dream_limited") ~= "none") then
			self.sleep_mb:SetText("st_warning_sleep_limited_text")
		end
		self.sleep_mb:ShowDialog(true)
	else
		self:Initialize()
		self:ShowDialog(true)
	end
	--/ SGM out
end

function sleep_dialog:Update()
	CUIScriptWnd.Update(self)
	local sleep_time = self.time_track:GetIValue() - 1
	local x = math.floor(591 / 24 * sleep_time)
	if (x == 0) then
		x = 5
	end
	if (wide) then
		x = x * 0.8
	end
	self.st_marker:SetWndPos(vector2():set(x, 0))
end

function sleep_dialog:OnTrackButton()
end

function sleep_dialog:OnButtonSleep()
	self:HideDialog()
	xr_effects.disable_ui(db.actor, nil)
	level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "sgm_ui_sleep_dialog.dream_callback")
	level.add_pp_effector("sleep_fade.ppe", 11, false)
	give_info("actor_is_sleeping")
	_G.mus_vol = get_console():get_float("snd_volume_music")
	_G.amb_vol = get_console():get_float("snd_volume_eff")
	get_console():execute("snd_volume_music 0")
	get_console():execute("snd_volume_eff 0")
	surge_manager.resurrect_skip_message()
end

function sleep_dialog:OnButtonCancel()
	self:HideDialog()
	give_info("tutorial_sleep")
	disable_info("sleep_active")
end

function sleep_dialog:OnMessageBoxOk()
	give_info("tutorial_sleep")
	disable_info("sleep_active")
end

--------------------------------------------------------------------------------
function dream_callback()
	level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "sgm_ui_sleep_dialog.dream_callback2")
	local hours = sleep_control.time_track:GetIValue()
	--/ SGM in
	sgm_callbacks.on_actor_sleep(hours)
	sgm_callbacks.on_forward_game_time(hours)
	--/ SGM out
	level.change_game_time(0, hours, 0)
	level_weathers.get_weather_manager():forced_weather_change()
	surge_manager.get_surge_manager().time_forwarded = true
	if (surge_manager.is_started() and level_weathers.get_weather_manager().weather_fx) then
		level.stop_weather_fx()
		level_weathers.get_weather_manager():forced_weather_change()
	end
	db.actor.power = 1
end

function dream_callback2()
	xr_effects.enable_ui(db.actor, nil)
	get_console():execute("snd_volume_music " .. tostring(_G.mus_vol))
	get_console():execute("snd_volume_eff " .. tostring(_G.amb_vol))
	_G.amb_vol = 0
	_G.mus_vol = 0
	give_info("tutorial_sleep")
	disable_info("actor_is_sleeping")
	disable_info("sleep_active")
	--/ SGM in
	sgm_g.write_mod_param("dream_limited", sgm_g.get_general_game_time())
	--/ SGM out
end

function sleep()
	if (sleep_control == nil) then sleep_control = sgm_ui_sleep_dialog.sleep_dialog() end
	sleep_control.time_track:SetCurrentValue()
	sleep_control:TestAndShow()
end

function main()
	sleep()
end

--/SGM
function psi_sleep_callback()
	local time_m = math.random(35, 45)
	level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "sgm_ui_sleep_dialog.psi_sleep_callback_end")
	sgm_callbacks.on_actor_sleep(6)
	sgm_callbacks.on_forward_game_time(0, time_m)
	level.change_game_time(0, 0, time_m)
	level_weathers.get_weather_manager():forced_weather_change()
	surge_manager.get_surge_manager().time_forwarded = true
	if (surge_manager.is_started() and level_weathers.get_weather_manager().weather_fx) then
		level.stop_weather_fx()
		level_weathers.get_weather_manager():forced_weather_change()
	end
	db.actor.power = 1
	if has_alife_info("jup_mercenary_check_plant_start") and sgm_g.dont_has_alife_info("jup_mercenary_check_plant_complete") and sgm_g.dont_has_alife_info("jup_mercenary_check_plant_fail") then
		sgm_g.create("jup_ambush_zombied_7", 330.792, 34.592, -226.192, 1245556, 549)
		sgm_g.create("jup_ambush_zombied_8", 337.937, 34.592, -225.110, 1256088, 549)
		sgm_g.create("jup_ambush_zombied_9", 337.029, 34.276, -240.612, 1253900, 549)
		sgm_g.create("jup_ambush_zombied_10", 331.356, 29.736, -231.913, 1245544, 549)
	end
end

function psi_sleep_callback_end()
	xr_effects.enable_ui(db.actor, nil)
	get_console():execute("snd_volume_music " .. tostring(_G.mus_vol))
	get_console():execute("snd_volume_eff " .. tostring(_G.amb_vol))
	_G.amb_vol = 0
	_G.mus_vol = 0
	give_info("tutorial_sleep")
	disable_info("actor_is_sleeping")
	disable_info("sleep_active")
	db.actor.psy_health = 0.25
	level.add_cam_effector("camera_effects\\fusker.anm", 5511, false, "")
	level.add_pp_effector("actor_hit.ppe", 5525, false)
	level.add_pp_effector("shock_hit.ppe", 5526, false)
	if sgm_g.object_alive(db.actor) and has_alife_info("jup_mercenary_check_plant_start") and sgm_g.dont_has_alife_info("jup_mercenary_check_plant_complete") and sgm_g.dont_has_alife_info("jup_mercenary_check_plant_fail") then
		sgm_g.game_autosave_assign("save_jup_mercenary_check_plant_need_exit")
	end
end

function sleep_factor_callback()
	level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "sgm_ui_sleep_dialog.sleep_factor_callback_end")
	local hours = level.get_time_hours() + 1
	_G.mus_vol = get_console():get_float("snd_volume_music")
	_G.amb_vol = get_console():get_float("snd_volume_eff")
	get_console():execute("snd_volume_music 0")
	get_console():execute("snd_volume_eff 0")
	sgm_callbacks.on_actor_sleep(hours)
	sgm_callbacks.on_forward_game_time(hours)
	level.change_game_time(0, hours, 0)
	level_weathers.get_weather_manager():forced_weather_change()
	surge_manager.get_surge_manager().time_forwarded = true
	if (surge_manager.is_started() and level_weathers.get_weather_manager().weather_fx) then
		level.stop_weather_fx()
		level_weathers.get_weather_manager():forced_weather_change()
	end
	db.actor.power = 1
end

function sleep_factor_callback_end()
	xr_effects.enable_ui(db.actor, nil)
	get_console():execute("snd_volume_music " .. tostring(_G.mus_vol))
	get_console():execute("snd_volume_eff " .. tostring(_G.amb_vol))
	_G.amb_vol = 0
	_G.mus_vol = 0
	give_info("tutorial_sleep")
	disable_info("actor_is_sleeping")
	disable_info("sleep_active")
	db.actor.psy_health = 0.25
	level.add_cam_effector("camera_effects\\fusker.anm", 5511, false, "")
	level.add_pp_effector("actor_hit.ppe", 5525, false)
	level.add_pp_effector("shock_hit.ppe", 5526, false)
	sgm_g.play_snd_at_actor([[sound_effects\wakeup]])
end
