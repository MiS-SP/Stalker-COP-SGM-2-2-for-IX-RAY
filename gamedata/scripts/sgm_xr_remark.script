local old_activate_scheme = xr_remark.action_remark_activity.activate_scheme
function activate_scheme(self)
	sgm_flags.table_mod_schemes[self.object:id()] = {}
	sgm_flags.table_mod_schemes[self.object:id()].avail_speak_bool = false
	sgm_flags.table_mod_schemes[self.object:id() .. "avail_speak_timer"] = 0
	sgm_flags.table_mod_schemes[self.object:id() .. "precond_start"] = 0
	sgm_flags.table_mod_schemes[self.object:id() .. "precond_end"] = 0
	old_activate_scheme(self)
end

xr_remark.action_remark_activity.activate_scheme = activate_scheme

xr_remark.get_target = function(self)
	local look_tbl = {}
	--' Если таргет не проинициализирован, то запускаем инициализатор.
	self.st.target_position, self.st.target_id, self.st.target_init = init_target(self.object, self.st.target)
	if self.st.target_init == false then
		--printf("target_is_ni!!!l")
		return nil
	end

	if self.st.target_id then
		--/ SGM in
		look_tbl.look_object = level.object_by_id(self.st.target_id)
		--/ SGM out
	end
	if self.st.target_position then
		look_tbl.look_position = self.st.target_position
	end
	--printf("look_table")
	--print_table(look_tbl)
	return look_tbl
end

function action_remark_activity:time_callback()
	--printf("TIME CALLBACK CALLED")
	self.state = state_sound
	self:update()
end

function action_remark_activity:update()
	--' 1. Мы должны повернуться на объект.
	--printf("REMARK: [%s] state[%s]", self.object:name(), self.state)

	if self.state == state_initial then
		local cb = { obj = self, func = self.time_callback }
		local target = self:get_target()
		if target == nil then
			local anim = xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.anim)
			state_mgr.set_state(self.object, anim, cb, 0)
			self.state = state_animation
			return
		end

		local anim = xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.anim)
		state_mgr.set_state(self.object, anim, cb, 0, target)
		self.state = state_animation

		--' Ожидание колбека от стейтменеджера
	elseif self.state == state_animation then
		--' 2. Мы должны отыграть фразу.
	elseif self.state == state_sound then
		if self.snd_scheduled == true then
			self.snd_started = true
			xr_sound.set_sound_play(self.object:id(), self.st.snd)
		end
		--' Должны выдать сигнал anim_end
		if self.anim_end_signalled == false then
			self.anim_end_signalled = true
			self.st.signals["anim_end"] = true
		end

		if self.st.signals["sound_end"] == true or self.st.signals["theme_end"] == true then
			--printf("SOUND_END signalled!!!")
			if self.sound_end_signalled == false then
				self.sound_end_signalled = true
			end
		end

		if self.sound_end_signalled == true and
			self.anim_end_signalled == true
		then
			if self.action_end_signalled == false then
				--printf("ACTION_END signalled!!!")
				self.st.signals["action_end"] = true
				self.action_end_signalled = true
			end
		end


		--' Нужно выдать связанный типс.
		if self.st.tips_id ~= nil then
			self.tips_sound = news_manager.send_tip_nosound(db.actor, self.st.tips_id, self.st.sender)
			if self.tips_sound ~= nil then
				--' Играем звук забитый
				self.tips_sound:play(db.actor, 0, sound_object.s2d)
			end
		end
	end
end
xr_remark.action_remark_activity.execute = function(self)
	action_base.execute(self)
	self:update()
	--/ SGM in
	self:check_logic_condlists(self.object, self.st.saved_ini, self.st.saved_section)
	if sgm_flags.table_mod_schemes[self.object:id()].update == nil then
		self:check_logic_condlists(self.object, self.st.saved_ini, self.st.saved_section)
		sgm_flags.table_mod_schemes[self.object:id()].update = time_global() + 1000
	end
	if sgm_flags.table_mod_schemes[self.object:id()].update ~= nil then
		if time_global() >= sgm_flags.table_mod_schemes[self.object:id()].update then
			sgm_flags.table_mod_schemes[self.object:id()].update = nil
		end
	end
	local npc = self.object
	local npc_id = npc:id()
	local scheme_param = sgm_flags.table_mod_schemes[npc_id]
	if scheme_param.approach_info ~= nil and scheme_param.approach_info[1] ~= nil and scheme_param.approach_info[2] ~= nil and sgm_g.dont_has_alife_info(scheme_param.approach_info[1]) then
		local dist_type = "<="
		if scheme_param.approach_info[3] ~= nil then dist_type = scheme_param.approach_info[3] end
		if dist_type == "<=" and distance_between(db.actor, npc) <= tonumber(scheme_param.approach_info[2]) then
			give_info(scheme_param.approach_info[1])
		elseif dist_type == ">=" and distance_between(db.actor, npc) >= tonumber(scheme_param.approach_info[2]) then
			give_info(scheme_param.approach_info[1])
		elseif dist_type == "<" and distance_between(db.actor, npc) < tonumber(scheme_param.approach_info[2]) then
			give_info(scheme_param.approach_info[1])
		elseif dist_type == ">" and distance_between(db.actor, npc) > tonumber(scheme_param.approach_info[2]) then
			give_info(scheme_param.approach_info[1])
		elseif dist_type == "=" and distance_between(db.actor, npc) == tonumber(scheme_param.approach_info[2]) then
			give_info(scheme_param.approach_info[1])
		end
	end
	if scheme_param.precond_timer ~= nil then
		if scheme_param.precond_timer == "true" then
			if sgm_flags.table_mod_schemes[npc_id .. "precond_start"] == 0 then
				sgm_flags.table_mod_schemes[npc_id .. "precond_start"] = time_global()
			end
			local p_timer = time_global() - sgm_flags.table_mod_schemes[npc_id .. "precond_start"]
			if exists(scheme_param.precond_action) and tonumber(scheme_param.precond_action[1]) ~= 0 and p_timer > tonumber(scheme_param.precond_action[1]) then
				sgm_functions.execute_condlist(npc, self.st.saved_section, scheme_param.precond_action[2])
				sgm_flags.table_mod_schemes[npc_id .. "precond_start"] = 0
			end
		else
			if sgm_flags.table_mod_schemes[npc_id .. "precond_start"] ~= 0 then
				sgm_flags.table_mod_schemes[npc_id .. "precond_start"] = 0
			end
		end
	end
	self:check_avail_speak(npc, scheme_param)
	--/ SGM out
end

xr_remark.action_remark_activity.check_logic_condlists = function (self, npc, ini, section)
	local scheme_param = sgm_flags.table_mod_schemes[npc:id()]
	--/if scheme_param.section==nil or (scheme_param.section~=nil and scheme_param.section~=self.st.saved_section) then --/Без постоянного обновления.
	--/   scheme_param.section = self.st.saved_section
	scheme_param.approach_info = sgm_functions.check_section_stick(ini, section, "approach_info", nil)
	scheme_param.precond_timer = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section, "precond_timer", nil))
	scheme_param.precond_action = sgm_functions.check_section_stick(ini, section, "precond_action", nil)
	scheme_param.avail_speak = sgm_functions.check_section_stick(ini, section, "avail_speak", nil)
	--/end
end
xr_remark.action_remark_activity.check_avail_speak = function (self, npc, scheme_param)
	local npc_id = npc:id()
	if exists(scheme_param.avail_speak) and exists(scheme_param.avail_speak[1]) then
		if dont_talk and sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] ~= 0 then
			sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] = 0
		end
		if sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] ~= 0 then
			if time_global() >= sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] then
				if scheme_param.avail_speak[3] == "false" and sgm_flags.table_mod_schemes[npc_id].avail_speak_bool == false then
					if sgm_g.find_in_string(scheme_param.avail_speak[2], "=") or sgm_g.find_in_string(scheme_param.avail_speak[2], "+") or sgm_g.find_in_string(scheme_param.avail_speak[2], "-") then
						sgm_functions.execute_condlist(npc, self.st.saved_section, scheme_param.avail_speak[2])
					else
						play_theme_snd(npc, scheme_param.avail_speak[2])
					end
					sgm_flags.table_mod_schemes[npc_id].avail_speak_bool = true
				elseif scheme_param.avail_speak[3] == "true" then
					if sgm_g.find_in_string(scheme_param.avail_speak[2], "=") or sgm_g.find_in_string(scheme_param.avail_speak[2], "+") or sgm_g.find_in_string(scheme_param.avail_speak[2], "-") then
						sgm_functions.execute_condlist(npc, self.st.saved_section, scheme_param.avail_speak[2])
					else
						play_theme_snd(npc, scheme_param.avail_speak[2])
					end
				end
				sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] = 0
			end
		else
			sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] = time_global() +
				(tonumber(scheme_param.avail_speak[1]) * 1000)
		end
	end
end
local old_set_scheme = xr_remark.set_scheme
function set_scheme(npc, ini, scheme, section, gulag_name)
	old_set_scheme(npc, ini, scheme, section, gulag_name)
	st.saved_ini       = ini
	st.saved_section   = section
end
xr_remark.set_scheme = set_scheme

xr_remark.init_target = function(obj, target_str)
	local function parse_target(target_str)
		local pos = string.find(target_str, ",")
		if pos then
			return string.sub(target_str, 1, pos - 1), string.sub(target_str, pos + 1)
		else
			return target_str, nil
		end
	end

	local function parse_type(target_str)
		local pos = string.find(target_str, "|")
		if pos == nil then
			instruction(obj, target_str)
		end
		local target_type, target = string.sub(target_str, 1, pos - 1), string.sub(target_str, pos + 1)
		if target == nil or target == "" or target_type == nil or target_type == "" then
			instruction(obj, target_str)
		end
		return target_type, target
	end
	local target_pos, target_id, target_initialized = nil, nil, false
	if target_str == "nil" then
		return target_pos, target_id, target_initialized
	elseif target_str == nil then
		instruction(obj, "")
	end
	local target_type, target = parse_type(target_str)

	if target_type == "story" then
		local story_id = parse_target(target)
		--/ SGM in
		target_id = get_story_object_id(story_id)
		--/ SGM out
		target_initialized = true
	elseif target_type == "path" then
		local path, point = parse_target(target)
		point = tonumber(point)
		if point then
			target_pos = patrol(path):point(point)
			target_initialized = true
		end
	elseif target_type == "job" then
		local job, gulag = parse_target(target)
		if gulag then
			gulag = xr_gulag.get_gulag_by_name(gulag)
		else
			gulag = xr_gulag.get_npc_smart(npc)
		end
		target_id = gulag:idNPCOnJob(job)
		target_initialized = (target_id ~= nil) and true
	else
		instruction(obj, target_str)
	end
	return target_pos, target_id, target_initialized
end
