activate_scheme = function(self)
	sgm_flags.table_mod_schemes[self.object:id()] = {}
	sgm_flags.table_mod_schemes[self.object:id()].avail_speak_bool = false
	sgm_flags.table_mod_schemes[self.object:id() .. "avail_speak_timer"] = 0
	sgm_flags.table_mod_schemes[self.object:id() .. "precond_start"] = 0
	sgm_flags.table_mod_schemes[self.object:id() .. "precond_end"] = 0
end

execute = function(self)
	self:check_logic_condlists(self.object, self.st.saved_ini, self.st.saved_section)
	if sgm_flags.table_mod_schemes[self.object:id()].update == nil then
		self:check_logic_condlists(self.object, self.st.saved_ini, self.st.saved_section)
		sgm_flags.table_mod_schemes[self.object:id()].update = time_global() + 1000
	end
	if sgm_flags.table_mod_schemes[self.object:id()].update ~= nil then
		if time_global() >= sgm_flags.table_mod_schemes[self.object:id()].update then
			sgm_flags.table_mod_schemes[self.object:id()].update = nil
		end
	end
	local npc = self.object
	local npc_id = npc:id()
	local scheme_param = sgm_flags.table_mod_schemes[npc_id]
	if scheme_param.approach_info ~= nil and scheme_param.approach_info[1] ~= nil and scheme_param.approach_info[2] ~= nil and sgm_g.dont_has_alife_info(scheme_param.approach_info[1]) then
		local dist_type = "<="
		if scheme_param.approach_info[3] ~= nil then dist_type = scheme_param.approach_info[3] end
		if dist_type == "<=" and distance_between(db.actor, npc) <= tonumber(scheme_param.approach_info[2]) then
			give_info(scheme_param.approach_info[1])
		elseif dist_type == ">=" and distance_between(db.actor, npc) >= tonumber(scheme_param.approach_info[2]) then
			give_info(scheme_param.approach_info[1])
		elseif dist_type == "<" and distance_between(db.actor, npc) < tonumber(scheme_param.approach_info[2]) then
			give_info(scheme_param.approach_info[1])
		elseif dist_type == ">" and distance_between(db.actor, npc) > tonumber(scheme_param.approach_info[2]) then
			give_info(scheme_param.approach_info[1])
		elseif dist_type == "=" and distance_between(db.actor, npc) == tonumber(scheme_param.approach_info[2]) then
			give_info(scheme_param.approach_info[1])
		end
	end
	if scheme_param.precond_timer ~= nil then
		if scheme_param.precond_timer == "true" then
			if sgm_flags.table_mod_schemes[npc_id .. "precond_start"] == 0 then
				sgm_flags.table_mod_schemes[npc_id .. "precond_start"] = time_global()
			end
			local p_timer = time_global() - sgm_flags.table_mod_schemes[npc_id .. "precond_start"]
			if exists(scheme_param.precond_action) and tonumber(scheme_param.precond_action[1]) ~= 0 and p_timer > tonumber(scheme_param.precond_action[1]) then
				sgm_functions.execute_condlist(npc, self.st.saved_section, scheme_param.precond_action[2])
				sgm_flags.table_mod_schemes[npc_id .. "precond_start"] = 0
			end
		else
			if sgm_flags.table_mod_schemes[npc_id .. "precond_start"] ~= 0 then
				sgm_flags.table_mod_schemes[npc_id .. "precond_start"] = 0
			end
		end
	end
	self:check_avail_speak(npc, scheme_param)
end

xr_remark.action_remark_activity.check_logic_condlists = function(self, npc, ini, section)
	local scheme_param = sgm_flags.table_mod_schemes[npc:id()]
	--/if scheme_param.section==nil or (scheme_param.section~=nil and scheme_param.section~=self.st.saved_section) then --/Без постоянного обновления.
	--/   scheme_param.section = self.st.saved_section
	scheme_param.approach_info = sgm_functions.check_section_stick(ini, section, "approach_info", nil)
	scheme_param.precond_timer = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section, "precond_timer", nil))
	scheme_param.precond_action = sgm_functions.check_section_stick(ini, section, "precond_action", nil)
	scheme_param.avail_speak = sgm_functions.check_section_stick(ini, section, "avail_speak", nil)
	--/end
end
xr_remark.action_remark_activity.check_avail_speak = function(self, npc, scheme_param)
	local npc_id = npc:id()
	if exists(scheme_param.avail_speak) and exists(scheme_param.avail_speak[1]) then
		if dont_talk and sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] ~= 0 then
			sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] = 0
		end
		if sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] ~= 0 then
			if time_global() >= sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] then
				if scheme_param.avail_speak[3] == "false" and sgm_flags.table_mod_schemes[npc_id].avail_speak_bool == false then
					if sgm_g.find_in_string(scheme_param.avail_speak[2], "=") or sgm_g.find_in_string(scheme_param.avail_speak[2], "+") or sgm_g.find_in_string(scheme_param.avail_speak[2], "-") then
						sgm_functions.execute_condlist(npc, self.st.saved_section, scheme_param.avail_speak[2])
					else
						play_theme_snd(npc, scheme_param.avail_speak[2])
					end
					sgm_flags.table_mod_schemes[npc_id].avail_speak_bool = true
				elseif scheme_param.avail_speak[3] == "true" then
					if sgm_g.find_in_string(scheme_param.avail_speak[2], "=") or sgm_g.find_in_string(scheme_param.avail_speak[2], "+") or sgm_g.find_in_string(scheme_param.avail_speak[2], "-") then
						sgm_functions.execute_condlist(npc, self.st.saved_section, scheme_param.avail_speak[2])
					else
						play_theme_snd(npc, scheme_param.avail_speak[2])
					end
				end
				sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] = 0
			end
		else
			sgm_flags.table_mod_schemes[npc_id .. "avail_speak_timer"] = time_global() +
				(tonumber(scheme_param.avail_speak[1]) * 1000)
		end
	end
end
function set_scheme(ini, section)
	st.saved_ini     = ini
	st.saved_section = section
end
