xr_reach_task.action_reach_task_location.commander_execute =  function (self)
	local squad = get_object_squad(self.object)
	local squad_target = simulation_objects.get_sim_obj_registry().objects[squad.assigned_target_id]
	if squad_target == nil and squad:get_script_target() ~= nil then
	 	squad_target = alife():object(squad.assigned_target_id)
	end
        --/ SGM in
	local is_assault_squad=false
        if sgm_functions.ReadAssaultSquad(squad.settings_id) then
           is_assault_squad=true
        end
        --/ SGM out
	local function update_movement (target, object)
		if target ~= nil and not object:is_talking() then
			if xr_conditions.surge_started() then
				object:set_movement_type(move.run)
				object:set_mental_state (anim.free)
				return
			end
                        if target:clsid() == clsid.online_offline_group_s then
				object:set_movement_type(move.run)
				if target.position:distance_to_sqr(object:position()) <= 10000 then
					object:set_mental_state (anim.danger)
				else
					object:set_mental_state (anim.free)
				end
			else
                                --/ SGM in
                                if is_assault_squad then
				   object:set_movement_type(move.run)
                                else
				   object:set_movement_type(move.walk)
                                end
                                --/ SGM out
				object:set_mental_state (anim.free)
			end
		else
			object:set_movement_type(move.stand)
		end
	end

	if squad_target ~= nil and not self.object:is_talking() then
		local pos, lv_id, gv_id = squad_target:get_location()
		if self.object:game_vertex_id() ~= gv_id then
			self.object:set_path_type			(game_object.game_path)
			self.object:set_dest_game_vertex_id	(gv_id)
			self.object:set_sight				(look.path_dir,nil,0)
			update_movement						(squad_target, self.object)
			patrols[self.target_id.."_to_"..self.squad_id]:set_command(self.object, self.cur_state, self.formation)
			return
		end

		self.object:set_path_type           ( game_object.level_path )
		if not self.object:accessible(pos) then
			local ttp = vector():set(0,0,0)
			lv_id = self.object:accessible_nearest(pos, ttp)
			pos = level.vertex_position(lv_id)
		end
		self.object:set_sight				(look.path_dir,nil,0)
		self.object:set_dest_level_vertex_id(lv_id)
		self.object:set_desired_position(pos)
	end
	update_movement						(squad_target, self.object)
	patrols[self.target_id.."_to_"..self.squad_id]:set_command(self.object, self.cur_state, self.formation)
end
xr_reach_task.action_reach_task_location.soldier_execute = function(self)
 	if self.time_to_update - time_global() > 0 then
		return
	end

	local squad = get_object_squad(self.object)
	local squad_target = simulation_objects.get_sim_obj_registry().objects[squad.assigned_target_id]

	if squad_target == nil and squad:get_script_target() ~= nil then
		squad_target = alife():object(squad.assigned_target_id)
	end

	self.time_to_update = time_global() + 1000
	self.l_vid, self.dir, self.cur_state = patrols[self.target_id.."_to_"..self.squad_id]:get_npc_command(self.object)
	self.l_vid = utils.send_to_nearest_accessible_vertex(self.object, self.l_vid)
	local desired_direction = self.dir
	--printf("desired_direction = %s", vec_to_str(desired_direction))
	if desired_direction ~= nil and not utils.vector_cmp(desired_direction, vector():set(0,0,0)) then
		desired_direction:normalize()
		self.object:set_desired_direction(desired_direction)
	end
	self.object:set_path_type(game_object.level_path)

	if squad_target == nil or squad_target:clsid() == clsid.online_offline_group_s or xr_conditions.surge_started() then
		self.object:set_movement_type(level.object_by_id(squad:commander_id()):movement_type())
		self.object:set_mental_state (level.object_by_id(squad:commander_id()):mental_state())
		return
	end
        --/ SGM in
	if get_object_squad(self.object)~=nil and get_object_squad(self.object):commander_id()~=nil and level.object_by_id(get_object_squad(self.object):commander_id())~=nil and level.object_by_id(get_object_squad(self.object):commander_id()):movement_type() == move.stand then
		self.object:set_movement_type(move.stand)
		return
	end
        --/ SGM out
	if level.vertex_position(self.l_vid):distance_to(self.object:position()) > 5 then
		self.object:set_movement_type(move.run)
	else
		self.object:set_movement_type(move.walk)
	end
end