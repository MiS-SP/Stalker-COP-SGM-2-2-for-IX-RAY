local old_sim_squad_scripted_init_squad = sim_squad_scripted.init_squad
function sim_squad_scripted:init_squad()
	printf("SGM PATCH: sim_squad_scripted")
	--/ SGM in
	self.squad_spot	        = sgm_functions.check_section_stick(sim_board.squad_ltx,self.settings_id,"spot",nil)
	self.member_death_condlist = xr_logic.parse_condlist(self,"member_death_condlist","on_member_death",utils.cfg_get_string(sim_board.squad_ltx,self.settings_id,"on_member_death",self,false,"",""))
	--/ SGM out
	old_sim_squad_scripted_init_squad(self)
end
-- sim_squad_scripted.init_squad = sim_squad_scripted.init_squad

function sim_squad_scripted:update()
	cse_alife_online_offline_group.update (self)
	self:refresh()
        --/ SGM in
        sgm_modules.module_squad(self)
        --/ SGM out
	-- Апдейт доступности для симуляции.
	simulation_objects.get_sim_obj_registry():update_avaliability(self)

	self:check_invulnerability()

	local script_target = self:get_script_target()

	--printf("[%s] SCRIPTED UPDATE. Target[%s]", self.id, tostring(script_target))
	if script_target == nil then
		self:generic_update()
		if self.need_to_reset_location_masks then
			self:set_location_types()
			self.need_to_reset_location_masks = false
		end
		return
	end

	self.sound_manager:update()

	local need_to_find_new_action = false
	if self.assigned_target_id ~= nil and self.assigned_target_id == script_target then
		if self.current_action ~= nil then
			if self.current_action.name == "stay_point" then
				--' Если экшн stay_point. Проверяем пришли ли до экшна.
				if self:check_squad_come_to_point() then
					--' Пришли в точку, перевыбрали цель
					need_to_find_new_action = true
					--printf("[%s] SCRIPTED need_to_find_new_action %s", self.id, tostring(need_to_find_new_action))
				else
					--' Не пришли в точку, апдейтимся дальше
					need_to_find_new_action = self:update_current_action()
					--printf("[%s] SCRIPTED need_to_find_new_action %s", self.id, tostring(need_to_find_new_action))
				end
			else
				--' Если экшн attack_point. Проверяем пришли ли после экшна.
				if self:update_current_action() then
					self:check_squad_come_to_point()
					need_to_find_new_action = true
					--printf("[%s] SCRIPTED need_to_find_new_action %s", self.id, tostring(need_to_find_new_action))
				end
			end
		else
			--' Проверяем пришли ли
			self:check_squad_come_to_point()
			need_to_find_new_action = true
			--printf("[%s] SCRIPTED need_to_find_new_action %s", self.id, tostring(need_to_find_new_action))
		end
	else
		if self.current_action == nil then
			need_to_find_new_action = true
			--printf("[%s] SCRIPTED need_to_find_new_action %s", self.id, tostring(need_to_find_new_action))
		else
			if self.current_action.major == true then
				if self:update_current_action() then
					self:check_squad_come_to_point()
					need_to_find_new_action = true
					--printf("[%s] SCRIPTED need_to_find_new_action %s", self.id, tostring(need_to_find_new_action))
				end
			else
				need_to_find_new_action = true
				--printf("[%s] SCRIPTED need_to_find_new_action %s", self.id, tostring(need_to_find_new_action))
			end
		end
	end

	if need_to_find_new_action == true then
		self.assigned_target_id = script_target

		if self.current_action ~= nil then
			self.current_action:finalize()
			self.current_action = nil
		end
		--' Если у нас нет текущей цели - просим выдать нам задание.
		self:get_next_action(false)
	end
	if self.need_to_reset_location_masks then
		self:set_location_types()
		self.need_to_reset_location_masks = false
	end
end

local function get_help_target_id(squad)
	if not can_help_actor(squad) then
		return nil
	end
	for k,v in pairs (xr_combat_ignore.fighting_with_actor_npcs) do
           --/ SGM in
           if k~=nil and alife():object(k)~=nil then
		local enemy_squad_id = alife():object(k).group_id
		if enemy_squad_id ~= nil then
			local target_squad = alife():object(enemy_squad_id)
			if target_squad and squad.position:distance_to_sqr(target_squad.position) < 150^2 and
				game_relations.is_factions_enemies(squad:get_squad_community(), target_squad:get_squad_community()) then
				return enemy_squad_id
			end
		end
           end
           --/ SGM out
	end
	return nil
end

function sim_squad_scripted:on_npc_death(npc)
	printf("Squad %s. Killed member %s", tostring(self.id), npc.id)
	self.sound_manager:unregister_npc(npc.id)
	self:unregister_member(npc.id)
	if self:npc_count()==0 then
		printf("REMOVING DEAD SQUAD %s", tostring(self.id))
		if self.current_action ~= nil then
			self.current_action:finalize()
			self.current_action = nil
		end
		if self.death_condlist ~= nil then
			xr_logic.pick_section_from_condlist(db.actor, self, self.death_condlist)
		end
		self.board:remove_squad(self)
                --/ SGM in
                sgm_callbacks.on_squad_death(self.settings_id,get_level_by_game_vertex(self.m_smart_terrain_id))
		return
        else
		if self.member_death_condlist ~= nil then
			xr_logic.pick_section_from_condlist(db.actor, self, self.member_death_condlist)
		end
                --/ SGM out
	end
	self:refresh()
end
--/ SGM in
--' Попадание по НПС
function sim_squad_scripted:on_npc_hit(victim,who,with_actor)
        sgm_flags.table_squad_dm={}
	if with_actor==true then
	   sgm_flags.table_squad_dm["actor_hit_to_squad_"..self.settings_id]=victim:id()
	end
end
--/ SGM out
--/ SGM in
--' Создание чуваков в отряд 2
function sim_squad_scripted:create_member(x,y,z,lv,gv)
	local ini = system_ini()
	local spawn_sections = utils.parse_names(utils.cfg_get_string(ini, self.settings_id, "npc", self, false, "", ""))
	if #spawn_sections ~= 0 then
		for k,v in pairs(spawn_sections) do
			self:add_squad_member(v,vector():set(x,y,z),lv,gv,k)
		end
	end
	local random_spawn = utils.cfg_get_string(ini,self.settings_id,"npc_random",self,false,"",nil)
	if random_spawn ~= nil then
		random_spawn = utils.parse_names(random_spawn)
		local count_min, count_max =utils.r_2nums(ini, self.settings_id,"npc_in_squad",1,2)
		if count_min > count_max then
			abort("min_count can't be greater then max_count [%s]!!!!!", self.settings_id)
		end
		local random_count = math.random(count_min, count_max)
		for i = 1,random_count do
			local random_id = math.random(1,#random_spawn)
			self:add_squad_member(random_spawn[random_id],vector():set(x,y,z),lv,gv,random_id)
		end
	elseif #spawn_sections == 0 then
		abort("You are trying to spawn an empty squad [%s]!!!", self.settings_id)
	end
	self:refresh()
end
--/ SGM out
function sim_squad_scripted:can_switch_offline()
        --/ SGM in
        local get_online_cond=sgm_functions.ReadOnlineCond(self.settings_id)
        if exists(get_online_cond) then
           local online_cond=sgm_functions.check_string_condlist(get_online_cond)
           if online_cond=="false" or not online_cond then
              return true
           end
        end
        --/ SGM out
	return cse_alife_online_offline_group.can_switch_offline(self)
end
function sim_squad_scripted:can_switch_online()
        --/ SGM in
        local get_online_cond=sgm_functions.ReadOnlineCond(self.settings_id)
        if exists(get_online_cond) then
           local online_cond=sgm_functions.check_string_condlist(get_online_cond)
           if online_cond=="false" or not online_cond then
              return false
           end
        end
        --/ SGM out
	return cse_alife_online_offline_group.can_switch_online(self)
end
function sim_squad_scripted:refresh()
   if self:commander_id()==nil then
      self:hide()
      return
   end
   --/ SGM in
   self:set_spot_squad_commander(self:commander_id())
   --/ SGM out
   self:show()
end
--/ SGM in
function sim_squad_scripted:set_spot_squad_commander(source_id)
   if exists(self.squad_spot) then
      if exists(self.squad_spot[3]) and has_alife_info(tostring(self.squad_spot[3])) then
         add_spot_on_map(source_id,tostring(self.squad_spot[1]),tostring(self.squad_spot[2]))
      elseif not exists(self.squad_spot[3]) then
         add_spot_on_map(source_id,tostring(self.squad_spot[1]),tostring(self.squad_spot[2]))
      end
   end
end
--/ SGM out