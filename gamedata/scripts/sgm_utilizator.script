---==================================================================================================---
--------------------------------------------------------------------------------------------------------
--------------------------------------(����-����������)-------------------------------------------------
--------------------------------------------------------------------------------------------------------
---==================================================================================================---
function utilizator_main()
   utilizator_update()
end

function utilizator_update()
   local level_name = level.name()
   if sgm_g.dont_has_alife_info("utilizators_spawn") then
      sgm_g.create("zat_utilizator_box", 116.411, -3.935, 176.399, 1165984, 316)
      sgm_g.create("jup_utilizator_box", -49.738, -0.619, 197.104, 636191, 368)
      sgm_g.create("pri_utilizator_box", 158.308, -0.095, -184.755, 387157, 708)
      give_info("utilizators_spawn")
   end
end

function utilizator_checker(victim)
   if sgm_g.check_seconds(1) then
      register_check_to_box(victim, "zat_utilizator_box", "zat_utilizator_has_items", "zat_utilizator_cash")
      register_check_to_box(victim, "jup_utilizator_box", "jup_utilizator_has_items", "jup_utilizator_cash")
      register_check_to_box(victim, "pri_utilizator_box", "pri_utilizator_has_items", "pri_utilizator_cash")
   end
end

function utilizator_reward(victim)
   register_reward_to_box(victim, "zat_utilizator_box", "zat_utilizator_cash")
   register_reward_to_box(victim, "jup_utilizator_box", "jup_utilizator_cash")
   register_reward_to_box(victim, "pri_utilizator_box", "pri_utilizator_cash")
end

function register_check_to_box(victim, box_section, has_item_info, cash_param)
   if sgm_g.find_in_string(victim:section(), box_section) then
      if victim:is_inv_box_empty() == false and sgm_g.dont_has_alife_info(has_item_info) then
         give_info(has_item_info)
         if sgm_g.dont_has_alife_info("utilizators_tutorial") then
            game.start_tutorial("about_utilizator_box")
            give_info("utilizators_tutorial")
            sgm_g.game_hide_menu()
         end
      elseif victim:is_inv_box_empty() == true and has_alife_info(has_item_info) then
         disable_info(has_item_info)
      end
      if has_alife_info(has_item_info) and distance_between(db.actor, victim) > sgm_g.r_mod_params("number", "utilizator_process_distance", 80) then
         if sgm_g.read_mod_param(cash_param) == nil then
            sgm_g.write_mod_param(cash_param, 0)
         end
         start_process(victim, cash_param)
      end
   end
end

function register_reward_to_box(victim, box_section, cash_param)
   if sgm_g.find_in_string(victim:section(), box_section) then
      if sgm_g.read_mod_param(cash_param) ~= nil and sgm_g.read_mod_param(cash_param) > 0 then
         sgm_g.game_hide_menu()
         dialogs.relocate_money(db.actor, sgm_g.read_mod_param(cash_param), "in", 8000)
         sgm_g.write_mod_param(cash_param, 0)
         sgm_g.game_hide_menu()
         sgm_g.congratulate_with_event(10000, game.translate_string("st_utilizator_used_event"), true)
      end
   end
end

function start_process(victim, parse_to)
   local function calc(temp, item)
      if item ~= nil then
         local main_cost = math.floor(((sgm_functions.ReadCost(item:section()) * item:condition()) * sgm_g.r_mod_params("number", "utilizator_cash_multiplier", 0.06)))
         sgm_g.write_mod_param(parse_to, sgm_g.read_mod_param(parse_to) + main_cost)
         alife():release(alife():object(item:id()), true)
      end
   end
   victim:iterate_inventory_box(calc, victim)
end

-------------------------------------//Copyright GeJorge//-------------------------------------------------
