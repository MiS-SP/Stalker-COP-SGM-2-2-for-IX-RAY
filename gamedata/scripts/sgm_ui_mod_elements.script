---==================================================================================================---
--------------------------------------------------------------------------------------------------------
----------------------------------------(Динамические окна)---------------------------------------------
--------------------------------------------------------------------------------------------------------
---==================================================================================================---
------------------------------------------------------------------------------
--                                 МП-3 плеер                               --
------------------------------------------------------------------------------
local mp3_obj
local mp3_info = ""
local mp3_mode = "default"
local mp3_add_value = 0.1
local mp3_chosen_list = nil
local mp3_played_list = nil
local mp3_player_section = 1
mp3_length_position, mp3_last_position, mp3_plays = 0, 0, nil
local mp3_table_merry = {
   { sound = [[Веселая\Трек_1]], title = "Дорожка 1", author = "Ленинград - Агент 007", id = 1 },
   { sound = [[Веселая\Трек_2]], title = "Дорожка 2", author = "-", id = 2 },
   { sound = [[Веселая\Трек_3]], title = "Дорожка 3", author = "-", id = 3 },
   { sound = [[Веселая\Трек_4]], title = "Дорожка 4", author = "-", id = 4 },
   { sound = [[Веселая\Трек_5]], title = "Дорожка 5", author = "-", id = 5 },
   { sound = [[Веселая\Трек_6]], title = "Дорожка 6", author = "-", id = 6 },
   { sound = [[Веселая\Трек_7]], title = "Дорожка 7", author = "-", id = 7 },
   { sound = [[Веселая\Трек_8]], title = "Дорожка 8", author = "Chakaron - El Mudo", id = 8 }
}
local mp3_table_dance = {
   { sound = [[Клубная\Трек_1]], title = "Дорожка 1", author = "Fatboy Slim - Weapon Of Choice 2010", id = 1 },
   { sound = [[Клубная\Трек_2]], title = "Дорожка 2", author = "The Prodigy - Omen", id = 2 },
   { sound = [[Клубная\Трек_3]], title = "Дорожка 3", author = "-", id = 3 },
   { sound = [[Клубная\Трек_4]], title = "Дорожка 4", author = "Dj Winner - Electro zhest", id = 4 },
   { sound = [[Клубная\Трек_5]], title = "Дорожка 5", author = "Dj Xeon - Sweet Pill's 4", id = 5 },
   { sound = [[Клубная\Трек_6]], title = "Дорожка 6", author = "DJ Romantic & Andi Vax - I Feel You", id = 6 },
   { sound = [[Клубная\Трек_7]], title = "Дорожка 7", author = "-", id = 7 },
   { sound = [[Клубная\Трек_8]], title = "Дорожка 8", author = "-", id = 8 },
   { sound = [[Клубная\Трек_9]], title = "Дорожка 9", author = "Bald Bros feat Levie - Love in Redlight", id = 9 },
   { sound = [[Клубная\Трек_10]], title = "Дорожка 10", author = "-", id = 10 },
   { sound = [[Клубная\Трек_11]], title = "Дорожка 11", author = "-", id = 11 },
   { sound = [[Клубная\Трек_12]], title = "Дорожка 12", author = "-", id = 12 },
   { sound = [[Клубная\Трек_13]], title = "Дорожка 13", author = "-", id = 13 },
   { sound = [[Клубная\Трек_14]], title = "Дорожка 14", author = "Antoine Clamaran - Gold", id = 14 },
   { sound = [[Клубная\Трек_15]], title = "Дорожка 15", author = "-", id = 15 },
   { sound = [[Клубная\Трек_16]], title = "Дорожка 16", author = "Fragma - Forever and a day", id = 16 },
   { sound = [[Клубная\Трек_17]], title = "Дорожка 17", author = "-", id = 17 },
   { sound = [[Клубная\Трек_18]], title = "Дорожка 18", author = "Max Creative & DJ Cross - Rock This", id = 18 },
   { sound = [[Клубная\Трек_19]], title = "Дорожка 19", author = "Смысловые галлюцинации - Вечно молодой", id = 19 },
   { sound = [[Клубная\Трек_20]], title = "Дорожка 20", author = "-", id = 20 },
   { sound = [[Клубная\Трек_21]], title = "Дорожка 21", author = "Klaas - Feel The Love", id = 21 },
   { sound = [[Клубная\Трек_22]], title = "Дорожка 22", author = "-", id = 22 },
   { sound = [[Клубная\Трек_23]], title = "Дорожка 23", author = "-", id = 23 },
   { sound = [[Клубная\Трек_24]], title = "Дорожка 24", author = "Denis The Menace - Show Me A Reason", id = 24 },
   { sound = [[Клубная\Трек_25]], title = "Дорожка 25", author = "Serge Devant - Take Me With You", id = 25 },
   { sound = [[Клубная\Трек_26]], title = "Дорожка 26", author = "Serge Devant - Addicted", id = 26 },
   { sound = [[Клубная\Трек_27]], title = "Дорожка 27", author = "Chase And Status Feat. Plan B - End Credits", id = 27 },
   { sound = [[Клубная\Трек_28]], title = "Дорожка 28", author = "Promodj - Only for you mix", id = 28 },
   { sound = [[Клубная\Трек_29]], title = "Дорожка 29", author = "Stromae - Alors on Danse", id = 29 },
   { sound = [[Клубная\Трек_30]], title = "Дорожка 30", author = "-", id = 30 },
   { sound = [[Клубная\Трек_31]], title = "Дорожка 31", author = "Laselva Feat Charlotte Spink - Take Me Away", id = 31 },
   { sound = [[Клубная\Трек_32]], title = "Дорожка 32", author = "-", id = 32 },
   { sound = [[Клубная\Трек_33]], title = "Дорожка 33", author = "-", id = 33 },
   { sound = [[Клубная\Трек_34]], title = "Дорожка 34", author = "-", id = 34 },
   { sound = [[Клубная\Трек_35]], title = "Дорожка 35", author = "-", id = 35 },
   { sound = [[Клубная\Трек_36]], title = "Дорожка 36", author = "Sonique - Sky", id = 36 },
   { sound = [[Клубная\Трек_37]], title = "Дорожка 37", author = "-", id = 37 },
   { sound = [[Клубная\Трек_38]], title = "Дорожка 38", author = "-", id = 38 },
   { sound = [[Клубная\Трек_39]], title = "Дорожка 39", author = "-", id = 39 },
   { sound = [[Клубная\Трек_40]], title = "Дорожка 40", author = "-", id = 40 },
   { sound = [[Клубная\Трек_41]], title = "Дорожка 41", author = "-", id = 41 },
   { sound = [[Клубная\Трек_42]], title = "Дорожка 42", author = "-", id = 42 },
   { sound = [[Клубная\Трек_43]], title = "Дорожка 43", author = "-", id = 43 },
   { sound = [[Клубная\Трек_44]], title = "Дорожка 44", author = "-", id = 44 },
   { sound = [[Клубная\Трек_45]], title = "Дорожка 45", author = "-", id = 45 },
   { sound = [[Клубная\Трек_46]], title = "Дорожка 46", author = "-", id = 46 },
   { sound = [[Клубная\Трек_47]], title = "Дорожка 47", author = "-", id = 47 },
   { sound = [[Клубная\Трек_48]], title = "Дорожка 48", author = "-", id = 48 },
   { sound = [[Клубная\Трек_49]], title = "Дорожка 49", author = "Tiesto - In The Dark", id = 49 },
   { sound = [[Клубная\Трек_50]], title = "Дорожка 50", author = "DVJ Bazuka - Saw", id = 50 },
   { sound = [[Клубная\Трек_51]], title = "Дорожка 51", author = "DVJ Bazuka - Slipin Away", id = 51 },
   { sound = [[Клубная\Трек_52]], title = "Дорожка 52", author = "-", id = 52 },
   { sound = [[Клубная\Трек_53]], title = "Дорожка 53", author = "-", id = 53 },
   { sound = [[Клубная\Трек_54]], title = "Дорожка 54", author = "-", id = 54 },
   { sound = [[Клубная\Трек_55]], title = "Дорожка 55", author = "-", id = 55 },
   { sound = [[Клубная\Трек_56]], title = "Дорожка 56", author = "Dj Natasha Rostova - 17-01-2009", id = 56 },
   { sound = [[Клубная\Трек_57]], title = "Дорожка 57", author = "Marcel Woods - Tomorrow", id = 57 },
   { sound = [[Клубная\Трек_58]], title = "Дорожка 58", author = "Sultan & Ned Shepard feat Dirty Vegas - Crimson Sun", id = 58 },
   { sound = [[Клубная\Трек_59]], title = "Дорожка 59", author = "Armin Van Buuren feat. sophie Ellis Bextor - not giving up on loves", id = 59 },
   { sound = [[Клубная\Трек_60]], title = "Дорожка 60", author = "David Guetta - love dont let me go", id = 60 },
   { sound = [[Клубная\Трек_61]], title = "Дорожка 61", author = "David Guetta - the world is mine", id = 61 },
   { sound = [[Клубная\Трек_62]], title = "Дорожка 62", author = "David Guetta - winner of the game", id = 62 },
   { sound = [[Клубная\Трек_63]], title = "Дорожка 63", author = "Dj Kaffein - Follow Me", id = 63 },
   { sound = [[Клубная\Трек_64]], title = "Дорожка 64", author = "Moonbeam & Marrow Dojah - Insincere", id = 64 },
   { sound = [[Клубная\Трек_65]], title = "Дорожка 65", author = "Moonbeam - 7 seconds", id = 65 },
   { sound = [[Клубная\Трек_66]], title = "Дорожка 66", author = "Moonbeam - i love mornings extended mix", id = 66 },
   { sound = [[Клубная\Трек_67]], title = "Дорожка 67", author = "Smart Apes - One Day You Won't See The Sunrise", id = 67 },
   { sound = [[Клубная\Трек_68]], title = "Дорожка 68", author = "Tiga - you gonna want me", id = 68 },
   { sound = [[Клубная\Трек_69]], title = "Дорожка 69", author = "-", id = 69 },
   { sound = [[Клубная\Трек_70]], title = "Дорожка 70", author = "Underworld - Always Loved A Film", id = 70 },
   { sound = [[Клубная\Трек_71]], title = "Дорожка 71", author = "AnnaGrace - Don't Let Go", id = 71 },
   { sound = [[Клубная\Трек_72]], title = "Дорожка 72", author = "AnnaGrace - You Do Want Me", id = 72 },
   { sound = [[Клубная\Трек_73]], title = "Дорожка 73", author = "Sgt Slick - Like This", id = 73 },
   { sound = [[Клубная\Трек_74]], title = "Дорожка 74", author = "Paul Johns Feat. Umberto Tabbi - Ciao Siciliano", id = 74 },
   { sound = [[Клубная\Трек_75]], title = "Дорожка 75", author = "TV Rock & Zoe Badwi -  Release Me", id = 75 },
   { sound = [[Клубная\Трек_76]], title = "Дорожка 76", author = "Schiller feat. September - Breathe", id = 76 },
   { sound = [[Клубная\Трек_77]], title = "Дорожка 77", author = "Maurizio Inzaghi - Searching For Love", id = 77 },
   { sound = [[Клубная\Трек_78]], title = "Дорожка 78", author = "Supermode - Tell Me Why 2009", id = 78 },
   { sound = [[Клубная\Трек_79]], title = "Дорожка 79", author = "Annagrace - You Make Me Feel", id = 79 },
   { sound = [[Клубная\Трек_80]], title = "Дорожка 80", author = "Moby - Disco Lies", id = 80 },
   { sound = [[Клубная\Трек_81]], title = "Дорожка 81", author = "Roger Sanchez - Not Enough", id = 81 },
   { sound = [[Клубная\Трек_82]], title = "Дорожка 82", author = "A.G.Trio - Jungle", id = 82 },
   { sound = [[Клубная\Трек_83]], title = "Дорожка 83", author = "Blank & Jones - Miracle Cure", id = 83 },
   { sound = [[Клубная\Трек_84]], title = "Дорожка 84", author = "Everything But The Girls - Missing", id = 84 },
   { sound = [[Клубная\Трек_85]], title = "Дорожка 85", author = "Fukkk Offf - Brain Rock", id = 85 },
   { sound = [[Клубная\Трек_86]], title = "Дорожка 86", author = "Michael Jackson - Who Is It", id = 86 },
   { sound = [[Клубная\Трек_87]], title = "Дорожка 87", author = "-", id = 87 },
   { sound = [[Клубная\Трек_88]], title = "Дорожка 88", author = "Jozhy & Angel - Wait For Tomorrow", id = 88 },
   { sound = [[Клубная\Трек_89]], title = "Дорожка 89", author = "4 Strings - Take Me Away", id = 89 },
   { sound = [[Клубная\Трек_90]], title = "Дорожка 90", author = "Lara Fabian - I Will Love Again", id = 90 },
   { sound = [[Клубная\Трек_91]], title = "Дорожка 91", author = "DJ Free Pink - Please Dont Leave", id = 91 },
   { sound = [[Клубная\Трек_92]], title = "Дорожка 92", author = "Eurythmics - Sweet Dreams", id = 92 },
   { sound = [[Клубная\Трек_93]], title = "Дорожка 93", author = "Levi Star - Melt Inside", id = 93 },
   { sound = [[Клубная\Трек_94]], title = "Дорожка 94", author = "Armin Van Buuren - Mirage", id = 94 },
   { sound = [[Клубная\Трек_95]], title = "Дорожка 95", author = "Plan B - Prayin", id = 95 },
   { sound = [[Клубная\Трек_96]], title = "Дорожка 96", author = "Plan B - She Said Original", id = 96 },
   { sound = [[Клубная\Трек_97]], title = "Дорожка 97", author = "Christina Aguilera - Not Myself Tonight", id = 97 },
   { sound = [[Клубная\Трек_98]], title = "Дорожка 98", author = "David Guetta - Love Is Gone", id = 98 },
   { sound = [[Клубная\Трек_99]], title = "Дорожка 99", author = "Jaydee - Plastic Dreams", id = 99 },
   { sound = [[Клубная\Трек_100]], title = "Дорожка 100", author = "Spencer & Hill - Dub Disco", id = 100 },
   { sound = [[Клубная\Трек_101]], title = "Дорожка 101", author = "Eminem ft. Rihanna - Love The Way You Lie", id = 101 },
   { sound = [[Клубная\Трек_102]], title = "Дорожка 102", author = "Kato & Dj Jose & Jon - Turn the lights off", id = 102 },
   { sound = [[Клубная\Трек_103]], title = "Дорожка 103", author = "Supermode - Tell me why", id = 103 },
   { sound = [[Клубная\Трек_104]], title = "Дорожка 104", author = "Massive Attack - Paradise Circus", id = 104 },
   { sound = [[Клубная\Трек_105]], title = "Дорожка 105", author = "Melanie C - I Turn To You", id = 105 },
   { sound = [[Клубная\Трек_106]], title = "Дорожка 106", author = "September - Cry For You", id = 106 },
   { sound = [[Клубная\Трек_107]], title = "Дорожка 107", author = "Mondotek - Alive", id = 107 },
   { sound = [[Клубная\Трек_108]], title = "Дорожка 108", author = "Jay-Z - 99 Problems", id = 108 },
   { sound = [[Клубная\Трек_109]], title = "Дорожка 109", author = "Prodigy - Mescaline", id = 109 },
   { sound = [[Клубная\Трек_110]], title = "Дорожка 110", author = "Dj Miller - Makes Me Happy", id = 110 },
   { sound = [[Клубная\Трек_111]], title = "Дорожка 111", author = "Britney Spears - Till The World Ends", id = 111 },
   { sound = [[Клубная\Трек_112]], title = "Дорожка 112", author = "Bobina - Invincible Touch", id = 112 },
   { sound = [[Клубная\Трек_113]], title = "Дорожка 113", author = "Deepside Deejays - Never Be Alone Radio Edit", id = 113 },
   { sound = [[Клубная\Трек_114]], title = "Дорожка 114", author = "Ferry Corsten - Punk Arty", id = 114 },
   { sound = [[Клубная\Трек_115]], title = "Дорожка 115", author = "Ian Carey - Redlight", id = 115 },
   { sound = [[Клубная\Трек_116]], title = "Дорожка 116", author = "Justin Timberlake - Cry Me A River", id = 116 },
   { sound = [[Клубная\Трек_117]], title = "Дорожка 117", author = "Katy Perry - Last Friday Night", id = 117 },
   { sound = [[Клубная\Трек_118]], title = "Дорожка 118", author = "Lenny Kravitz - Where Are We Runnin", id = 118 },
   { sound = [[Клубная\Трек_119]], title = "Дорожка 119", author = "Lenny Kravitz - Fly Away", id = 119 },
   { sound = [[Клубная\Трек_120]], title = "Дорожка 120", author = "Lenny Kravitz - I Belong To You", id = 120 },
   { sound = [[Клубная\Трек_121]], title = "Дорожка 121", author = "Lenny Kravitz - If You Cant Say No", id = 121 },
   { sound = [[Клубная\Трек_122]], title = "Дорожка 122", author = "Lenny Kravitz - Ill Be Waiting", id = 122 },
   { sound = [[Клубная\Трек_123]], title = "Дорожка 123", author = "Lenny Kravitz - Let Love Rule", id = 123 },
   { sound = [[Клубная\Трек_124]], title = "Дорожка 124", author = "Lenny Kravitz - Love Love Love", id = 124 },
   { sound = [[Клубная\Трек_125]], title = "Дорожка 125", author = "Madcon - Beggin Ost Step Up", id = 125 },
   { sound = [[Клубная\Трек_126]], title = "Дорожка 126", author = "Martin Solveig - Jealousy", id = 126 },
   { sound = [[Клубная\Трек_127]], title = "Дорожка 127", author = "Martin Solveig - Madan", id = 127 },
   { sound = [[Клубная\Трек_128]], title = "Дорожка 128", author = "Martin Solveig - Rejection", id = 128 },
   { sound = [[Клубная\Трек_129]], title = "Дорожка 129", author = "Meck - Windmills", id = 129 },
   { sound = [[Клубная\Трек_130]], title = "Дорожка 130", author = "Miley Cyrus - Who Owns My Heart", id = 130 },
   { sound = [[Клубная\Трек_131]], title = "Дорожка 131", author = "Narcotic Thrust - I Like It", id = 131 },
   { sound = [[Клубная\Трек_132]], title = "Дорожка 132", author = "Richard Durand & Ellie Lawson - Wide Awake", id = 132 },
   { sound = [[Клубная\Трек_133]], title = "Дорожка 133", author = "Rihanna - Sandm", id = 133 },
   { sound = [[Клубная\Трек_134]], title = "Дорожка 134", author = "Robbie Williams - Bodies", id = 134 },
   { sound = [[Клубная\Трек_135]], title = "Дорожка 135", author = "Sandra - In The Heat Of The Night", id = 135 },
   { sound = [[Клубная\Трек_136]], title = "Дорожка 136", author = "Techno Mafia - Openair Silence", id = 136 },
   { sound = [[Клубная\Трек_137]], title = "Дорожка 137", author = "The Cranberries - Zombie", id = 137 },
   { sound = [[Клубная\Трек_138]], title = "Дорожка 138", author = "-", id = 138 },
   { sound = [[Клубная\Трек_139]], title = "Дорожка 139", author = "-", id = 139 },
   { sound = [[Клубная\Трек_140]], title = "Дорожка 140", author = "-", id = 140 },
   { sound = [[Клубная\Трек_141]], title = "Дорожка 141", author = "-", id = 141 },
   { sound = [[Клубная\Трек_142]], title = "Дорожка 142", author = "-", id = 142 },
   { sound = [[Клубная\Трек_143]], title = "Дорожка 143", author = "-", id = 143 },
   { sound = [[Клубная\Трек_144]], title = "Дорожка 144", author = "-", id = 144 },
   { sound = [[Клубная\Трек_145]], title = "Дорожка 145", author = "-", id = 145 },
   { sound = [[Клубная\Трек_146]], title = "Дорожка 146", author = "-", id = 146 },
   { sound = [[Клубная\Трек_147]], title = "Дорожка 147", author = "-", id = 147 },
   { sound = [[Клубная\Трек_148]], title = "Дорожка 148", author = "Solid Base feat Robson - Mirror Mirror", id = 148 },
   { sound = [[Клубная\Трек_149]], title = "Дорожка 149", author = "The Kdms - Tonight", id = 149 },
   { sound = [[Клубная\Трек_150]], title = "Дорожка 150", author = "We Once Had An Empire", id = 150 },
   { sound = [[Клубная\Трек_151]], title = "Дорожка 151", author = "G Spott - Sadness", id = 151 },
   { sound = [[Клубная\Трек_152]], title = "Дорожка 152", author = "The White Stripes - Seven Nation Army", id = 152 },
   { sound = [[Клубная\Трек_153]], title = "Дорожка 153", author = "Nero - Guilt", id = 153 },
   { sound = [[Клубная\Трек_154]], title = "Дорожка 154", author = "Nero - Must Be The Feeling", id = 154 },
   { sound = [[Клубная\Трек_155]], title = "Дорожка 155", author = "Example - Changed The Way You Kiss Me", id = 155 },
   { sound = [[Клубная\Трек_156]], title = "Дорожка 156", author = "Swanky Tunes - Wanna Be Your Dog", id = 156 },
   { sound = [[Клубная\Трек_157]], title = "Дорожка 157", author = "Michael Calfan - Resurrection", id = 157 },
   { sound = [[Клубная\Трек_158]], title = "Дорожка 158", author = "Borshit - Neuropi", id = 158 },
   { sound = [[Клубная\Трек_159]], title = "Дорожка 159", author = "Starkillers & Alex Kenji - Pressure", id = 159 }
}
local mp3_table_theme = {
   { sound = [[Саундтреки\Трек_1]], title = "Дорожка 1", author = "-", id = 1 },
   { sound = [[Саундтреки\Трек_2]], title = "Дорожка 2", author = "-", id = 2 },
   { sound = [[Саундтреки\Трек_3]], title = "Дорожка 3", author = "-", id = 3 },
   { sound = [[Саундтреки\Трек_4]], title = "Дорожка 4", author = "-", id = 4 },
   { sound = [[Саундтреки\Трек_5]], title = "Дорожка 5", author = "-", id = 5 },
   { sound = [[Саундтреки\Трек_6]], title = "Дорожка 6", author = "-", id = 6 },
   { sound = [[Саундтреки\Трек_7]], title = "Дорожка 7", author = "Soundtrack - Resident evil", id = 7 },
   { sound = [[Саундтреки\Трек_8]], title = "Дорожка 8", author = "Fluke - Absurd", id = 8 },
   { sound = [[Саундтреки\Трек_9]], title = "Дорожка 9", author = "Hans Zimmer - Discombobulate", id = 9 },
   { sound = [[Саундтреки\Трек_10]], title = "Дорожка 10", author = "Hell March 3", id = 10 },
   { sound = [[Саундтреки\Трек_11]], title = "Дорожка 11", author = "-", id = 11 },
   { sound = [[Саундтреки\Трек_12]], title = "Дорожка 12", author = "-", id = 12 },
   { sound = [[Саундтреки\Трек_13]], title = "Дорожка 13", author = "-", id = 13 },
   { sound = [[Саундтреки\Трек_14]], title = "Дорожка 14", author = "-", id = 14 },
   { sound = [[Саундтреки\Трек_15]], title = "Дорожка 15", author = "-", id = 15 },
   { sound = [[Саундтреки\Трек_16]], title = "Дорожка 16", author = "Alexandre Desplat - The Ghost Writer", id = 16 },
   { sound = [[Саундтреки\Трек_17]], title = "Дорожка 17", author = "-", id = 17 }
}
local mp3_table_other = {
   { sound = [[Другая\Трек_1]], title = "Дорожка 1", author = "-", id = 1 },
   { sound = [[Другая\Трек_2]], title = "Дорожка 2", author = "-", id = 2 },
   { sound = [[Другая\Трек_3]], title = "Дорожка 3", author = "-", id = 3 },
   { sound = [[Другая\Трек_4]], title = "Дорожка 4", author = "-", id = 4 },
   { sound = [[Другая\Трек_5]], title = "Дорожка 5", author = "-", id = 5 },
   { sound = [[Другая\Трек_6]], title = "Дорожка 6", author = "-", id = 6 },
   { sound = [[Другая\Трек_7]], title = "Дорожка 7", author = "-", id = 7 },
   { sound = [[Другая\Трек_8]], title = "Дорожка 8", author = "-", id = 8 },
   { sound = [[Другая\Трек_9]], title = "Дорожка 9", author = "-", id = 9 },
   { sound = [[Другая\Трек_10]], title = "Дорожка 10", author = "-", id = 10 },
   { sound = [[Другая\Трек_11]], title = "Дорожка 11", author = "-", id = 11 },
   { sound = [[Другая\Трек_12]], title = "Дорожка 12", author = "-", id = 12 },
   { sound = [[Другая\Трек_13]], title = "Дорожка 13", author = "-", id = 13 },
   { sound = [[Другая\Трек_14]], title = "Дорожка 14", author = "-", id = 14 },
   { sound = [[Другая\Трек_15]], title = "Дорожка 15", author = "-", id = 15 },
   { sound = [[Другая\Трек_16]], title = "Дорожка 16", author = "17-Apocalyptica-Path Vol.2 Feat. Sandra Nasic", id = 16 },
   { sound = [[Другая\Трек_17]], title = "Дорожка 17", author = "-", id = 17 },
   { sound = [[Другая\Трек_18]], title = "Дорожка 18", author = "-", id = 18 },
   { sound = [[Другая\Трек_19]], title = "Дорожка 19", author = "Shitlist (Natural Born Killers)", id = 19 },
   { sound = [[Другая\Трек_20]], title = "Дорожка 20", author = "Shiny Toy Guns - Le Disko", id = 20 },
   { sound = [[Другая\Трек_21]], title = "Дорожка 21", author = "-aFx-", id = 21 },
   { sound = [[Другая\Трек_22]], title = "Дорожка 22", author = "ACDC - Hells Bells", id = 22 },
   { sound = [[Другая\Трек_23]], title = "Дорожка 23", author = "ACDC - Highway To Hell", id = 23 },
   { sound = [[Другая\Трек_24]], title = "Дорожка 24", author = "Black Sabbath - Seventh Star", id = 24 },
   { sound = [[Другая\Трек_25]], title = "Дорожка 25", author = "Def Leppard - Woman", id = 25 },
   { sound = [[Другая\Трек_26]], title = "Дорожка 26", author = "Guns'N'Roses - Don't cry", id = 26 },
   { sound = [[Другая\Трек_27]], title = "Дорожка 27", author = "Manowar - Warriors Of The World", id = 27 },
   { sound = [[Другая\Трек_28]], title = "Дорожка 28", author = "Metallica - Nothing Else Matters", id = 28 },
   { sound = [[Другая\Трек_29]], title = "Дорожка 29", author = "Queen - The show must go on", id = 29 },
   { sound = [[Другая\Трек_30]], title = "Дорожка 30", author = "Scorpions - Still loving you", id = 30 },
   { sound = [[Другая\Трек_31]], title = "Дорожка 31", author = "Limp Bizkit - Take A Look Around", id = 31 },
   { sound = [[Другая\Трек_32]], title = "Дорожка 32", author = "Rammstein - Spookshow Baby", id = 32 },
   { sound = [[Другая\Трек_33]], title = "Дорожка 33", author = "System Of A Down - Toxicity", id = 33 },
   { sound = [[Другая\Трек_34]], title = "Дорожка 34", author = "Black Strobe - Im A Man", id = 34 },
   { sound = [[Другая\Трек_35]], title = "Дорожка 35", author = "Adriano Celentano - Ja Tebia Liubliu", id = 35 },
   { sound = [[Другая\Трек_36]], title = "Дорожка 36", author = "Carl Douglas - Kung Fu Fighting", id = 36 },
   { sound = [[Другая\Трек_37]], title = "Дорожка 37", author = "Coolio - Ganstas Paradise", id = 37 },
   { sound = [[Другая\Трек_38]], title = "Дорожка 38", author = "David Usher - Black Black Heart", id = 38 },
   { sound = [[Другая\Трек_39]], title = "Дорожка 39", author = "Joe Cocker - Noubliez Jamais", id = 39 },
   { sound = [[Другая\Трек_40]], title = "Дорожка 40", author = "Madonna - Youl ll See", id = 40 },
   { sound = [[Другая\Трек_41]], title = "Дорожка 41", author = "Madonna - Frozen", id = 41 },
   { sound = [[Другая\Трек_42]], title = "Дорожка 42", author = "Mylene Farmer - Appelle Mon Numero", id = 42 },
   { sound = [[Другая\Трек_43]], title = "Дорожка 43", author = "Mylene Farmer - California", id = 43 },
   { sound = [[Другая\Трек_44]], title = "Дорожка 44", author = "Mylene Farmer - Desenchantee", id = 44 },
   { sound = [[Другая\Трек_45]], title = "Дорожка 45", author = "Mylene Farmer - Je Te Rends Ton Amour", id = 45 },
   { sound = [[Другая\Трек_46]], title = "Дорожка 46", author = "Mylene Farmer - Lamour Nest Rien", id = 46 },
   { sound = [[Другая\Трек_47]], title = "Дорожка 47", author = "Mylene Farmer - Pourvu Quelles", id = 47 },
   { sound = [[Другая\Трек_48]], title = "Дорожка 48", author = "No Doubt - Dont Speak", id = 48 },
   { sound = [[Другая\Трек_49]], title = "Дорожка 49", author = "Roxette - Real Sugar", id = 49 },
   { sound = [[Другая\Трек_50]], title = "Дорожка 50", author = "Sting - Shape Of My Heart", id = 50 },
   { sound = [[Другая\Трек_51]], title = "Дорожка 51", author = "Sting - Desert Rose", id = 51 },
   { sound = [[Другая\Трек_52]], title = "Дорожка 52", author = "Sting - Ill Be Missing You", id = 52 },
   { sound = [[Другая\Трек_53]], title = "Дорожка 53", author = "Sting - Mad About You", id = 53 },
   { sound = [[Другая\Трек_54]], title = "Дорожка 54", author = "Sugababes - Stronger", id = 54 },
   { sound = [[Другая\Трек_55]], title = "Дорожка 55", author = "Tarkan - Nu Gece", id = 55 },
   { sound = [[Другая\Трек_56]], title = "Дорожка 56", author = "22-22 - Immortal", id = 56 },
   { sound = [[Другая\Трек_57]], title = "Дорожка 57", author = "Aelyn - Believe In Us", id = 57 },
   { sound = [[Другая\Трек_58]], title = "Дорожка 58", author = "Aelyn - In And Out Of Love", id = 58 },
   { sound = [[Другая\Трек_59]], title = "Дорожка 59", author = "Bruno Mars - It Will Rain", id = 59 },
   { sound = [[Другая\Трек_60]], title = "Дорожка 60", author = "Headstrong Feat Kirsty Hawkshaw - Love Calls", id = 60 },
   { sound = [[Другая\Трек_61]], title = "Дорожка 61", author = "House Massive feat J Golubeva - Apologize", id = 61 },
   { sound = [[Другая\Трек_62]], title = "Дорожка 62", author = "Iio - Rapture", id = 62 },
   { sound = [[Другая\Трек_63]], title = "Дорожка 63", author = "Jazzamor - Caminho", id = 63 },
   { sound = [[Другая\Трек_64]], title = "Дорожка 64", author = "Kirsty Hawkshaw meets Tenishia - Reason To Forgive", id = 64 },
   { sound = [[Другая\Трек_65]], title = "Дорожка 65", author = "Kosmopolitans - I Belong To You", id = 65 },
   { sound = [[Другая\Трек_66]], title = "Дорожка 66", author = "Lowland - Children", id = 66 },
   { sound = [[Другая\Трек_67]], title = "Дорожка 67", author = "ReUnited - Sing It Back", id = 67 },
   { sound = [[Другая\Трек_68]], title = "Дорожка 68", author = "The Tone - Relax Take It Easy", id = 68 },
   { sound = [[Другая\Трек_69]], title = "Дорожка 69", author = "Tina Cousins - Wonderful Life", id = 69 },
   { sound = [[Другая\Трек_70]], title = "Дорожка 70", author = "Thomas Anders - Why Do You Cry", id = 70 },
   { sound = [[Другая\Трек_71]], title = "Дорожка 71", author = "Gary Jules - Mad World", id = 71 },
   { sound = [[Другая\Трек_72]], title = "Дорожка 72", author = "Sade - Love Is Found", id = 72 }
}
local mp3_table_bonus = {
   { sound = [[Бонусы\Бонус_1]], title = "Бонус 1", author = "Armin van Buuren Feat. Sharon den Adel - In And Out Of Love", id = 1, precond = "mp3_bonus_1" },
   { sound = [[Бонусы\Бонус_2]], title = "Бонус 2", author = "-", id = 2, precond = "mp3_bonus_2" },
   { sound = [[Бонусы\Бонус_3]], title = "Бонус 3", author = "Freemasons feat. Sophie Ellis-Bextor - Heartbreak", id = 3, precond = "mp3_bonus_3" },
   { sound = [[Бонусы\Бонус_4]], title = "Бонус 4", author = "Klaxons - It's Not Over Yet", id = 4, precond = "mp3_bonus_4" },
   { sound = [[Бонусы\Бонус_5]], title = "Бонус 5", author = "-", id = 5, precond = "mp3_bonus_5" },
   { sound = [[Бонусы\Бонус_6]], title = "Бонус 6", author = "-", id = 6, precond = "mp3_bonus_6" },
   { sound = [[Бонусы\Бонус_7]], title = "Бонус 7", author = "Benny Benassi - Happiness Factory", id = 7, precond = "mp3_bonus_7" },
   { sound = [[Бонусы\Бонус_8]], title = "Бонус 8", author = "David Guetta & Kelly Rowland - When Love Takes Over", id = 8, precond = "mp3_bonus_8" },
   { sound = [[Бонусы\Бонус_9]], title = "Бонус 9", author = "Dj Tiesto - I Will Be Here", id = 9, precond = "mp3_bonus_9" },
   { sound = [[Бонусы\Бонус_10]], title = "Бонус 10", author = "-", id = 10, precond = "mp3_bonus_10" },
   { sound = [[Бонусы\Бонус_11]], title = "Бонус 11", author = "-", id = 11, precond = "mp3_bonus_11" },
   { sound = [[Бонусы\Бонус_12]], title = "Бонус 12", author = "-", id = 12, precond = "mp3_bonus_12" },
   { sound = [[Бонусы\Бонус_13]], title = "Бонус 13", author = "Milk And Sugar - Let The Sun Shine", id = 13, precond = "mp3_bonus_13" },
   { sound = [[Бонусы\Бонус_14]], title = "Бонус 14", author = "-", id = 14, precond = "mp3_bonus_14" },
   { sound = [[Бонусы\Бонус_15]], title = "Бонус 15", author = "-", id = 15, precond = "mp3_bonus_15" },
   { sound = [[Бонусы\Бонус_16]], title = "Бонус 16", author = "04 Laurent Wolf - Club Fg Le Dancefloor", id = 16, precond = "mp3_bonus_16" },
   { sound = [[Бонусы\Бонус_17]], title = "Бонус 17", author = "-", id = 17, precond = "mp3_bonus_17" },
   { sound = [[Бонусы\Бонус_18]], title = "Бонус 18", author = "Sander Van Doorn & Purple Haze - Bliksem", id = 18, precond = "mp3_bonus_18" },
   { sound = [[Бонусы\Бонус_19]], title = "Бонус 19", author = "-", id = 19, precond = "mp3_bonus_19" },
   { sound = [[Бонусы\Бонус_20]], title = "Бонус 20", author = "Black & Jones - Catch", id = 20, precond = "mp3_bonus_20" },
   { sound = [[Бонусы\Бонус_21]], title = "Бонус 21", author = "Angel Tears - Marrakech Atrium", id = 21, precond = "mp3_bonus_21" },
   { sound = [[Бонусы\Бонус_22]], title = "Бонус 22", author = "ATB - Behind", id = 22, precond = "mp3_bonus_22" },
   { sound = [[Бонусы\Бонус_23]], title = "Бонус 23", author = "Blank & Jones - Lazy Life", id = 23, precond = "mp3_bonus_23" },
   { sound = [[Бонусы\Бонус_24]], title = "Бонус 24", author = "Casanovy - I Need Your Lovin", id = 24, precond = "mp3_bonus_24" },
   { sound = [[Бонусы\Бонус_25]], title = "Бонус 25", author = "Ciaran McAuley - Forgotten", id = 25, precond = "mp3_bonus_25" },
   { sound = [[Бонусы\Бонус_26]], title = "Бонус 26", author = "Dinka - Hopelessly Devoted", id = 26, precond = "mp3_bonus_26" },
   { sound = [[Бонусы\Бонус_27]], title = "Бонус 27", author = "Imogen Heap - Hide And Seek", id = 27, precond = "mp3_bonus_27" },
   { sound = [[Бонусы\Бонус_28]], title = "Бонус 28", author = "Moonbeam - Emotion", id = 28, precond = "mp3_bonus_28" },
   { sound = [[Бонусы\Бонус_29]], title = "Бонус 29", author = "Richard Durand - No Way Home", id = 29, precond = "mp3_bonus_29" },
   { sound = [[Бонусы\Бонус_30]], title = "Бонус 30", author = "Roger Sanchez - Lost", id = 30, precond = "mp3_bonus_30" },
   { sound = [[Бонусы\Бонус_31]], title = "Бонус 31", author = "Superbass Feat Delline Bass - New Life", id = 31, precond = "mp3_bonus_31" },
   { sound = [[Бонусы\Бонус_32]], title = "Бонус 32", author = "Yuri Kane - Right Back", id = 32, precond = "mp3_bonus_32" },
   { sound = [[Бонусы\Бонус_33]], title = "Бонус 33", author = "Adam Lambert - Want From Me", id = 33, precond = "mp3_bonus_33" },
   { sound = [[Бонусы\Бонус_34]], title = "Бонус 34", author = "September - Cry For You", id = 34, precond = "mp3_bonus_34" },
   { sound = [[Бонусы\Бонус_35]], title = "Бонус 35", author = "Duran Duran - Come Undone", id = 35, precond = "mp3_bonus_35" },
   { sound = [[Бонусы\Бонус_36]], title = "Бонус 36", author = "Oceana - Cry Cry", id = 36, precond = "mp3_bonus_36" },
   { sound = [[Бонусы\Бонус_37]], title = "Бонус 37", author = "Garbage - The World Is Not Enough", id = 37, precond = "mp3_bonus_37" },
   { sound = [[Бонусы\Бонус_38]], title = "Бонус 38", author = "Keri Hilson - I Like", id = 38, precond = "mp3_bonus_38" },
   { sound = [[Бонусы\Бонус_39]], title = "Бонус 39", author = "Madonna - The Power Of Goodbye", id = 39, precond = "mp3_bonus_39" },
   { sound = [[Бонусы\Бонус_40]], title = "Бонус 40", author = "Youssou Ndour & Neneh Cherry - 7 Seconds", id = 40, precond = "mp3_bonus_40" }
}
function mp3_update()
   if has_alife_info("mp3_player_repeat") then
      if mp3_mode ~= "repeat" then mp3_mode = "repeat" end
   elseif has_alife_info("mp3_player_queue") then
      if mp3_mode ~= "queue" then mp3_mode = "queue" end
   else
      if mp3_mode ~= "default" then mp3_mode = "default" end
   end
   if mp3_mode == "repeat" then
      if mp3_obj ~= nil then
         if mp3_obj:playing() == false then
            mp3_obj:play(db.actor, 0, sound_object.s2d)
            mp3_obj.volume = read_mod_param("mp3_currert_volume")
            mp3_last_position = string.format(math.floor(time_global() / 1000))
            mp3_length_position = string.format(math.floor(time_global() / 1000)) - mp3_last_position
            mp3_obj.min_distance, mp3_obj.max_distance = 2, 6
         end
      end
   elseif mp3_mode == "queue" then
      if mp3_obj ~= nil then
         if mp3_obj:playing() == false then
            local next_sound, next_title = nil, nil
            if mp3_played_list ~= nil and next_sound == nil then
               for k, v in pairs(mp3_played_list) do
                  if v.title == mp3_plays then
                     local next_id = v.id + 1
                     if next_id > sgm_g.get_table_lines(mp3_played_list) then
                        next_id = 1
                     end
                     for a, s in pairs(mp3_played_list) do
                        if s.id == next_id then
                           if s.precond == nil or (s.precond ~= nil and has_alife_info(s.precond)) then
                              next_sound = s.sound
                              next_title = s.title
                           else
                              next_id = next_id + 1
                           end
                        end
                     end
                  end
               end
            end
            if next_sound ~= nil then
               mp3_obj = sound_object(next_sound)
               mp3_plays = next_title
               mp3_info = next_title .. " (" .. mp3_player():get_sound_length(mp3_obj) .. ")"
            end
            mp3_obj:play(db.actor, 0, sound_object.s2d)
            mp3_obj.volume = read_mod_param("mp3_currert_volume")
            mp3_last_position = string.format(math.floor(time_global() / 1000))
            mp3_length_position = string.format(math.floor(time_global() / 1000)) - mp3_last_position
            mp3_obj.min_distance, mp3_obj.max_distance = 2, 6
         end
      end
   else
      if mp3_obj ~= nil then
         if mp3_obj:playing() == false and mp3_info ~= "" then
            mp3_info = ""
         end
         if mp3_obj:playing() == false and mp3_plays ~= nil then
            mp3_plays = nil
            mp3_length_position, mp3_last_position = 0, 0
         end
      end
   end
   if db.actor and sgm_g.check_ui_worked() and (not db.actor:object("mp3_player")) then
      if mp3_obj ~= nil then
         if mp3_obj:playing() == true then
            mp3_obj:stop()
            mp3_obj = nil
            mp3_info = ""
         end
      end
      mp3_plays = nil
      mp3_length_position, mp3_last_position = 0, 0
   end
end

function add_mp3_bonus(info_name)
   if sgm_g.dont_has_alife_info(info_name) then
      news_manager.send_tip(db.actor, "st_mp3_new_content_descr", 0, "mp3_player", 3500, nil, "st_mp3_new_content_title")
   end
   give_info(info_name)
end

class "mp3_snd" (CUIListBoxItem)
function mp3_snd:__init(height)
   super(height)
   self.title = self:GetTextItem()
   self:SetTextColor(GetARGB(255, 210, 210, 210))
   self.title:SetFont(GetFontLetterica18Russian())
   self.title:SetWndSize(vector2():set(278, height))
   self.title:SetEllipsis(true)
end

class "mp3_player" (CUIScriptWnd)
function mp3_player:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
   if mp3_player_section == 1 then
      self:FillList(mp3_table_merry)
   elseif mp3_player_section == 2 then
      self:FillList(mp3_table_dance)
   elseif mp3_player_section == 3 then
      self:FillList(mp3_table_theme)
   elseif mp3_player_section == 4 then
      self:FillList(mp3_table_other)
   elseif mp3_player_section == 5 then
      self:FillList(mp3_table_bonus)
   end
end

function mp3_player:__finalize()
end

function mp3_player:FillList(list)
   self.mp3_list:Clear()
   for k, v in pairs(list) do
      if v.precond == nil or (v.precond ~= nil and has_alife_info(v.precond)) then
         self:AddItemToList(v.title, v.sound, v.author)
      end
   end
   mp3_chosen_list = list
end

function mp3_player:AddItemToList(title, sound, author)
   local source = mp3_snd(22)
   source.title:SetText(title)
   self.mp3_list:AddExistingItem(source)
   if string.len(author) > 34 then
      author = string.sub(author, 1, 34)
   end
   if author == "-" then
      source.author = source:AddIconField(0)
      source.author:InitTexture("ui_mod_red_plate")
      source.author:SetWndPos(vector2():set(120, 6))
   else
      source.author = source:AddTextField(author, 0)
      source.author:SetWndPos(vector2():set(120, 0))
   end
   source.length = source:AddTextField(self:get_sound_length(sound_object(sound)), 0)
   source.length:SetWndPos(vector2():set(430, 0))
end

function mp3_player:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.mp3_player_form = xml:InitStatic("mp3_player_form", self)
   self:Register(xml:Init3tButton("mp3_player_form:btn_dance", self.mp3_player_form), "btn_dance")
   self:Register(xml:Init3tButton("mp3_player_form:btn_merry", self.mp3_player_form), "btn_merry")
   self:Register(xml:Init3tButton("mp3_player_form:btn_bonus", self.mp3_player_form), "btn_bonus")
   self:Register(xml:Init3tButton("mp3_player_form:btn_theme", self.mp3_player_form), "btn_theme")
   self:Register(xml:Init3tButton("mp3_player_form:btn_other", self.mp3_player_form), "btn_other")
   self:Register(xml:Init3tButton("mp3_player_form:btn_play", self.mp3_player_form), "btn_play")
   self:Register(xml:Init3tButton("mp3_player_form:btn_close", self.mp3_player_form), "btn_close")
   self:Register(xml:Init3tButton("mp3_player_form:btn_stop", self.mp3_player_form), "btn_stop")
   self:Register(xml:Init3tButton("mp3_player_form:btn_volume_minus", self.mp3_player_form), "btn_volume_minus")
   self:Register(xml:Init3tButton("mp3_player_form:btn_volume_plus", self.mp3_player_form), "btn_volume_plus")
   self.volume_number = xml:InitStatic("mp3_player_form:volume_number", self.mp3_player_form)
   self.repeat_check = xml:InitCheck("mp3_player_form:check_repeat", self.mp3_player_form)
   self.repeat_check:SetCheck(sgm_functions.info_get_boolean("mp3_player_repeat"))
   self.queue_check = xml:InitCheck("mp3_player_form:check_queue", self.mp3_player_form)
   self.queue_check:SetCheck(sgm_functions.info_get_boolean("mp3_player_queue"))
   self.mp3_red_diode = xml:InitStatic("mp3_player_form:mp3_red_diode", self.mp3_player_form)
   self.mp3_green_diode = xml:InitStatic("mp3_player_form:mp3_green_diode", self.mp3_player_form)
   self.mp3_info = xml:InitStatic("mp3_player_form:mp3_info", self.mp3_player_form)
   self.mp3_timer = xml:InitStatic("mp3_player_form:mp3_timer", self.mp3_player_form)
   self.mp3_list = xml:InitListBox("mp3_player_form:mp3_list", self)
   self.mp3_list:ShowSelectedItem(true)
   self:Register(self.mp3_list, "mp3_list_window")
end

function mp3_player:InitCallBacks()
   self:AddCallback("btn_merry", ui_events.BUTTON_CLICKED, self.btn_merry, self)
   self:AddCallback("btn_dance", ui_events.BUTTON_CLICKED, self.btn_dance, self)
   self:AddCallback("btn_bonus", ui_events.BUTTON_CLICKED, self.btn_bonus, self)
   self:AddCallback("btn_theme", ui_events.BUTTON_CLICKED, self.btn_theme, self)
   self:AddCallback("btn_other", ui_events.BUTTON_CLICKED, self.btn_other, self)
   self:AddCallback("btn_play", ui_events.BUTTON_CLICKED, self.btn_play, self)
   self:AddCallback("btn_stop", ui_events.BUTTON_CLICKED, self.btn_stop, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
   self:AddCallback("mp3_list_window", ui_events.WINDOW_LBUTTON_DB_CLICK, self.btn_play, self)
   self:AddCallback("btn_volume_minus", ui_events.BUTTON_CLICKED, self.btn_volume_minus, self)
   self:AddCallback("btn_volume_plus", ui_events.BUTTON_CLICKED, self.btn_volume_plus, self)
end

function mp3_player:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
   if read_mod_param("mp3_currert_volume") ~= nil then
      self.volume_number:TextControl():SetText(string.format(math.floor(read_mod_param("mp3_currert_volume") * 100)))
   end
   if self.mp3_info:TextControl():GetText() ~= mp3_info then
      self.mp3_info:TextControl():SetText(mp3_info)
   end
   if mp3_info == "" then
      self.mp3_green_diode:Show(false)
   else
      self.mp3_green_diode:Show(true)
   end
   if mp3_info ~= "" then
      self.mp3_timer:TextControl():SetText(self:get_sound_length(nil, mp3_length_position))
   else
      self.mp3_timer:TextControl():SetText("")
   end
   self:check_config_update()
end

function mp3_player:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function mp3_player:check_config_update()
   if self.repeat_check:GetCheck() then
      self.queue_check:Enable(false)
   else
      self.queue_check:Enable(true)
   end
   if self.queue_check:GetCheck() then
      self.repeat_check:Enable(false)
   else
      self.repeat_check:Enable(true)
   end
   sgm_functions.info_give_on_boolean(self.repeat_check:GetCheck(), "mp3_player_repeat")
   sgm_functions.info_give_on_boolean(self.queue_check:GetCheck(), "mp3_player_queue")
end

function mp3_player:btn_volume_minus()
   sgm_g.write_mod_param("mp3_currert_volume", read_mod_param("mp3_currert_volume") - mp3_add_value)
   if mp3_obj ~= nil then
      mp3_obj.volume = read_mod_param("mp3_currert_volume")
   end
end

function mp3_player:btn_volume_plus()
   sgm_g.write_mod_param("mp3_currert_volume", read_mod_param("mp3_currert_volume") + mp3_add_value)
   if mp3_obj ~= nil then
      mp3_obj.volume = read_mod_param("mp3_currert_volume")
   end
end

function mp3_player:btn_merry()
   self:FillList(mp3_table_merry)
   mp3_player_section = 1
end

function mp3_player:btn_dance()
   self:FillList(mp3_table_dance)
   mp3_player_section = 2
end

function mp3_player:btn_theme()
   self:FillList(mp3_table_theme)
   mp3_player_section = 3
end

function mp3_player:btn_other()
   self:FillList(mp3_table_other)
   mp3_player_section = 4
end

function mp3_player:btn_bonus()
   self:FillList(mp3_table_bonus)
   mp3_player_section = 5
end

function mp3_player:get_sound_length(snd_obj, other_length)
   local length_second = 0
   if snd_obj ~= nil and other_length == nil then
      length_second = math.floor(snd_obj:length() / 1000)
   end
   if other_length ~= nil then
      length_second = other_length
   end
   local currert_minute = math.floor(length_second / 60)
   local data = "00:00"
   if currert_minute < 10 then
      currert_minute = "0" .. currert_minute
   end
   if length_second < 60 then
      if length_second < 10 then
         data = currert_minute .. ":0" .. length_second
      else
         data = currert_minute ..
             ":" .. length_second
      end
   elseif length_second < 120 then
      if length_second < 70 then
         data = currert_minute .. ":0" .. length_second - 60
      else
         data = currert_minute ..
             ":" .. length_second - 60
      end
   elseif length_second < 180 then
      if length_second < 130 then
         data = currert_minute .. ":0" .. length_second - 120
      else
         data = currert_minute ..
             ":" .. length_second - 120
      end
   elseif length_second < 240 then
      if length_second < 190 then
         data = currert_minute .. ":0" .. length_second - 180
      else
         data = currert_minute ..
             ":" .. length_second - 180
      end
   elseif length_second < 300 then
      if length_second < 250 then
         data = currert_minute .. ":0" .. length_second - 240
      else
         data = currert_minute ..
             ":" .. length_second - 240
      end
   elseif length_second < 360 then
      if length_second < 310 then
         data = currert_minute .. ":0" .. length_second - 300
      else
         data = currert_minute ..
             ":" .. length_second - 300
      end
   elseif length_second < 420 then
      if length_second < 370 then
         data = currert_minute .. ":0" .. length_second - 360
      else
         data = currert_minute ..
             ":" .. length_second - 360
      end
   elseif length_second < 480 then
      if length_second < 430 then
         data = currert_minute .. ":0" .. length_second - 420
      else
         data = currert_minute ..
             ":" .. length_second - 420
      end
   elseif length_second < 540 then
      if length_second < 490 then
         data = currert_minute .. ":0" .. length_second - 480
      else
         data = currert_minute ..
             ":" .. length_second - 480
      end
   elseif length_second < 600 then
      if length_second < 540 then
         data = currert_minute .. ":0" .. length_second - 540
      else
         data = currert_minute ..
             ":" .. length_second - 540
      end
   elseif length_second < 660 then
      if length_second < 610 then
         data = currert_minute .. ":0" .. length_second - 600
      else
         data = currert_minute ..
             ":" .. length_second - 600
      end
   elseif length_second < 720 then
      if length_second < 670 then
         data = currert_minute .. ":0" .. length_second - 660
      else
         data = currert_minute ..
             ":" .. length_second - 660
      end
   elseif length_second < 780 then
      if length_second < 730 then
         data = currert_minute .. ":0" .. length_second - 720
      else
         data = currert_minute ..
             ":" .. length_second - 720
      end
   elseif length_second < 840 then
      if length_second < 790 then
         data = currert_minute .. ":0" .. length_second - 780
      else
         data = currert_minute ..
             ":" .. length_second - 780
      end
   elseif length_second < 900 then
      if length_second < 850 then
         data = currert_minute .. ":0" .. length_second - 840
      else
         data = currert_minute ..
             ":" .. length_second - 840
      end
   elseif length_second < 960 then
      if length_second < 910 then
         data = currert_minute .. ":0" .. length_second - 900
      else
         data = currert_minute ..
             ":" .. length_second - 900
      end
   elseif length_second < 1020 then
      if length_second < 970 then
         data = currert_minute .. ":0" .. length_second - 960
      else
         data = currert_minute ..
             ":" .. length_second - 960
      end
   elseif length_second < 1080 then
      if length_second < 1030 then
         data = currert_minute .. ":0" .. length_second - 1020
      else
         data = currert_minute ..
             ":" .. length_second - 1020
      end
   elseif length_second < 1140 then
      if length_second < 1090 then
         data = currert_minute .. ":0" .. length_second - 1080
      else
         data = currert_minute ..
             ":" .. length_second - 1080
      end
   elseif length_second < 1200 then
      if length_second < 1150 then
         data = currert_minute .. ":0" .. length_second - 1140
      else
         data = currert_minute ..
             ":" .. length_second - 1140
      end
   elseif length_second < 1260 then
      if length_second < 1210 then
         data = currert_minute .. ":0" .. length_second - 1200
      else
         data = currert_minute ..
             ":" .. length_second - 1200
      end
   elseif length_second < 1320 then
      if length_second < 1270 then
         data = currert_minute .. ":0" .. length_second - 1260
      else
         data = currert_minute ..
             ":" .. length_second - 1260
      end
   end
   return data
end

function mp3_player:btn_play()
   if mp3_obj ~= nil then
      if mp3_obj:playing() == true then
         mp3_obj:stop()
         mp3_length_position, mp3_last_position = 0, 0
      end
   end
   if self.mp3_list:GetSize() == 0 then return end
   local item = self.mp3_list:GetSelectedItem()
   if not item then return end
   local sound_title = item.title:GetText()
   local sound_name = ""
   for k, v in pairs(mp3_chosen_list) do
      if v.title == sound_title then
         sound_name = v.sound
      end
   end
   mp3_obj = sound_object(sound_name)
   mp3_obj:play(db.actor, 0, sound_object.s2d)
   mp3_obj.volume = read_mod_param("mp3_currert_volume")
   mp3_plays = sound_title
   mp3_last_position = string.format(math.floor(time_global() / 1000))
   mp3_length_position = string.format(math.floor(time_global() / 1000)) - mp3_last_position
   mp3_info = sound_title .. " (" .. self:get_sound_length(mp3_obj) .. ")"
   mp3_obj.min_distance, mp3_obj.max_distance = 2, 6
   mp3_played_list = mp3_chosen_list
end

function mp3_player:btn_stop()
   if mp3_obj ~= nil then
      if mp3_obj:playing() == true then
         mp3_obj:stop()
         mp3_obj = nil
         mp3_info = ""
      end
   end
   mp3_plays = nil
   mp3_length_position, mp3_last_position = 0, 0
end

function mp3_player:btn_close()
   sgm_g.give_object_to_actor("mp3_player")
   self:HideDialog()
   set_ui_worked()
   level.show_weapon(true)
end

------------------------------------------------------------------------------
--                      Ремкомплект для оружия                              --
------------------------------------------------------------------------------
local repair_weapon_excluded = "pri_a17_gauss_rifle"
class "repair_weapon_box" (CUIScriptWnd)
function repair_weapon_box:__init(owner)
   super()
   self.repair_weapon_slot_1 = db.actor:item_in_slot(2)
   self.repair_weapon_slot_2 = db.actor:item_in_slot(3)
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function repair_weapon_box:__finalize()
end

function repair_weapon_box:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.repair_wpn_form = xml:InitStatic("repair_wpn_form", self)
   self:Register(xml:Init3tButton("repair_wpn_form:btn_repair", self.repair_wpn_form), "btn_repair")
   self:Register(xml:Init3tButton("repair_wpn_form:btn_close", self.repair_wpn_form), "btn_close")
   self.slot_a_cond = xml:InitStatic("repair_wpn_form:slot_a_cond", self.repair_wpn_form)
   self.slot_b_cond = xml:InitStatic("repair_wpn_form:slot_b_cond", self.repair_wpn_form)
   if self.repair_weapon_slot_1 ~= nil then
      slot_1_cond = string.format(math.floor(self.repair_weapon_slot_1:condition() * 100)) .. "%"
      self.slot_a_cond:TextControl():SetText(slot_1_cond)
   end
   if self.repair_weapon_slot_2 ~= nil then
      slot_2_cond = string.format(math.floor(self.repair_weapon_slot_2:condition() * 100)) .. "%"
      self.slot_b_cond:TextControl():SetText(slot_2_cond)
   end
   self.choose_box = CUIMessageBoxEx()
   self:Register(self.choose_box, "choose_box")
end

function repair_weapon_box:InitCallBacks()
   self:AddCallback("btn_repair", ui_events.BUTTON_CLICKED, self.btn_repair, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
   self:AddCallback("choose_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.choose_box_yes, self)
   self:AddCallback("choose_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.choose_box_no, self)
end

function repair_weapon_box:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
end

function repair_weapon_box:spend_items(item_name, slot)
   for k, v in pairs(self:get_release_items(item_name, slot)) do
      if v ~= nil and alife():object(v) then
         alife():release(alife():object(v), true)
      end
   end
end

function repair_weapon_box:get_release_items(need_item, slot)
   local items_cnt = 0
   local items_collected = {}
   local function relocator(temp, item)
      if item:section() == need_item and items_cnt == 0 and db.actor:item_in_slot(slot) ~= nil and item:id() ~= db.actor:item_in_slot(slot):id() then
         table.insert(items_collected, item:id())
         items_cnt = 1
      end
   end
   db.actor:iterate_inventory(relocator, db.actor)
   return items_collected
end

function repair_weapon_box:check_included_cond(type)
   local exclude_1_result, exclude_2_result = true, true
   if repair_weapon_excluded == "" then return true end
   if type == 1 and self.repair_weapon_slot_1 == nil then return true end
   if type == 2 and self.repair_weapon_slot_2 == nil then return true end
   local exclude_table = utils.parse_spawns(repair_weapon_excluded)
   local exclude_count = get_table_names(exclude_table)
   for k, v in pairs(exclude_table) do
      if type == 1 and find_in_string(self.repair_weapon_slot_1:section(), v.section) then
         exclude_1_result = false
      end
      if type == 2 and find_in_string(self.repair_weapon_slot_2:section(), v.section) then
         exclude_2_result = false
      end
   end
   if type == 1 then
      return exclude_1_result
   elseif type == 2 then
      return exclude_2_result
   end
end

function repair_weapon_box:choose_box_yes()
   local exclude_val = 0
   local passed1_bool = false
   local passed2_bool = false
   if self:check_included_cond(1) then
      if self.repair_weapon_slot_1 and have_item_count(self.repair_weapon_slot_1:section(), 2) then
         self:spend_items(self.repair_weapon_slot_1:section(), 2)
         local slot_1_name = sgm_functions.ReadCaption(self.repair_weapon_slot_1:section())
         local slot_1_conds = string.format(math.floor(self.repair_weapon_slot_1:condition() * 100)) .. "%"
         self.repair_weapon_slot_1:set_condition(1.0)
         news_manager.send_repair(slot_1_name, slot_1_conds)
         passed1_bool = true
      end
   else
      exclude_val = exclude_val + 1
   end
   if self:check_included_cond(2) then
      if self.repair_weapon_slot_2 and have_item_count(self.repair_weapon_slot_2:section(), 2) then
         if have_item_count(self.repair_weapon_slot_2:section(), 2) then
            self:spend_items(self.repair_weapon_slot_2:section(), 3)
            local slot_2_name = sgm_functions.ReadCaption(self.repair_weapon_slot_2:section())
            local slot_2_conds = string.format(math.floor(self.repair_weapon_slot_2:condition() * 100)) .. "%"
            self.repair_weapon_slot_2:set_condition(1.0)
            news_manager.send_repair(slot_2_name, slot_2_conds)
            passed2_bool = true
         end
      end
   else
      exclude_val = exclude_val + 1
   end
   if passed1_bool == false and passed2_bool == false then
      if exclude_val > 0 then
         news_manager.send_tip(db.actor, "st_no_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      elseif self.repair_weapon_slot_1 ~= nil or self.repair_weapon_slot_2 ~= nil then
         news_manager.send_tip(db.actor, "st_no_donor_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      else
         news_manager.send_tip(db.actor, "st_no_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      end
      sgm_g.give_object_to_actor("repair_arms_box")
   elseif passed1_bool == true or passed2_bool == true then
      sgm_g.give_object_to_actor("repair_arms_box_used")
   end
   self.choose_box:ShowDialog(false)
   self.choose_box:HideDialog()
   self:HideDialog()
   game_hide_menu()
end

function repair_weapon_box:choose_box_no()
   local passed1_bool = false
   local passed2_bool = false
   if self:check_included_cond(1) then
      if self.repair_weapon_slot_1 ~= nil then
         local slot_1_name = sgm_functions.ReadCaption(self.repair_weapon_slot_1:section())
         local slot_1_cond = string.format(math.floor(self.repair_weapon_slot_1:condition() * 100)) .. "%"
         news_manager.send_repair(slot_1_name, slot_1_cond)
         self.repair_weapon_slot_1:set_condition(1.0)
         passed1_bool = true
      end
   end
   if self:check_included_cond(2) then
      if self.repair_weapon_slot_2 ~= nil then
         local slot_2_name = sgm_functions.ReadCaption(self.repair_weapon_slot_2:section())
         local slot_2_cond = string.format(math.floor(self.repair_weapon_slot_2:condition() * 100)) .. "%"
         news_manager.send_repair(slot_2_name, slot_2_cond)
         self.repair_weapon_slot_2:set_condition(1.0)
         passed2_bool = true
      end
   end
   if passed1_bool == false and passed2_bool == false then
      sgm_g.give_object_to_actor("repair_arms_box")
      news_manager.send_tip(db.actor, "st_no_repair", 0, "remont", 4000, nil, "st_no_repair_title")
   end
   self.choose_box:ShowDialog(false)
   self.choose_box:HideDialog()
   self:HideDialog()
   game_hide_menu()
end

function repair_weapon_box:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function repair_weapon_box:btn_repair()
   self.choose_box:InitMessageBox("mb_choose_weapon_repair")
   self.choose_box:ShowDialog(true)
end

function repair_weapon_box:btn_close()
   self:HideDialog()
   sgm_g.give_object_to_actor("repair_arms_box")
end

class "repair_weapon_box_used" (CUIScriptWnd)
function repair_weapon_box_used:__init(owner)
   super()
   self.repair_weapon_slot_1 = db.actor:item_in_slot(2)
   self.repair_weapon_slot_2 = db.actor:item_in_slot(3)
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function repair_weapon_box_used:__finalize()
end

function repair_weapon_box_used:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.repair_wpn_form = xml:InitStatic("repair_wpn_form", self)
   self:Register(xml:Init3tButton("repair_wpn_form:btn_repair", self.repair_wpn_form), "btn_repair")
   self:Register(xml:Init3tButton("repair_wpn_form:btn_close", self.repair_wpn_form), "btn_close")
   self.slot_a_cond = xml:InitStatic("repair_wpn_form:slot_a_cond", self.repair_wpn_form)
   self.slot_b_cond = xml:InitStatic("repair_wpn_form:slot_b_cond", self.repair_wpn_form)
   if self.repair_weapon_slot_1 ~= nil then
      slot_1_cond = string.format(math.floor(self.repair_weapon_slot_1:condition() * 100)) .. "%"
      self.slot_a_cond:TextControl():SetText(slot_1_cond)
   end
   if self.repair_weapon_slot_2 ~= nil then
      slot_2_cond = string.format(math.floor(self.repair_weapon_slot_2:condition() * 100)) .. "%"
      self.slot_b_cond:TextControl():SetText(slot_2_cond)
   end
   self.choose_box = CUIMessageBoxEx()
   self:Register(self.choose_box, "choose_box")
end

function repair_weapon_box_used:InitCallBacks()
   self:AddCallback("btn_repair", ui_events.BUTTON_CLICKED, self.btn_repair, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
   self:AddCallback("choose_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.choose_box_yes, self)
   self:AddCallback("choose_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.choose_box_no, self)
end

function repair_weapon_box_used:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
end

function repair_weapon_box_used:spend_items(item_name, slot)
   for k, v in pairs(self:get_release_items(item_name, slot)) do
      if v ~= nil and alife():object(v) then
         alife():release(alife():object(v), true)
      end
   end
end

function repair_weapon_box_used:get_release_items(need_item, slot)
   local items_cnt = 0
   local items_collected = {}
   local function relocator(temp, item)
      if item:section() == need_item and items_cnt == 0 and db.actor:item_in_slot(slot) ~= nil and item:id() ~= db.actor:item_in_slot(slot):id() then
         table.insert(items_collected, item:id())
         items_cnt = 1
      end
   end
   db.actor:iterate_inventory(relocator, db.actor)
   return items_collected
end

function repair_weapon_box_used:check_included_cond(type)
   local exclude_1_result, exclude_2_result = true, true
   if repair_weapon_excluded == "" then return true end
   if type == 1 and self.repair_weapon_slot_1 == nil then return true end
   if type == 2 and self.repair_weapon_slot_2 == nil then return true end
   local exclude_table = utils.parse_spawns(repair_weapon_excluded)
   local exclude_count = get_table_names(exclude_table)
   for k, v in pairs(exclude_table) do
      if type == 1 and find_in_string(self.repair_weapon_slot_1:section(), v.section) then
         exclude_1_result = false
      end
      if type == 2 and find_in_string(self.repair_weapon_slot_2:section(), v.section) then
         exclude_2_result = false
      end
   end
   if type == 1 then
      return exclude_1_result
   elseif type == 2 then
      return exclude_2_result
   end
end

function repair_weapon_box_used:choose_box_yes()
   local exclude_val = 0
   local passed1_bool = false
   local passed2_bool = false
   if self:check_included_cond(1) then
      if self.repair_weapon_slot_1 ~= nil and have_item_count(self.repair_weapon_slot_1:section(), 2) then
         self:spend_items(self.repair_weapon_slot_1:section(), 2)
         local slot_1_name = sgm_functions.ReadCaption(self.repair_weapon_slot_1:section())
         local slot_1_conds = string.format(math.floor(self.repair_weapon_slot_1:condition() * 100)) .. "%"
         self.repair_weapon_slot_1:set_condition(1.0)
         news_manager.send_repair(slot_1_name, slot_1_conds)
         passed1_bool = true
      end
   else
      exclude_val = exclude_val + 1
   end
   if self:check_included_cond(2) then
      if self.repair_weapon_slot_2 ~= nil and have_item_count(self.repair_weapon_slot_2:section(), 2) then
         if have_item_count(self.repair_weapon_slot_2:section(), 2) then
            self:spend_items(self.repair_weapon_slot_2:section(), 3)
            local slot_2_name = sgm_functions.ReadCaption(self.repair_weapon_slot_2:section())
            local slot_2_conds = string.format(math.floor(self.repair_weapon_slot_2:condition() * 100)) .. "%"
            self.repair_weapon_slot_2:set_condition(1.0)
            news_manager.send_repair(slot_2_name, slot_2_conds)
            passed2_bool = true
         end
      end
   else
      exclude_val = exclude_val + 1
   end
   if passed1_bool == false and passed2_bool == false then
      if exclude_val > 0 then
         news_manager.send_tip(db.actor, "st_no_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      elseif self.repair_weapon_slot_1 ~= nil or self.repair_weapon_slot_2 ~= nil then
         news_manager.send_tip(db.actor, "st_no_donor_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      else
         news_manager.send_tip(db.actor, "st_no_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      end
      sgm_g.give_object_to_actor("repair_arms_box_used")
   end
   self.choose_box:ShowDialog(false)
   self.choose_box:HideDialog()
   self:HideDialog()
   game_hide_menu()
end

function repair_weapon_box_used:choose_box_no()
   self.choose_box:ShowDialog(false)
   self.choose_box:HideDialog()
   self:btn_close()
end

function repair_weapon_box_used:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function repair_weapon_box_used:btn_repair()
   self.choose_box:InitMessageBox("mb_only_weapon_donor_repair")
   self.choose_box:ShowDialog(true)
end

function repair_weapon_box_used:btn_close()
   self:HideDialog()
   sgm_g.give_object_to_actor("repair_arms_box_used")
end

------------------------------------------------------------------------------
--                        Ремкомплект для бронекостюмов                     --
------------------------------------------------------------------------------
local repair_outfit_excluded = ""
class "repair_outfit_box" (CUIScriptWnd)
function repair_outfit_box:__init(owner)
   super()
   self.repair_outfit_slot_1 = db.actor:item_in_slot(7)
   self.repair_outfit_slot_2 = db.actor:item_in_slot(12)
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function repair_outfit_box:__finalize()
end

function repair_outfit_box:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.repair_outfit_form = xml:InitStatic("repair_outfit_form", self)
   self:Register(xml:Init3tButton("repair_outfit_form:btn_repair", self.repair_outfit_form), "btn_repair")
   self:Register(xml:Init3tButton("repair_outfit_form:btn_close", self.repair_outfit_form), "btn_close")
   self.slot_a_cond = xml:InitStatic("repair_outfit_form:slot_a_cond", self.repair_outfit_form)
   self.slot_b_cond = xml:InitStatic("repair_outfit_form:slot_b_cond", self.repair_outfit_form)
   if self.repair_outfit_slot_1 ~= nil then
      slot_1_cond = string.format(math.floor(self.repair_outfit_slot_1:condition() * 100)) .. "%"
      self.slot_a_cond:TextControl():SetText(slot_1_cond)
   end
   if self.repair_outfit_slot_2 ~= nil then
      slot_2_cond = string.format(math.floor(self.repair_outfit_slot_2:condition() * 100)) .. "%"
      self.slot_b_cond:TextControl():SetText(slot_2_cond)
   end
   self.choose_box = CUIMessageBoxEx()
   self:Register(self.choose_box, "choose_box")
end

function repair_outfit_box:InitCallBacks()
   self:AddCallback("btn_repair", ui_events.BUTTON_CLICKED, self.btn_repair, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
   self:AddCallback("choose_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.choose_box_yes, self)
   self:AddCallback("choose_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.choose_box_no, self)
end

function repair_outfit_box:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
end

function repair_outfit_box:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function repair_outfit_box:btn_repair()
   self.choose_box:InitMessageBox("mb_choose_outfit_repair")
   self.choose_box:ShowDialog(true)
end

function repair_outfit_box:spend_items(item_name, slot)
   for k, v in pairs(self:get_release_items(item_name, slot)) do
      if v ~= nil and alife():object(v) then
         alife():release(alife():object(v), true)
      end
   end
end

function repair_outfit_box:get_release_items(need_item, slot)
   local items_cnt = 0
   local items_collected = {}
   local function relocator(temp, item)
      if item:section() == need_item and items_cnt == 0 and db.actor:item_in_slot(slot) ~= nil and item:id() ~= db.actor:item_in_slot(slot):id() then
         table.insert(items_collected, item:id())
         items_cnt = 1
      end
   end
   db.actor:iterate_inventory(relocator, db.actor)
   return items_collected
end

function repair_outfit_box:check_included_cond(type)
   local exclude_1_result, exclude_2_result = true, true
   if repair_outfit_excluded == "" then return true end
   if type == 1 and self.repair_outfit_slot_1 == nil then return true end
   if type == 2 and self.repair_outfit_slot_2 == nil then return true end
   local exclude_table = utils.parse_spawns(repair_outfit_excluded)
   local exclude_count = get_table_names(exclude_table)
   for k, v in pairs(exclude_table) do
      if type == 1 and find_in_string(self.repair_outfit_slot_1:section(), v.section) then
         exclude_1_result = false
      end
      if type == 2 and find_in_string(self.repair_outfit_slot_2:section(), v.section) then
         exclude_2_result = false
      end
   end
   if type == 1 then
      return exclude_1_result
   elseif type == 2 then
      return exclude_2_result
   end
end

function repair_outfit_box:choose_box_yes()
   local exclude_val = 0
   local passed1_bool = false
   local passed2_bool = false
   if self:check_included_cond(1) then
      if self.repair_outfit_slot_1 ~= nil and find_out_string(self.repair_outfit_slot_1:section(), "reduce_") and (have_item_count(self.repair_outfit_slot_1:section(), 2) or have_item_count("reduce_" .. self.repair_outfit_slot_1:section(), 1)) then
         if have_item_count(self.repair_outfit_slot_1:section(), 2) then
            self:spend_items(self.repair_outfit_slot_1:section(), 7)
            local slot_1_name = sgm_functions.ReadCaption(self.repair_outfit_slot_1:section())
            local slot_1_conds = string.format(math.floor(self.repair_outfit_slot_1:condition() * 100)) .. "%"
            self.repair_outfit_slot_1:set_condition(1.0)
            news_manager.send_repair(slot_1_name, slot_1_conds)
            passed1_bool = true
         elseif have_item_count("reduce_" .. self.repair_outfit_slot_1:section(), 1) then
            self:spend_items("reduce_" .. self.repair_outfit_slot_1:section(), 7)
            local slot_1_name = sgm_functions.ReadCaption(self.repair_outfit_slot_1:section())
            local slot_1_conds = string.format(math.floor(self.repair_outfit_slot_1:condition() * 100)) .. "%"
            self.repair_outfit_slot_1:set_condition(1.0)
            news_manager.send_repair(slot_1_name, slot_1_conds)
            passed1_bool = true
         end
      end
      if self.repair_outfit_slot_1 ~= nil and find_in_string(self.repair_outfit_slot_1:section(), "reduce_") and have_item_count(self.repair_outfit_slot_1:section(), 2) then
         if have_item_count(self.repair_outfit_slot_1:section(), 2) then
            self:spend_items(self.repair_outfit_slot_1:section(), 7)
            local slot_1_name = sgm_functions.ReadCaption(self.repair_outfit_slot_1:section())
            local slot_1_conds = string.format(math.floor(self.repair_outfit_slot_1:condition() * 100)) .. "%"
            self.repair_outfit_slot_1:set_condition(1.0)
            news_manager.send_repair(slot_1_name, slot_1_conds)
            passed1_bool = true
         end
      end
   else
      exclude_val = exclude_val + 1
   end
   if self:check_included_cond(2) then
      if self.repair_outfit_slot_2 ~= nil and have_item_count(self.repair_outfit_slot_2:section(), 2) then
         self:spend_items(self.repair_outfit_slot_2:section(), 12)
         local slot_2_name = sgm_functions.ReadCaption(self.repair_outfit_slot_2:section())
         local slot_2_conds = string.format(math.floor(self.repair_outfit_slot_2:condition() * 100)) .. "%"
         self.repair_outfit_slot_2:set_condition(1.0)
         news_manager.send_repair(slot_2_name, slot_2_conds)
         passed2_bool = true
      end
   else
      exclude_val = exclude_val + 1
   end
   if passed1_bool == false and passed2_bool == false then
      if exclude_val > 0 then
         news_manager.send_tip(db.actor, "st_no_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      elseif self.repair_outfit_slot_1 ~= nil or self.repair_outfit_slot_2 ~= nil then
         news_manager.send_tip(db.actor, "st_no_donor_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      else
         news_manager.send_tip(db.actor, "st_no_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      end
      sgm_g.give_object_to_actor("repair_outfit_box")
   elseif passed1_bool == true or passed2_bool == true then
      sgm_g.give_object_to_actor("repair_outfit_box_used")
   end
   self.choose_box:ShowDialog(false)
   self.choose_box:HideDialog()
   self:HideDialog()
   game_hide_menu()
end

function repair_outfit_box:choose_box_no()
   local passed1_bool = false
   local passed2_bool = false
   if self:check_included_cond(1) then
      if self.repair_outfit_slot_1 ~= nil then
         local slot_1_name = sgm_functions.ReadCaption(self.repair_outfit_slot_1:section())
         local slot_1_cond = string.format(math.floor(self.repair_outfit_slot_1:condition() * 100)) .. "%"
         news_manager.send_repair(slot_1_name, slot_1_cond)
         self.repair_outfit_slot_1:set_condition(1.0)
         passed1_bool = true
      end
   end
   if self:check_included_cond(2) then
      if self.repair_outfit_slot_2 ~= nil then
         local slot_2_name = sgm_functions.ReadCaption(self.repair_outfit_slot_2:section())
         local slot_2_cond = string.format(math.floor(self.repair_outfit_slot_2:condition() * 100)) .. "%"
         news_manager.send_repair(slot_2_name, slot_2_cond)
         self.repair_outfit_slot_2:set_condition(1.0)
         passed2_bool = true
      end
   end
   if passed1_bool == false and passed2_bool == false then
      sgm_g.give_object_to_actor("repair_outfit_box")
      news_manager.send_tip(db.actor, "st_no_repair", 0, "remont", 4000, nil, "st_no_repair_title")
   end
   self:HideDialog()
   game_hide_menu()
end

function repair_outfit_box:btn_close()
   self:HideDialog()
   sgm_g.give_object_to_actor("repair_outfit_box")
end

class "repair_outfit_box_used" (CUIScriptWnd)
function repair_outfit_box_used:__init(owner)
   super()
   self.repair_outfit_slot_1 = db.actor:item_in_slot(7)
   self.repair_outfit_slot_2 = db.actor:item_in_slot(12)
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function repair_outfit_box_used:__finalize()
end

function repair_outfit_box_used:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.repair_outfit_form = xml:InitStatic("repair_outfit_form", self)
   self:Register(xml:Init3tButton("repair_outfit_form:btn_repair", self.repair_outfit_form), "btn_repair")
   self:Register(xml:Init3tButton("repair_outfit_form:btn_close", self.repair_outfit_form), "btn_close")
   self.slot_a_cond = xml:InitStatic("repair_outfit_form:slot_a_cond", self.repair_outfit_form)
   self.slot_b_cond = xml:InitStatic("repair_outfit_form:slot_b_cond", self.repair_outfit_form)
   if self.repair_outfit_slot_1 ~= nil then
      slot_1_cond = string.format(math.floor(self.repair_outfit_slot_1:condition() * 100)) .. "%"
      self.slot_a_cond:TextControl():SetText(slot_1_cond)
   end
   if self.repair_outfit_slot_2 ~= nil then
      slot_2_cond = string.format(math.floor(self.repair_outfit_slot_2:condition() * 100)) .. "%"
      self.slot_b_cond:TextControl():SetText(slot_2_cond)
   end
   self.choose_box = CUIMessageBoxEx()
   self:Register(self.choose_box, "choose_box")
end

function repair_outfit_box_used:InitCallBacks()
   self:AddCallback("btn_repair", ui_events.BUTTON_CLICKED, self.btn_repair, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
   self:AddCallback("choose_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.choose_box_yes, self)
   self:AddCallback("choose_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.choose_box_no, self)
end

function repair_outfit_box_used:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
end

function repair_outfit_box_used:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function repair_outfit_box_used:btn_repair()
   self.choose_box:InitMessageBox("mb_only_outfit_donor_repair")
   self.choose_box:ShowDialog(true)
end

function repair_outfit_box_used:choose_box_no()
   self.choose_box:ShowDialog(false)
   self.choose_box:HideDialog()
   self:btn_close()
end

function repair_outfit_box_used:spend_items(item_name, slot)
   for k, v in pairs(self:get_release_items(item_name, slot)) do
      if v ~= nil and alife():object(v) then
         alife():release(alife():object(v), true)
      end
   end
end

function repair_outfit_box_used:get_release_items(need_item, slot)
   local items_cnt = 0
   local items_collected = {}
   local function relocator(temp, item)
      if item:section() == need_item and items_cnt == 0 and db.actor:item_in_slot(slot) ~= nil and item:id() ~= db.actor:item_in_slot(slot):id() then
         table.insert(items_collected, item:id())
         items_cnt = 1
      end
   end
   db.actor:iterate_inventory(relocator, db.actor)
   return items_collected
end

function repair_outfit_box_used:check_included_cond(type)
   local exclude_1_result, exclude_2_result = true, true
   if repair_outfit_excluded == "" then return true end
   if type == 1 and self.repair_outfit_slot_1 == nil then return true end
   if type == 2 and self.repair_outfit_slot_2 == nil then return true end
   local exclude_table = utils.parse_spawns(repair_outfit_excluded)
   local exclude_count = get_table_names(exclude_table)
   for k, v in pairs(exclude_table) do
      if type == 1 and find_in_string(self.repair_outfit_slot_1:section(), v.section) then
         exclude_1_result = false
      end
      if type == 2 and find_in_string(self.repair_outfit_slot_2:section(), v.section) then
         exclude_2_result = false
      end
   end
   if type == 1 then
      return exclude_1_result
   elseif type == 2 then
      return exclude_2_result
   end
end

function repair_outfit_box_used:choose_box_yes()
   local exclude_val = 0
   local passed1_bool = false
   local passed2_bool = false
   if self:check_included_cond(1) then
      if self.repair_outfit_slot_1 ~= nil and find_out_string(self.repair_outfit_slot_1:section(), "reduce_") and (have_item_count(self.repair_outfit_slot_1:section(), 2) or have_item_count("reduce_" .. self.repair_outfit_slot_1:section(), 1)) then
         if have_item_count(self.repair_outfit_slot_1:section(), 2) then
            self:spend_items(self.repair_outfit_slot_1:section(), 7)
            local slot_1_name = sgm_functions.ReadCaption(self.repair_outfit_slot_1:section())
            local slot_1_conds = string.format(math.floor(self.repair_outfit_slot_1:condition() * 100)) .. "%"
            self.repair_outfit_slot_1:set_condition(1.0)
            news_manager.send_repair(slot_1_name, slot_1_conds)
            passed1_bool = true
         elseif have_item_count("reduce_" .. self.repair_outfit_slot_1:section(), 1) then
            self:spend_items("reduce_" .. self.repair_outfit_slot_1:section(), 7)
            local slot_1_name = sgm_functions.ReadCaption(self.repair_outfit_slot_1:section())
            local slot_1_conds = string.format(math.floor(self.repair_outfit_slot_1:condition() * 100)) .. "%"
            self.repair_outfit_slot_1:set_condition(1.0)
            news_manager.send_repair(slot_1_name, slot_1_conds)
            passed1_bool = true
         end
      end
      if self.repair_outfit_slot_1 ~= nil and find_in_string(self.repair_outfit_slot_1:section(), "reduce_") and have_item_count(self.repair_outfit_slot_1:section(), 2) then
         if have_item_count(self.repair_outfit_slot_1:section(), 2) then
            self:spend_items(self.repair_outfit_slot_1:section(), 7)
            local slot_1_name = sgm_functions.ReadCaption(self.repair_outfit_slot_1:section())
            local slot_1_conds = string.format(math.floor(self.repair_outfit_slot_1:condition() * 100)) .. "%"
            self.repair_outfit_slot_1:set_condition(1.0)
            news_manager.send_repair(slot_1_name, slot_1_conds)
            passed1_bool = true
         end
      end
   else
      exclude_val = exclude_val + 1
   end
   if self:check_included_cond(2) then
      if self.repair_outfit_slot_2 ~= nil and have_item_count(self.repair_outfit_slot_2:section(), 2) then
         self:spend_items(self.repair_outfit_slot_2:section(), 12)
         local slot_2_name = sgm_functions.ReadCaption(self.repair_outfit_slot_2:section())
         local slot_2_conds = string.format(math.floor(self.repair_outfit_slot_2:condition() * 100)) .. "%"
         self.repair_outfit_slot_2:set_condition(1.0)
         news_manager.send_repair(slot_2_name, slot_2_conds)
         passed2_bool = true
      end
   else
      exclude_val = exclude_val + 1
   end
   if passed1_bool == false and passed2_bool == false then
      if exclude_val > 0 then
         news_manager.send_tip(db.actor, "st_no_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      elseif self.repair_outfit_slot_1 ~= nil or self.repair_outfit_slot_2 ~= nil then
         news_manager.send_tip(db.actor, "st_no_donor_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      else
         news_manager.send_tip(db.actor, "st_no_repair", 0, "remont", 4000, nil, "st_no_repair_title")
      end
      sgm_g.give_object_to_actor("repair_outfit_box_used")
   end
   self.choose_box:ShowDialog(false)
   self.choose_box:HideDialog()
   self:HideDialog()
   game_hide_menu()
end

function repair_outfit_box_used:btn_close()
   self:HideDialog()
   sgm_g.give_object_to_actor("repair_outfit_box_used")
end

------------------------------------------------------------------------------
--                              Армейский таймер                            --
------------------------------------------------------------------------------
army_timer_value = 0
army_timer_deprive = 0
army_timer_active = false
class "army_timer" (CUIScriptWnd)
function army_timer:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function army_timer:__finalize()
end

function army_timer:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.army_timer_form = xml:InitStatic("army_timer_form", self)
   self:Register(xml:Init3tButton("army_timer_form:btn_start", self.army_timer_form), "btn_start")
   self:Register(xml:Init3tButton("army_timer_form:btn_close", self.army_timer_form), "btn_close")
   self:Register(xml:Init3tButton("army_timer_form:btn_stop", self.army_timer_form), "btn_stop")
   self.timer_value = xml:InitStatic("army_timer_form:timer_value", self.army_timer_form)
end

function army_timer:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
   if army_timer_active == true then
      army_timer_value = string.format(math.floor(time_global() / 1000)) - army_timer_deprive
   else
      if army_timer_value > 0 then
         army_timer_value = 0
      end
   end
   self.timer_value:TextControl():SetText(army_timer_value)
end

function army_timer:InitCallBacks()
   self:AddCallback("btn_start", ui_events.BUTTON_CLICKED, self.btn_start, self)
   self:AddCallback("btn_stop", ui_events.BUTTON_CLICKED, self.btn_stop, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
end

function army_timer:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function army_timer:btn_start()
   army_timer_active = true
   army_timer_deprive = string.format(math.floor(time_global() / 1000))
end

function army_timer:btn_stop()
   army_timer_active = false
end

function army_timer:btn_close()
   sgm_g.give_object_to_actor("army_timer")
   self:HideDialog()
end

------------------------------------------------------------------------------
--                           Конвертер для гранат                          --
------------------------------------------------------------------------------
class "conventer_grenade_box" (CUIScriptWnd)
function conventer_grenade_box:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function conventer_grenade_box:__finalize()
end

function conventer_grenade_box:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.conventer_grenade_form = xml:InitStatic("conventer_grenade_form", self)
   self:Register(xml:Init3tButton("conventer_grenade_form:btn_1_slot", self.conventer_grenade_form), "btn_1_slot")
   self:Register(xml:Init3tButton("conventer_grenade_form:btn_2_slot", self.conventer_grenade_form), "btn_2_slot")
   self:Register(xml:Init3tButton("conventer_grenade_form:btn_3_slot", self.conventer_grenade_form), "btn_3_slot")
   self:Register(xml:Init3tButton("conventer_grenade_form:btn_close", self.conventer_grenade_form), "btn_close")
   self.btn_1_slot_count = xml:InitStatic("conventer_grenade_form:btn_1_slot_count", self.conventer_grenade_form)
   self.btn_2_slot_count = xml:InitStatic("conventer_grenade_form:btn_2_slot_count", self.conventer_grenade_form)
   self.btn_3_slot_count = xml:InitStatic("conventer_grenade_form:btn_3_slot_count", self.conventer_grenade_form)
   self.btn_spare_count = xml:InitStatic("conventer_grenade_form:btn_spare_count", self.conventer_grenade_form)
   self.form_title = xml:InitStatic("conventer_grenade_form:form_title", self.conventer_grenade_form)
   self.need_spare_box = CUIMessageBoxEx()
   self:Register(self.need_spare_box, "need_spare_box")
   self.need_grenade_box = CUIMessageBoxEx()
   self:Register(self.need_grenade_box, "need_grenade_box")
end

function conventer_grenade_box:InitCallBacks()
   self:AddCallback("btn_1_slot", ui_events.BUTTON_CLICKED, self.btn_1_slot, self)
   self:AddCallback("btn_2_slot", ui_events.BUTTON_CLICKED, self.btn_2_slot, self)
   self:AddCallback("btn_3_slot", ui_events.BUTTON_CLICKED, self.btn_3_slot, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
   self:AddCallback("need_spare_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.need_spare_box_ok, self)
   self:AddCallback("need_spare_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.need_spare_box_ok, self)
   self:AddCallback("need_grenade_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.need_grenade_box_ok, self)
   self:AddCallback("need_grenade_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.need_grenade_box_ok, self)
end

function conventer_grenade_box:need_spare_box_ok()
   self.need_spare_box:ShowDialog(false)
   self.need_spare_box:HideDialog()
end

function conventer_grenade_box:need_grenade_box_ok()
   self.need_grenade_box:ShowDialog(false)
   self.need_grenade_box:HideDialog()
end

function conventer_grenade_box:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
   self.form_title:TextControl():SetText(game.translate_string("st_conventer_grenade_title"))
   self.btn_1_slot_count:TextControl():SetText(get_item_count("grenade_rgd5"))
   self.btn_2_slot_count:TextControl():SetText(get_item_count("grenade_f1"))
   self.btn_3_slot_count:TextControl():SetText(get_item_count("grenade_gd-05"))
end

function conventer_grenade_box:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function conventer_grenade_box:btn_1_slot()
   if get_item_count("grenade_rgd5") < 2 then
      self.need_grenade_box:InitMessageBox("mb_need_rgd5_box")
      self.need_grenade_box:ShowDialog(true)
   else
      self:spend_granades("grenade_rgd5")
      self:HideDialog()
   end
end

function conventer_grenade_box:btn_2_slot()
   if get_item_count("grenade_f1") < 2 then
      self.need_grenade_box:InitMessageBox("mb_need_f1_box")
      self.need_grenade_box:ShowDialog(true)
   else
      self:spend_granades("grenade_f1")
      self:HideDialog()
   end
end

function conventer_grenade_box:btn_3_slot()
   if get_item_count("grenade_gd-05") < 2 then
      self.need_grenade_box:InitMessageBox("mb_need_gd05_box")
      self.need_grenade_box:ShowDialog(true)
   else
      self:spend_granades("grenade_gd-05")
      self:HideDialog()
   end
end

function conventer_grenade_box:spend_granades(granade_name)
   for k, v in pairs(self:get_release_granades(granade_name)) do
      if v ~= nil and alife():object(v) then
         alife():release(alife():object(v), true)
      end
   end
   sgm_g.give_object_to_actor(granade_name .. "_double")
end

function conventer_grenade_box:get_release_granades(granade_name)
   local item_cnt = 0
   local item_collected = {}
   local function calc(temp, item)
      if item:section() == granade_name then
         if item_cnt == 0 then
            item_cnt = 1
            table.insert(item_collected, item:id())
         elseif item_cnt == 1 then
            item_cnt = 2
            table.insert(item_collected, item:id())
         end
      end
   end
   db.actor:iterate_inventory(calc, db.actor)
   return item_collected
end

function conventer_grenade_box:btn_close()
   sgm_g.give_object_to_actor("conventer_grenade_box")
   self:HideDialog()
end

------------------------------------------------------------------------------
--                            Персональный маяк                             --
------------------------------------------------------------------------------
class "personal_marker" (CUIScriptWnd)
function personal_marker:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function personal_marker:__finalize()
end

function personal_marker:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.personal_marker_form = xml:InitStatic("personal_marker_form", self)
   self:Register(xml:Init3tButton("personal_marker_form:btn_setup", self.personal_marker_form), "btn_setup")
   self:Register(xml:Init3tButton("personal_marker_form:btn_radius_hide", self.personal_marker_form), "btn_radius_hide")
   self:Register(xml:Init3tButton("personal_marker_form:btn_all_hide", self.personal_marker_form), "btn_all_hide")
   self:Register(xml:Init3tButton("personal_marker_form:btn_cancel", self.personal_marker_form), "btn_cancel")
   self.enter_field = xml:InitEditBox("personal_marker_form:enter_field", self.personal_marker_form)
   self:Register(self.enter_field, "enter_field")
end

function personal_marker:InitCallBacks()
   self:AddCallback("btn_setup", ui_events.BUTTON_CLICKED, self.btn_setup, self)
   self:AddCallback("btn_radius_hide", ui_events.BUTTON_CLICKED, self.btn_radius_hide, self)
   self:AddCallback("btn_all_hide", ui_events.BUTTON_CLICKED, self.btn_all_hide, self)
   self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.btn_cancel, self)
end

function personal_marker:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_cancel()
      end
   end
   return true
end

function personal_marker:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_cancel()
   end
end

function personal_marker:btn_setup()
   local sobj = alife():create("personal_marker", db.actor:position(), db.actor:level_vertex_id(),
      db.actor:game_vertex_id())
   if sgm_g.exists(self.enter_field:GetText()) and self.enter_field:GetText() ~= "" then
      sgm_g.add_spot_on_map(sobj.id, sgm_flags.spot_map_marker, self.enter_field:GetText())
   else
      sgm_g.add_spot_on_map(sobj.id, sgm_flags.spot_map_marker, "st_personal_marker_name")
   end
   self:HideDialog()
end

function personal_marker:btn_radius_hide()
   hide_radius_spot_by_section("personal_marker", sgm_flags.spot_map_marker, 100)
end

function personal_marker:btn_all_hide()
   hide_spot_by_section("personal_marker", sgm_flags.spot_map_marker)
end

function personal_marker:btn_cancel()
   sgm_g.give_object_to_actor("personal_marker")
   self:HideDialog()
end

------------------------------------------------------------------------------
--                          Персональный рюкзак                             --
------------------------------------------------------------------------------
class "personal_rukzak" (CUIScriptWnd)
function personal_rukzak:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function personal_rukzak:__finalize()
end

function personal_rukzak:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.personal_rukzak_form = xml:InitStatic("personal_rukzak_form", self)
   self:Register(xml:Init3tButton("personal_rukzak_form:btn_leave", self.personal_rukzak_form), "btn_leave")
   self:Register(xml:Init3tButton("personal_rukzak_form:btn_radius_hide", self.personal_rukzak_form), "btn_radius_hide")
   self:Register(xml:Init3tButton("personal_rukzak_form:btn_all_hide", self.personal_rukzak_form), "btn_all_hide")
   self:Register(xml:Init3tButton("personal_rukzak_form:btn_cancel", self.personal_rukzak_form), "btn_cancel")
   self.spot_name_field = xml:InitEditBox("personal_rukzak_form:spot_name_field", self.personal_rukzak_form)
   self:Register(self.spot_name_field, "spot_name_field")
   self.check_with_spot = xml:InitCheck("personal_rukzak_form:check_with_spot", self.personal_rukzak_form)
   self.check_with_spot:SetCheck(true)
   self.check_with_take = xml:InitCheck("personal_rukzak_form:check_with_take", self.personal_rukzak_form)
   self.check_with_take:SetCheck(true)
end

function personal_rukzak:InitCallBacks()
   self:AddCallback("btn_leave", ui_events.BUTTON_CLICKED, self.btn_leave, self)
   self:AddCallback("btn_radius_hide", ui_events.BUTTON_CLICKED, self.btn_radius_hide, self)
   self:AddCallback("btn_all_hide", ui_events.BUTTON_CLICKED, self.btn_all_hide, self)
   self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.btn_cancel, self)
end

function personal_rukzak:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_cancel()
   end
end

function personal_rukzak:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_cancel()
      end
   end
   return true
end

function personal_rukzak:btn_leave()
   if self.check_with_spot:GetCheck() == true then
      local sobj = sgm_g.create("default_inventory_box", db.actor:position().x, db.actor:position().y,
         db.actor:position().z,
         db.actor:level_vertex_id(), db.actor:game_vertex_id())
      if sgm_g.exists(self.spot_name_field:GetText()) and self.spot_name_field:GetText() ~= "" then
         sgm_g.add_spot_on_map(sobj.id, sgm_flags.spot_hero_rucksack, self.spot_name_field:GetText())
      else
         sgm_g.add_spot_on_map(sobj.id, sgm_flags.spot_hero_rucksack, "st_treasure_rukzak_name")
      end
      if self.check_with_take:GetCheck() == true then
         alife():create("use_personal_rukzak", vector(), 0, 0, sobj.id)
      end
   else
      local sobj = sgm_g.create("default_inventory_box", db.actor:position().x, db.actor:position().y,
         db.actor:position().z,
         db.actor:level_vertex_id(), db.actor:game_vertex_id())
      if self.check_with_take:GetCheck() == true then
         alife():create("use_personal_rukzak", vector(), 0, 0, sobj.id)
      end
   end
   self:HideDialog()
end

function personal_rukzak:btn_radius_hide()
   hide_radius_spot_by_section("default_inventory_box", sgm_flags.spot_hero_rucksack, 100)
end

function personal_rukzak:btn_all_hide()
   hide_spot_by_section("default_inventory_box", sgm_flags.spot_hero_rucksack)
end

function personal_rukzak:btn_cancel()
   sgm_g.give_object_to_actor("personal_rukzak")
   self:HideDialog()
end

------------------------------------------------------------------------------
--                             Заряд РС-15                                  --
------------------------------------------------------------------------------
cfg_remote_charge_delay = 0
class "remote_charge" (CUIScriptWnd)
function remote_charge:__init(owner)
   super()
   cfg_remote_charge_delay = 0
   self.remote_charge_delay = 0
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function remote_charge:__finalize()
end

function remote_charge:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.remote_charge_form = xml:InitStatic("remote_charge_form", self)
   self:Register(xml:Init3tButton("remote_charge_form:btn_place", self.remote_charge_form), "btn_place")
   self:Register(xml:Init3tButton("remote_charge_form:btn_cancel", self.remote_charge_form), "btn_cancel")
   self:Register(xml:Init3tButton("remote_charge_form:btn_charge_delay_dec", self.remote_charge_form),
      "btn_charge_delay_dec")
   self:Register(xml:Init3tButton("remote_charge_form:btn_charge_delay_inc", self.remote_charge_form),
      "btn_charge_delay_inc")
   self.charge_delay_field = xml:InitStatic("remote_charge_form:charge_delay_field", self.remote_charge_form)
end

function remote_charge:InitCallBacks()
   self:AddCallback("btn_place", ui_events.BUTTON_CLICKED, self.btn_place, self)
   self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.btn_cancel, self)
   self:AddCallback("btn_charge_delay_dec", ui_events.BUTTON_CLICKED, self.btn_charge_delay_dec, self)
   self:AddCallback("btn_charge_delay_inc", ui_events.BUTTON_CLICKED, self.btn_charge_delay_inc, self)
end

function remote_charge:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_cancel()
      end
   end
   return true
end

function remote_charge:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_cancel()
   end
   if self.remote_charge_delay < 0 then
      self.remote_charge_delay = 0
   end
   if self.remote_charge_delay == 0 then
      self.charge_delay_field:TextControl():SetText(game.translate_string("st_remote_charge_delay_deactivated"))
   else
      local charge_delay = self.remote_charge_delay / 1000
      self.charge_delay_field:TextControl():SetText(game.translate_string("st_remote_charge_delay_timer") ..
         " " .. charge_delay .. " " .. game.translate_string("st_remote_charge_delay_value"))
   end
end

function remote_charge:btn_charge_delay_dec()
   self.remote_charge_delay = self.remote_charge_delay - 1000
end

function remote_charge:btn_charge_delay_inc()
   self.remote_charge_delay = self.remote_charge_delay + 1000
end

function remote_charge:btn_place()
   cfg_remote_charge_delay = self.remote_charge_delay
   local obj = sgm_g.create("remote_charge", db.actor:position().x, db.actor:position().y, db.actor:position().z,
      db.actor:level_vertex_id(), db.actor:game_vertex_id())
   if self.remote_charge_delay == 0 then
      sgm_g.add_spot_on_map(obj.id, sgm_flags.spot_remote_charge, "st_remote_charge_spot")
   else
      local charge_delay = self.remote_charge_delay / 1000
      sgm_g.add_spot_on_map(obj.id, sgm_flags.spot_remote_charge,
         game.translate_string("st_remote_charge_spot") ..
         ": " .. charge_delay .. " " .. game.translate_string("st_remote_charge_delay_value"))
   end
   check_actor_item_to_add("remote_charge_control")
   self:HideDialog()
end

function remote_charge:btn_cancel()
   sgm_g.give_object_to_actor("remote_explosive_charge")
   self:HideDialog()
end

------------------------------------------------------------------------------
--                        Карточная игра: 21 очко                           --
------------------------------------------------------------------------------
card_game_21_stage = "need_rate"
card_game_21_take_else = "empty_card"
card_game_21_existing_masks = { "kresta", "pika", "bubna", "chirva" }
card_game_21_existing_names = { "6", "7", "8", "9", "10", "J", "Q", "K", "T" }
card_game_21_winner = "none"
card_game_21_enemy_name = "none"
card_game_21_info_about_your = ""
card_game_21_info_about_enemy = ""
card_game_21_your_points = 0
card_game_21_enemy_points = 0
card_game_21_rate = 0
card_game_21_show_winner = "hide"
card_game_21_difficulty = "easy"
card_game_21_increasing_rate = 50
class "card_game_21_point" (CUIScriptWnd)
function card_game_21_point:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function card_game_21_point:__finalize()
end

function card_game_21_point:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.card_game_21_point_form = xml:InitStatic("card_game_21_point_form", self)
   self:start_button(xml, "btn_exit_game")
   self:start_button(xml, "btn_play_game")
   self:start_button(xml, "btn_take_else")
   self:start_button(xml, "btn_send_move")
   self:start_button(xml, "btn_continue_game")
   self:start_button(xml, "btn_rate_minus")
   self:start_button(xml, "btn_rate_plus")
   self:start_button(xml, "btn_take_rate")
   self.form_title = xml:InitStatic("card_game_21_point_form:form_title", self.card_game_21_point_form)
   self.check_save_rate = xml:InitCheck("card_game_21_point_form:check_save_rate", self.card_game_21_point_form)
   self.check_save_rate:SetCheck(sgm_functions.info_get_boolean("card_game_21_save_rate"))
   self.check_increasing = xml:InitCheck("card_game_21_point_form:check_increasing", self.card_game_21_point_form)
   self.check_increasing:SetCheck(sgm_functions.info_get_boolean("card_game_21_increasing"))
   self.your_game_info = xml:InitStatic("card_game_21_point_form:your_game_info", self.card_game_21_point_form)
   self.enemy_game_info = xml:InitStatic("card_game_21_point_form:enemy_game_info", self.card_game_21_point_form)
   self.your_card_value = xml:InitStatic("card_game_21_point_form:your_card_value", self.card_game_21_point_form)
   self.enemy_card_value = xml:InitStatic("card_game_21_point_form:enemy_card_value", self.card_game_21_point_form)
   self.self_card_1 = xml:InitStatic("card_game_21_point_form:self_card_1", self.card_game_21_point_form)
   self.self_card_2 = xml:InitStatic("card_game_21_point_form:self_card_2", self.card_game_21_point_form)
   self.self_card_3 = xml:InitStatic("card_game_21_point_form:self_card_3", self.card_game_21_point_form)
   self.self_card_4 = xml:InitStatic("card_game_21_point_form:self_card_4", self.card_game_21_point_form)
   self.self_card_5 = xml:InitStatic("card_game_21_point_form:self_card_5", self.card_game_21_point_form)
   self.enemy_card_1 = xml:InitStatic("card_game_21_point_form:enemy_card_1", self.card_game_21_point_form)
   self.enemy_card_2 = xml:InitStatic("card_game_21_point_form:enemy_card_2", self.card_game_21_point_form)
   self.enemy_card_3 = xml:InitStatic("card_game_21_point_form:enemy_card_3", self.card_game_21_point_form)
   self.enemy_card_4 = xml:InitStatic("card_game_21_point_form:enemy_card_4", self.card_game_21_point_form)
   self.enemy_card_5 = xml:InitStatic("card_game_21_point_form:enemy_card_5", self.card_game_21_point_form)
   self.rate_field = xml:InitStatic("card_game_21_point_form:rate_field", self.card_game_21_point_form)
   self.infoline_1 = xml:InitStatic("card_game_21_point_form:your_game_info", self.card_game_21_point_form)
   self.infoline_2 = xml:InitStatic("card_game_21_point_form:enemy_game_info", self.card_game_21_point_form)
   self.r_green_diod = xml:InitStatic("card_game_21_point_form:r_green_diod", self.card_game_21_point_form)
   self.l_green_diod = xml:InitStatic("card_game_21_point_form:l_green_diod", self.card_game_21_point_form)
   self.r_yellow_diod = xml:InitStatic("card_game_21_point_form:r_yellow_diod", self.card_game_21_point_form)
   self.l_yellow_diod = xml:InitStatic("card_game_21_point_form:l_yellow_diod", self.card_game_21_point_form)
   self.r_red_diod = xml:InitStatic("card_game_21_point_form:r_red_diod", self.card_game_21_point_form)
   self.l_red_diod = xml:InitStatic("card_game_21_point_form:l_red_diod", self.card_game_21_point_form)
   self.winner_box = CUIMessageBoxEx()
   self:Register(self.winner_box, "winner_box")
end

function card_game_21_point:InitCallBacks()
   self:AddCallback("btn_exit_game", ui_events.BUTTON_CLICKED, self.btn_exit_game, self)
   self:AddCallback("btn_play_game", ui_events.BUTTON_CLICKED, self.btn_play_game, self)
   self:AddCallback("btn_take_else", ui_events.BUTTON_CLICKED, self.btn_take_else, self)
   self:AddCallback("btn_send_move", ui_events.BUTTON_CLICKED, self.btn_send_move, self)
   self:AddCallback("btn_take_rate", ui_events.BUTTON_CLICKED, self.btn_take_rate, self)
   self:AddCallback("btn_rate_minus", ui_events.BUTTON_CLICKED, self.btn_rate_minus, self)
   self:AddCallback("btn_rate_plus", ui_events.BUTTON_CLICKED, self.btn_rate_plus, self)
   self:AddCallback("btn_continue_game", ui_events.BUTTON_CLICKED, self.btn_continue_game, self)
   self:AddCallback("winner_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.show_game_winner, self)
   self:AddCallback("winner_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.show_game_winner, self)
end

function card_game_21_point:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_exit_game()
   else
      self.form_title:TextControl():SetText(game.translate_string("st_21_point_title"))
      if card_game_21_stage == "play_game" or card_game_21_stage == "end_game" then
         self.your_game_info:TextControl():SetText(card_game_21_info_about_your)
         self.enemy_game_info:TextControl():SetText(card_game_21_info_about_enemy)
         self.your_card_value:TextControl():SetText(game.translate_string("st_21_point_your_card_value") ..
            " " .. card_game_21_your_points)
         self.enemy_card_value:TextControl():SetText(game.translate_string("st_21_point_enemy_card_value") ..
            " " .. card_game_21_enemy_points)
      else
         self.your_game_info:TextControl():SetText("")
         self.enemy_game_info:TextControl():SetText("")
         self.your_card_value:TextControl():SetText("")
         self.enemy_card_value:TextControl():SetText("")
      end
      if card_game_21_stage == "need_rate" then
         self.rate_field:TextControl():SetText(game.translate_string("st_21_point_rate_field") .. " " ..
            card_game_21_rate)
         self.infoline_1:TextControl():SetText(game.translate_string("st_21_point_infoline_1") ..
            " " .. db.actor:money() .. " " .. game.translate_string("st_21_point_money"))
         self.infoline_2:TextControl():SetText(game.translate_string("st_21_point_infoline_2") ..
            " " .. sgm_flags.value_card_21_max_rate .. ".")
      else
         self.infoline_1:TextControl():SetText("")
         self.infoline_2:TextControl():SetText("")
      end
   end
   if card_game_21_rate < 0 then
      card_game_21_rate = 0
   elseif card_game_21_rate > sgm_flags.value_card_21_max_rate then
      card_game_21_rate = sgm_flags.value_card_21_max_rate
   end
   if card_game_21_rate > db.actor:money() then
      run_choose_box("yes", "card_game_21_point", game.translate_string("st_21_point_dont_money_to_rate"))
      card_game_21_rate = db.actor:money()
   end
   if card_game_21_stage == "need_rate" then
      self.get_btn_send_move:Show(false)
      self.get_btn_take_else:Show(false)
      self.get_btn_play_game:Show(false)
      self.get_btn_send_move:Enable(false)
      self.get_btn_take_else:Enable(false)
      self.get_btn_play_game:Enable(false)
      self.get_btn_take_rate:Show(true)
      self.get_btn_take_rate:Enable(true)
      self.get_btn_rate_minus:Show(true)
      self.get_btn_rate_plus:Show(true)
      self.get_btn_continue_game:Show(false)
      self.get_btn_continue_game:Enable(false)
      self.get_btn_exit_game:Enable(true)
      self.check_save_rate:Show(true)
      self.check_save_rate:Enable(true)
      self.check_increasing:Show(true)
      self.check_increasing:Enable(true)
      self.r_green_diod:Show(false)
      self.r_green_diod:Enable(false)
      self.l_green_diod:Show(false)
      self.l_green_diod:Enable(false)
      self.r_yellow_diod:Show(false)
      self.r_yellow_diod:Enable(false)
      self.l_yellow_diod:Show(false)
      self.l_yellow_diod:Enable(false)
      self.r_red_diod:Show(false)
      self.r_red_diod:Enable(false)
      self.l_red_diod:Show(false)
      self.l_red_diod:Enable(false)
      if card_game_21_rate == 0 then
         self.get_btn_rate_minus:Enable(false)
      else
         self.get_btn_rate_minus:Enable(true)
      end
      if card_game_21_rate == sgm_flags.value_card_21_max_rate then
         self.get_btn_rate_plus:Enable(false)
      else
         self.get_btn_rate_plus:Enable(true)
      end
   elseif card_game_21_stage == "taked_rate" then
      self.get_btn_send_move:Show(true)
      self.get_btn_take_else:Show(true)
      self.get_btn_play_game:Show(true)
      self.get_btn_send_move:Enable(false)
      self.get_btn_take_else:Enable(false)
      self.get_btn_play_game:Enable(true)
      self.get_btn_take_rate:Show(false)
      self.get_btn_take_rate:Enable(false)
      self.get_btn_rate_minus:Show(false)
      self.get_btn_rate_plus:Show(false)
      self.get_btn_rate_minus:Enable(false)
      self.get_btn_rate_plus:Enable(false)
      self.get_btn_continue_game:Show(false)
      self.get_btn_continue_game:Enable(false)
      self.get_btn_exit_game:Enable(true)
      self.check_save_rate:Show(false)
      self.check_save_rate:Enable(false)
      self.check_increasing:Show(false)
      self.check_increasing:Enable(false)
      self.r_green_diod:Show(false)
      self.r_green_diod:Enable(false)
      self.l_green_diod:Show(false)
      self.l_green_diod:Enable(false)
      self.r_yellow_diod:Show(false)
      self.r_yellow_diod:Enable(false)
      self.l_yellow_diod:Show(false)
      self.l_yellow_diod:Enable(false)
      self.r_red_diod:Show(true)
      self.r_red_diod:Enable(true)
      self.l_red_diod:Show(true)
      self.l_red_diod:Enable(true)
   elseif card_game_21_stage == "play_game" then
      self.get_btn_send_move:Show(true)
      self.get_btn_take_else:Show(true)
      self.get_btn_play_game:Show(true)
      self.get_btn_send_move:Enable(true)
      self.get_btn_take_else:Enable(true)
      self.get_btn_play_game:Enable(false)
      self.get_btn_take_rate:Show(false)
      self.get_btn_take_rate:Enable(false)
      self.get_btn_rate_minus:Show(false)
      self.get_btn_rate_plus:Show(false)
      self.get_btn_rate_minus:Enable(false)
      self.get_btn_rate_plus:Enable(false)
      self.get_btn_continue_game:Show(false)
      self.get_btn_continue_game:Enable(false)
      self.get_btn_exit_game:Enable(false)
      self.check_save_rate:Show(false)
      self.check_save_rate:Enable(false)
      self.check_increasing:Show(false)
      self.check_increasing:Enable(false)
      self.r_green_diod:Show(false)
      self.r_green_diod:Enable(false)
      self.l_green_diod:Show(false)
      self.l_green_diod:Enable(false)
      self.r_yellow_diod:Show(true)
      self.r_yellow_diod:Enable(true)
      self.l_yellow_diod:Show(true)
      self.l_yellow_diod:Enable(true)
      self.r_red_diod:Show(false)
      self.r_red_diod:Enable(false)
      self.l_red_diod:Show(false)
      self.l_red_diod:Enable(false)
   elseif card_game_21_stage == "end_game" then
      self.get_btn_send_move:Show(true)
      self.get_btn_take_else:Show(true)
      self.get_btn_play_game:Show(false)
      self.get_btn_send_move:Enable(false)
      self.get_btn_take_else:Enable(false)
      self.get_btn_play_game:Enable(false)
      self.get_btn_take_rate:Show(false)
      self.get_btn_take_rate:Enable(false)
      self.get_btn_rate_minus:Show(false)
      self.get_btn_rate_plus:Show(false)
      self.get_btn_rate_minus:Enable(false)
      self.get_btn_rate_plus:Enable(false)
      self.get_btn_continue_game:Show(true)
      self.get_btn_continue_game:Enable(true)
      self.get_btn_exit_game:Enable(false)
      self.check_save_rate:Show(false)
      self.check_save_rate:Enable(false)
      self.check_increasing:Show(false)
      self.check_increasing:Enable(false)
      if card_game_21_winner == "your" then
         self.r_green_diod:Show(false)
         self.r_green_diod:Enable(false)
         self.l_green_diod:Show(true)
         self.l_green_diod:Enable(true)
         self.r_yellow_diod:Show(false)
         self.r_yellow_diod:Enable(false)
         self.l_yellow_diod:Show(false)
         self.l_yellow_diod:Enable(false)
         self.r_red_diod:Show(true)
         self.r_red_diod:Enable(true)
         self.l_red_diod:Show(false)
         self.l_red_diod:Enable(false)
      elseif card_game_21_winner == "enemy" then
         self.r_green_diod:Show(true)
         self.r_green_diod:Enable(true)
         self.l_green_diod:Show(false)
         self.l_green_diod:Enable(false)
         self.r_yellow_diod:Show(false)
         self.r_yellow_diod:Enable(false)
         self.l_yellow_diod:Show(false)
         self.l_yellow_diod:Enable(false)
         self.r_red_diod:Show(false)
         self.r_red_diod:Enable(false)
         self.l_red_diod:Show(true)
         self.l_red_diod:Enable(true)
      elseif card_game_21_winner == "equally" then
         self.r_green_diod:Show(true)
         self.r_green_diod:Enable(true)
         self.l_green_diod:Show(true)
         self.l_green_diod:Enable(true)
         self.r_yellow_diod:Show(false)
         self.r_yellow_diod:Enable(false)
         self.l_yellow_diod:Show(false)
         self.l_yellow_diod:Enable(false)
         self.r_red_diod:Show(false)
         self.r_red_diod:Enable(false)
         self.l_red_diod:Show(false)
         self.l_red_diod:Enable(false)
      end
   end
   if card_game_21_show_winner == "end_show" then
      self:btn_exit_game(false)
      card_game_21_show_winner = "hide"
      self.get_btn_continue_game:Show(false)
      self.get_btn_continue_game:Enable(false)
   end
   if self.check_increasing:GetCheck() == true and card_game_21_increasing_rate ~= 200 then
      card_game_21_increasing_rate = 200
   elseif self.check_increasing:GetCheck() == false and card_game_21_increasing_rate ~= 50 then
      card_game_21_increasing_rate = 50
   end
   sgm_functions.info_give_on_boolean(self.check_save_rate:GetCheck(), "card_game_21_save_rate")
   sgm_functions.info_give_on_boolean(self.check_increasing:GetCheck(), "card_game_21_increasing")
end

function card_game_21_point:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE and card_game_21_stage ~= "play_game" and card_game_21_stage ~= "end_game" then
         self:btn_exit_game()
      end
   end
   return true
end

function card_game_21_point:start_button(xml, button_name)
   self["get_" .. button_name] = xml:Init3tButton("card_game_21_point_form:" .. button_name, self
      .card_game_21_point_form)
   self:Register(self["get_" .. button_name], button_name)
end

function card_game_21_point:ClearGameCards()
   for i = 1, 5 do
      self["self_card_" .. i]:InitTexture("ui_mod_card_hide_side")
      self["enemy_card_" .. i]:InitTexture("ui_mod_card_hide_side")
   end
end

function card_game_21_point:FillCardPoint(param, name, mask)
   local result = 0
   if name == "6" then
      result = 6
   elseif name == "7" then
      result = 7
   elseif name == "8" then
      result = 8
   elseif name == "9" then
      result = 9
   elseif name == "10" then
      result = 10
   elseif name == "J" then
      result = 2
   elseif name == "Q" then
      result = 3
   elseif name == "K" then
      result = 4
   elseif name == "T" then
      result = 11
   end
   self[param]:InitTexture("ui_mod_card_" .. name .. "_" .. mask)
   if find_in_string(param, "self_") then
      card_game_21_your_points = card_game_21_your_points + result
   else
      card_game_21_enemy_points = card_game_21_enemy_points + result
   end
end

function card_game_21_point:FillEnemyStep(step_num)
   local name, mask = get_random_string(card_game_21_existing_names), get_random_string(card_game_21_existing_masks)
   if card_game_21_difficulty == "hard" and get_rnd(1, 2) == 1 then
      if self:GetNearestPoint(card_game_21_enemy_points) == 11 then
         name = sgm_g.get_random_line("T,10")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 9 or self:GetNearestPoint(card_game_21_enemy_points) == 10 then
         name = sgm_g.get_random_line("9,10")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 8 then
         name = sgm_g.get_random_line("8")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 7 then
         name = sgm_g.get_random_line("7,8")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 6 then
         name = sgm_g.get_random_line("6")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 5 or self:GetNearestPoint(card_game_21_enemy_points) == 4 then
         name = sgm_g.get_random_line("K,Q")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 3 then
         name = sgm_g.get_random_line("Q,J")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 2 then
         name = sgm_g.get_random_line("J")
      end
   elseif card_game_21_difficulty == "normal" and get_rnd(1, 4) == 1 then
      if self:GetNearestPoint(card_game_21_enemy_points) == 11 then
         name = sgm_g.get_random_line("T,10")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 9 or self:GetNearestPoint(card_game_21_enemy_points) == 10 then
         name = sgm_g.get_random_line("9,10")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 8 then
         name = sgm_g.get_random_line("7,8,9")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 7 then
         name = sgm_g.get_random_line("6,7,8")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 6 then
         name = sgm_g.get_random_line("6,K")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 5 or self:GetNearestPoint(card_game_21_enemy_points) == 4 then
         name = sgm_g.get_random_line("K,Q")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 3 then
         name = sgm_g.get_random_line("K,Q,J")
      elseif self:GetNearestPoint(card_game_21_enemy_points) == 2 then
         name = sgm_g.get_random_line("J")
      end
   end
   self:FillCardPoint("enemy_card_" .. step_num, name, mask)
end

function card_game_21_point:GetNearestPoint(value)
   local need_value = 21
   if value < need_value then
      return need_value - value
   elseif value > need_value then
      return value - need_value
   elseif value == need_value then
      return 0
   end
end

function card_game_21_point:GetTooManyPoint(value, extra_mode)
   local need_value = 21
   if value < need_value then
      return false
   elseif value > need_value then
      return true
   elseif value == need_value then
      if extra_mode == nil or extra_mode == false then
         return true
      else
         return false
      end
   end
end

function card_game_21_point:btn_rate_minus()
   card_game_21_rate = card_game_21_rate - card_game_21_increasing_rate
end

function card_game_21_point:btn_rate_plus()
   card_game_21_rate = card_game_21_rate + card_game_21_increasing_rate
end

function card_game_21_point:btn_take_rate()
   if card_game_21_rate > 0 and db.actor:money() >= card_game_21_rate then
      card_game_21_stage = "taked_rate"
   else
      run_choose_box("yes", "card_game_21_point", game.translate_string("st_21_point_dont_take_rate"))
   end
end

function card_game_21_point:btn_exit_game(hide)
   if hide == nil or hide == true then
      self:HideDialog()
      set_ui_worked()
   end
   card_game_21_stage = "need_rate"
   card_game_21_info_about_your = ""
   card_game_21_info_about_enemy = ""
   card_game_21_enemy_name = "none"
   card_game_21_your_points = 0
   card_game_21_enemy_points = 0
   card_game_21_take_else = "empty_card"
   card_game_21_winner = "none"
   if self.check_save_rate:GetCheck() == false then
      card_game_21_rate = 0
   end
   card_game_21_show_winner = "hide"
   self:ClearGameCards()
end

function card_game_21_point:btn_play_game()
   card_game_21_difficulty = sgm_g.get_random_line("easy,normal,hard")
   if card_game_21_difficulty ~= "hard" and get_rnd(1, 6) == 1 then
      --/card_game_21_difficulty="hard"
   end
   card_game_21_stage = "play_game"
   card_game_21_winner = "none"
   card_game_21_info_about_your = game.translate_string("st_21_point_info_about_your") ..
       " " .. card_game_21_rate .. " " .. game.translate_string("st_21_point_money")
   card_game_21_info_about_enemy = card_game_21_enemy_name ..
       game.translate_string("st_21_point_info_about_enemy") ..
       " " .. card_game_21_rate .. " " .. game.translate_string("st_21_point_web_money")
   local name, mask = get_random_string(card_game_21_existing_names), get_random_string(card_game_21_existing_masks)
   self:FillCardPoint("self_card_1", name, mask)
   local name, mask = get_random_string(card_game_21_existing_names), get_random_string(card_game_21_existing_masks)
   self:FillCardPoint("self_card_2", name, mask)
end

function card_game_21_point:btn_take_else()
   local name, mask = get_random_string(card_game_21_existing_names), get_random_string(card_game_21_existing_masks)
   if card_game_21_take_else == "empty_card" then
      if self:GetNearestPoint(card_game_21_your_points) <= 5 and get_rnd(1, 5) == 1 then
         name = sgm_g.get_random_line("T,10,9,8")
      end
      self:FillCardPoint("self_card_3", name, mask)
      card_game_21_take_else = "1st_card"
   elseif card_game_21_take_else == "1st_card" then
      if self:GetNearestPoint(card_game_21_your_points) <= 5 and get_rnd(1, 5) == 1 then
         name = sgm_g.get_random_line("T,10,9,8")
      end
      self:FillCardPoint("self_card_4", name, mask)
      card_game_21_take_else = "2nd_card"
   elseif card_game_21_take_else == "2nd_card" then
      if self:GetNearestPoint(card_game_21_your_points) <= 5 and get_rnd(1, 5) == 1 then
         name = sgm_g.get_random_line("T,10,9,8")
      end
      self:FillCardPoint("self_card_5", name, mask)
      card_game_21_take_else = "3rd_card"
      self:btn_send_move()
   end
end

function card_game_21_point:btn_send_move()
   local name, mask = get_random_string(card_game_21_existing_names), get_random_string(card_game_21_existing_masks)
   self:FillCardPoint("enemy_card_1", name, mask)
   local name, mask = get_random_string(card_game_21_existing_names), get_random_string(card_game_21_existing_masks)
   self:FillCardPoint("enemy_card_2", name, mask)
   local threshold_value = math.random(3, 5)
   if self:GetNearestPoint(card_game_21_enemy_points) > threshold_value and self:GetTooManyPoint(card_game_21_enemy_points) == false then
      self:enemy_move_add_one()
   else
      self:winner_reward()
   end
end

function card_game_21_point:enemy_move_add_one()
   self:FillEnemyStep(3)
   local threshold_value = math.random(3, 5)
   if self:GetNearestPoint(card_game_21_enemy_points) > threshold_value and self:GetTooManyPoint(card_game_21_enemy_points) == false then
      self:enemy_move_add_two()
   else
      self:winner_reward()
   end
end

function card_game_21_point:enemy_move_add_two()
   self:FillEnemyStep(4)
   local threshold_value = math.random(3, 5)
   if self:GetNearestPoint(card_game_21_enemy_points) > threshold_value and self:GetTooManyPoint(card_game_21_enemy_points) == false then
      self:enemy_move_add_three()
   else
      self:winner_reward()
   end
end

function card_game_21_point:enemy_move_add_three()
   self:FillEnemyStep(5)
   self:winner_reward()
end

function card_game_21_point:winner_reward()
   if r_mod_params("bool", "card_game_21_rules_default", true) == true then
      if self:GetTooManyPoint(card_game_21_your_points, true) == false and self:GetTooManyPoint(card_game_21_enemy_points, true) == true then
         card_game_21_winner = "your"
      elseif self:GetTooManyPoint(card_game_21_your_points, true) == true and self:GetTooManyPoint(card_game_21_enemy_points, true) == false then
         card_game_21_winner = "enemy"
      else
         if self:GetNearestPoint(card_game_21_your_points) < self:GetNearestPoint(card_game_21_enemy_points) then
            card_game_21_winner = "your"
         elseif self:GetNearestPoint(card_game_21_your_points) > self:GetNearestPoint(card_game_21_enemy_points) then
            card_game_21_winner = "enemy"
         elseif self:GetNearestPoint(card_game_21_your_points) == self:GetNearestPoint(card_game_21_enemy_points) then
            card_game_21_winner = "equally"
         end
      end
   elseif r_mod_params("bool", "card_game_21_rules_default", true) == false then
      if self:GetNearestPoint(card_game_21_your_points) == self:GetNearestPoint(card_game_21_enemy_points) then
         card_game_21_winner = "equally"
      elseif self:GetNearestPoint(card_game_21_your_points) < self:GetNearestPoint(card_game_21_enemy_points) then
         card_game_21_winner = "your"
      elseif self:GetNearestPoint(card_game_21_your_points) > self:GetNearestPoint(card_game_21_enemy_points) then
         card_game_21_winner = "enemy"
      end
   end
   card_game_21_stage = "end_game"
end

function card_game_21_point:btn_continue_game()
   card_game_21_show_winner = "begin_show"
   self.winner_box:InitMessageBox("message_box_ok")
   if card_game_21_winner == "your" then
      sgm_functions.relocate_web_money(card_game_21_rate, "in")
      self.winner_box:SetText(game.translate_string("st_21_point_winner_your_1") ..
         " " ..
         card_game_21_rate ..
         " " ..
         game.translate_string("st_21_point_winner_your_2") ..
         " " ..
         card_game_21_your_points .. game.translate_string("st_21_point_winner_your_3") ..
         " " .. card_game_21_enemy_points .. ".")
   elseif card_game_21_winner == "enemy" then
      dialogs.relocate_money(db.actor, card_game_21_rate, "out")
      db.actor:give_money(-card_game_21_rate)
      game_stats.money_quest_update(-card_game_21_rate)
      self.winner_box:SetText(game.translate_string("st_21_point_winner_enemy_1") ..
         " " ..
         card_game_21_rate ..
         " " ..
         game.translate_string("st_21_point_winner_enemy_2") ..
         " " ..
         card_game_21_your_points ..
         game.translate_string("st_21_point_winner_enemy_3") .. " " .. card_game_21_enemy_points .. ".")
   else
      self.winner_box:SetText(game.translate_string("st_21_point_winner_equally_1") ..
         " " ..
         card_game_21_your_points ..
         game.translate_string("st_21_point_winner_equally_2") .. " " .. card_game_21_enemy_points .. ".")
   end
   self.winner_box:ShowDialog(true)
end

function card_game_21_point:show_game_winner()
   self.winner_box:ShowDialog(false)
   self.winner_box:HideDialog()
   card_game_21_show_winner = "end_show"
end

------------------------------------------------------------------------------
--              Мини-игра: Зачем? Под кем? Во сколько?                      --
------------------------------------------------------------------------------
question_game_correct_answer_descr = { "st_question_game_correct_answer_1_text", "st_question_game_correct_answer_2_text",
   "st_question_game_correct_answer_3_text", "st_question_game_correct_answer_4_text" }
question_game_wrong_answer_descr = { "st_question_game_wrong_answer_1_text", "st_question_game_wrong_answer_2_text",
   "st_question_game_wrong_answer_3_text", "st_question_game_wrong_answer_4_text" }
question_game_ini = ini_file("misc\\config_question_game.ltx")
question_game_q_count = 1
question_game_a_count = 1
question_game_q_available = 0
question_game_a_available = 0
question_game_reward_money = 0
question_game_question_number = 1
question_game_correct_series = 0
question_game_stage = "nil"
question_game_question_descr = ""
question_game_answer_a = ""
question_game_answer_b = ""
question_game_answer_c = ""
question_game_answer_d = ""
question_game_correct = ""
question_game_q_s = "nil"
question_game_q_h_f = false
question_game_a_s = "nil"
question_game_a_h_f = false
question_q_table = {}
question_a_table = {}
class "question_game" (CUIScriptWnd)
function question_game:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function question_game:__finalize()
end

function question_game:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.question_game_form = xml:InitStatic("question_game_form", self)
   self.form_title = xml:InitStatic("question_game_form:form_title", self.question_game_form)
   self:start_button(xml, "btn_exit_game")
   self:start_button(xml, "btn_answer_a")
   self:start_button(xml, "btn_answer_b")
   self:start_button(xml, "btn_answer_c")
   self:start_button(xml, "btn_answer_d")
   self:start_button(xml, "btn_manual")
   self:start_button(xml, "btn_start_game")
   self:start_button(xml, "btn_continue_game")
   self.question_number_field = xml:InitStatic("question_game_form:question_number_field", self.question_game_form)
   self.correct_series_field = xml:InitStatic("question_game_form:correct_series_field", self.question_game_form)
   self.question_field = xml:InitStatic("question_game_form:question_field", self.question_game_form)
   self.answer_a_field = xml:InitStatic("question_game_form:answer_a_field", self.question_game_form)
   self.answer_b_field = xml:InitStatic("question_game_form:answer_b_field", self.question_game_form)
   self.answer_c_field = xml:InitStatic("question_game_form:answer_c_field", self.question_game_form)
   self.answer_d_field = xml:InitStatic("question_game_form:answer_d_field", self.question_game_form)
   self.result_box = CUIMessageBoxEx()
   self:Register(self.result_box, "result_box")
   self.reward_box = CUIMessageBoxEx()
   self:Register(self.reward_box, "reward_box")
   self.message_box = CUIMessageBoxEx()
   self:Register(self.message_box, "message_box")
   self:parse_questions()
   self:parse_advices()
end

function question_game:InitCallBacks()
   self:AddCallback("btn_exit_game", ui_events.BUTTON_CLICKED, self.btn_exit_game, self)
   self:AddCallback("btn_answer_a", ui_events.BUTTON_CLICKED, self.btn_answer_a, self)
   self:AddCallback("btn_answer_b", ui_events.BUTTON_CLICKED, self.btn_answer_b, self)
   self:AddCallback("btn_answer_c", ui_events.BUTTON_CLICKED, self.btn_answer_c, self)
   self:AddCallback("btn_answer_d", ui_events.BUTTON_CLICKED, self.btn_answer_d, self)
   self:AddCallback("btn_manual", ui_events.BUTTON_CLICKED, self.btn_manual, self)
   self:AddCallback("btn_start_game", ui_events.BUTTON_CLICKED, self.btn_start_game, self)
   self:AddCallback("btn_continue_game", ui_events.BUTTON_CLICKED, self.btn_continue_game, self)
   self:AddCallback("result_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.close_result, self)
   self:AddCallback("result_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.close_result, self)
   self:AddCallback("reward_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.close_reward, self)
   self:AddCallback("reward_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.close_reward, self)
   self:AddCallback("message_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.close_message, self)
   self:AddCallback("message_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.close_message, self)
end

function question_game:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_exit_game()
   else
      --/self.form_title:TextControl():SetText(game.translate_string("st_question_game_title"))
      if question_game_stage ~= "nil" then
         self.question_field:TextControl():SetText(game.translate_string(question_game_question_descr))
         self.answer_a_field:TextControl():SetText("A)" .. game.translate_string(question_game_answer_a))
         self.answer_b_field:TextControl():SetText("B)" .. game.translate_string(question_game_answer_b))
         self.answer_c_field:TextControl():SetText("C)" .. game.translate_string(question_game_answer_c))
         self.answer_d_field:TextControl():SetText("D)" .. game.translate_string(question_game_answer_d))
         self.question_number_field:TextControl():SetText(question_game_question_number)
         self.correct_series_field:TextControl():SetText(question_game_correct_series)
      end
   end
   if question_game_stage == "begin" or question_game_stage == "next_question" then
      self.get_btn_answer_a:Show(true)
      self.get_btn_answer_a:Enable(true)
      self.get_btn_answer_b:Show(true)
      self.get_btn_answer_b:Enable(true)
      self.get_btn_answer_c:Show(true)
      self.get_btn_answer_c:Enable(true)
      self.get_btn_answer_d:Show(true)
      self.get_btn_answer_d:Enable(true)
      self.get_btn_start_game:Show(false)
      self.get_btn_start_game:Enable(false)
      self.get_btn_continue_game:Show(false)
      self.get_btn_continue_game:Enable(false)
   elseif question_game_stage == "answer_accepted" then
      self.get_btn_answer_a:Show(true)
      self.get_btn_answer_a:Enable(false)
      self.get_btn_answer_b:Show(true)
      self.get_btn_answer_b:Enable(false)
      self.get_btn_answer_c:Show(true)
      self.get_btn_answer_c:Enable(false)
      self.get_btn_answer_d:Show(true)
      self.get_btn_answer_d:Enable(false)
      self.get_btn_start_game:Show(false)
      self.get_btn_start_game:Enable(false)
      self.get_btn_continue_game:Show(true)
      self.get_btn_continue_game:Enable(true)
      if question_game_q_h_f == false then
         self:select_random_question()
      end
      if question_game_a_h_f == false then
         self:select_random_advice()
      end
   else
      self.get_btn_answer_a:Enable(false)
      self.get_btn_answer_a:Show(false)
      self.get_btn_answer_b:Show(false)
      self.get_btn_answer_b:Enable(false)
      self.get_btn_answer_c:Show(false)
      self.get_btn_answer_c:Enable(false)
      self.get_btn_answer_d:Show(false)
      self.get_btn_answer_d:Enable(false)
      self.get_btn_start_game:Show(true)
      self.get_btn_start_game:Enable(true)
      self.get_btn_continue_game:Show(false)
      self.get_btn_continue_game:Enable(false)
      if question_game_q_h_f == false then
         self:select_random_question()
      end
      if question_game_a_h_f == false then
         self:select_random_advice()
      end
   end
end

function question_game:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_exit_game()
      end
   end
   return true
end

function question_game:start_button(xml, button_name)
   self["get_" .. button_name] = xml:Init3tButton("question_game_form:" .. button_name, self.question_game_form)
   self:Register(self["get_" .. button_name], button_name)
end

function question_game:btn_exit_game(hide)
   self:HideDialog()
   if question_game_reward_money > 0 then
      dialogs.relocate_money(db.actor, question_game_reward_money, "in")
   end
   question_q_table = {}
   question_a_table = {}
   question_game_stage = "nil"
   question_game_question_number = 1
   question_game_correct_series = 0
   question_game_q_available = 0
   question_game_a_available = 0
   question_game_q_s = "nil"
   question_game_a_s = "nil"
   question_game_q_h_f = false
   question_game_a_h_f = false
   question_game_reward_money = 0
   set_ui_worked()
end

function question_game:close_result()
   self.result_box:ShowDialog(false)
   self.result_box:HideDialog()
   if question_game_correct_series >= 5 then
      if question_game_a_available > 0 then
         self:show_reward(game.translate_string("st_question_game_reward_advice") ..
            " " ..
            self:get_advice(question_game_a_s, "advice") ..
            " " ..
            game.translate_string("st_question_game_reward_money") .. " " ..
            self:get_advice(question_game_a_s, "reward_money"))
         question_game_reward_money = question_game_reward_money + self:get_advice(question_game_a_s, "reward_money")
         create_inventory_item(self:get_advice(question_game_a_s, "items"), "zat_informer_hiding",
            self:get_advice(question_game_a_s, "place_x"), self:get_advice(question_game_a_s, "place_y"),
            self:get_advice(question_game_a_s, "place_z"), self:get_advice(question_game_a_s, "place_lv"),
            self:get_advice(question_game_a_s, "place_gv"))
         give_info(question_game_a_s)
         question_game_a_available = question_game_a_available - 1
         question_game_a_h_f = false
      end
      question_game_correct_series = 0
   end
end

function question_game:close_reward()
   self.reward_box:ShowDialog(false)
   self.reward_box:HideDialog()
end

function question_game:close_message()
   self.message_box:ShowDialog(false)
   self.message_box:HideDialog()
end

function question_game:show_result(text)
   self.result_box:InitMessageBox("message_box_ok")
   self.result_box:SetText(game.translate_string(text))
   self.result_box:ShowDialog(true)
end

function question_game:show_reward(text)
   self.reward_box:InitMessageBox("message_box_ok")
   self.reward_box:SetText(game.translate_string(text))
   self.reward_box:ShowDialog(true)
end

function question_game:show_message(text)
   self.message_box:InitMessageBox("message_box_ok")
   self.message_box:SetText(game.translate_string(text))
   self.message_box:ShowDialog(true)
end

function question_game:setup_result(type)
   give_info(question_game_q_s)
   question_game_q_available = question_game_q_available - 1
   question_game_stage = "answer_accepted"
   if type == "correct" then
      self:show_result(game.translate_string(get_random_string(question_game_correct_answer_descr)))
      question_game_correct_series = question_game_correct_series + 1
   elseif type == "wrong" then
      self:show_result(game.translate_string(get_random_string(question_game_wrong_answer_descr)))
      question_game_correct_series = 0
   end
end

function question_game:issue_reward_money()
   question_game_reward_money = question_game_reward_money + self:get_question(question_game_q_s, "cost")
end

function question_game:btn_answer_a()
   if question_game_correct == "a" then
      self:setup_result("correct")
      self:issue_reward_money()
   else
      self:setup_result("wrong")
   end
end

function question_game:btn_answer_b()
   if question_game_correct == "b" then
      self:setup_result("correct")
      self:issue_reward_money()
   else
      self:setup_result("wrong")
   end
end

function question_game:btn_answer_c()
   if question_game_correct == "c" then
      self:setup_result("correct")
      self:issue_reward_money()
   else
      self:setup_result("wrong")
   end
end

function question_game:btn_answer_d()
   if question_game_correct == "d" then
      self:setup_result("correct")
      self:issue_reward_money()
   else
      self:setup_result("wrong")
   end
end

function question_game:select_random_question()
   local min_q, max_q = 1, question_game_q_count
   local rnd_q = "q_" .. string.sub(level.name(), 1, 1) .. "_cell_" .. math.random(min_q, max_q)
   for k, v in pairs(question_q_table) do
      if k ~= nil and k == rnd_q and sgm_g.dont_has_alife_info(k) then
         question_game_q_s = k
         question_game_q_h_f = true
      end
   end
   if question_game_q_h_f == false then
      if question_game_q_available > 0 and sgm_g.to_string(sgm_functions.check_section_condlist(question_game_ini, rnd_q, "cond", "true")) == "false" then
         self:select_random_question()
      end
   end
end

function question_game:select_random_advice()
   local min_a, max_a = 1, question_game_a_count
   local rnd_a = "a_" .. string.sub(level.name(), 1, 1) .. "_cell_" .. math.random(min_a, max_a)
   for k, v in pairs(question_a_table) do
      if k ~= nil and k == rnd_a and sgm_g.dont_has_alife_info(k) then
         question_game_a_s = k
         question_game_a_h_f = true
      end
   end
   if question_game_a_h_f == false then
      if question_game_a_available > 0 and sgm_g.to_string(sgm_functions.check_section_condlist(question_game_ini, rnd_a, "cond", "true")) == "false" then
         self:select_random_advice()
      end
   end
end

function question_game:btn_start_game()
   if question_game_q_available > 0 then
      question_game_stage = "begin"
      question_game_question_descr = self:get_question(question_game_q_s, "question")
      question_game_answer_a = self:get_question(question_game_q_s, "var_a")
      question_game_answer_b = self:get_question(question_game_q_s, "var_b")
      question_game_answer_c = self:get_question(question_game_q_s, "var_c")
      question_game_answer_d = self:get_question(question_game_q_s, "var_d")
      question_game_correct = self:get_question(question_game_q_s, "correct")
      question_game_q_h_f = false
   else
      self:show_message("st_question_game_less_available_text")
   end
end

function question_game:btn_continue_game()
   if question_game_q_available > 0 then
      question_game_question_number = question_game_question_number + 1
      question_game_stage = "next_question"
      question_game_question_descr = self:get_question(question_game_q_s, "question")
      question_game_answer_a = self:get_question(question_game_q_s, "var_a")
      question_game_answer_b = self:get_question(question_game_q_s, "var_b")
      question_game_answer_c = self:get_question(question_game_q_s, "var_c")
      question_game_answer_d = self:get_question(question_game_q_s, "var_d")
      question_game_correct = self:get_question(question_game_q_s, "correct")
      question_game_q_h_f = false
   else
      self:show_message("st_question_game_less_available_text")
   end
end

function question_game:parse_questions()
   local par_cond = "true"
   local par_question = ""
   local par_var_a = ""
   local par_var_b = ""
   local par_var_c = ""
   local par_var_d = ""
   local par_correct = ""
   local par_cost = -1
   local n = question_game_ini:line_count("questions_" .. level.name())
   question_game_q_count = n
   for i = 0, n - 1 do
      local result, id, value = question_game_ini:r_line("questions_" .. level.name(), i, "", "")
      if question_game_ini:section_exist(id) then
         local items_count = question_game_ini:line_count(id)
         local item_section = ""
         for i = 0, items_count - 1 do
            result, item_section, str = question_game_ini:r_line(id, i, "", "")
            if item_section == "cond" then
               par_cond = sgm_g.to_string(sgm_functions.check_section_condlist(question_game_ini, id, "cond",
                  "false"))
            elseif item_section == "question" then
               par_question = game.translate_string(str)
            elseif item_section == "var_a" then
               par_var_a = game.translate_string(str)
            elseif item_section == "var_b" then
               par_var_b = game.translate_string(str)
            elseif item_section == "var_c" then
               par_var_c = game.translate_string(str)
            elseif item_section == "var_d" then
               par_var_d = game.translate_string(str)
            elseif item_section == "correct" then
               par_correct = str
            elseif item_section == "cost" then
               par_cost = sgm_g.to_number(sgm_functions.check_section_condlist(question_game_ini, id, "cost", 10))
            end
         end
         if par_cond == "true" and ((question_q_table[id] == nil or question_q_table[id].question == nil) or (question_q_table[id] ~= nil and question_q_table[id].question == nil)) then
            question_q_table[id] = {}
            if par_question == "" then
               question_q_table[id].question = game.translate_string("st_" .. id .. "_descr")
            else
               question_q_table[id].question = par_question
            end
            if par_var_a == "" then
               question_q_table[id].var_a = game.translate_string("st_" .. id .. "_a")
            else
               question_q_table[id].var_a = par_var_a
            end
            if par_var_b == "" then
               question_q_table[id].var_b = game.translate_string("st_" .. id .. "_b")
            else
               question_q_table[id].var_b = par_var_b
            end
            if par_var_c == "" then
               question_q_table[id].var_c = game.translate_string("st_" .. id .. "_c")
            else
               question_q_table[id].var_c = par_var_c
            end
            if par_var_d == "" then
               question_q_table[id].var_d = game.translate_string("st_" .. id .. "_d")
            else
               question_q_table[id].var_d = par_var_d
            end
            if par_correct == "" then
               question_q_table[id].correct = "a"
            else
               question_q_table[id].correct = par_correct
            end
            if par_cost == -1 then
               question_q_table[id].cost = 10
            else
               question_q_table[id].cost = par_cost
            end
         end
      end
   end
   self:consider_available_questions()
end

function question_game:consider_available_questions()
   for k, v in pairs(question_q_table) do
      if k ~= nil and sgm_g.dont_has_alife_info(k) then
         question_game_q_available = question_game_q_available + 1
      end
   end
end

function question_game:parse_advices()
   local par_cond = "true"
   local par_advice = ""
   local par_items = nil
   local par_reward_money = -1
   local n = question_game_ini:line_count("advices_" .. level.name())
   question_game_a_count = n
   for i = 0, n - 1 do
      local result, id, value = question_game_ini:r_line("advices_" .. level.name(), i, "", "")
      if question_game_ini:section_exist(id) then
         local items_count = question_game_ini:line_count(id)
         local item_section = ""
         for i = 0, items_count - 1 do
            result, item_section, str = question_game_ini:r_line(id, i, "", "")
            if item_section == "cond" then
               par_cond = sgm_g.to_string(sgm_functions.check_section_condlist(question_game_ini, id, "cond",
                  "false"))
            elseif item_section == "advice" then
               par_advice = game.translate_string(str)
            elseif item_section == "reward_money" then
               par_reward_money = sgm_g.to_number(sgm_functions.check_section_condlist(question_game_ini, id,
                  "reward_money",
                  500))
            elseif item_section == "items" then
               par_items = str
            end
         end
         if par_cond == "true" and ((question_a_table[id] == nil or question_a_table[id].advice == nil) or (question_a_table[id] ~= nil and question_a_table[id].advice == nil)) then
            question_a_table[id] = {}
            if par_advice == "" then
               question_a_table[id].advice = game.translate_string("st_" .. id .. "_descr")
            else
               question_a_table[id].advice = par_advice
            end
            if par_reward_money == -1 then
               question_a_table[id].reward_money = 500
            else
               question_a_table[id].reward_money = par_reward_money
            end
            local place_param = sgm_functions.check_section_comma(question_game_ini, id, "place", nil, 5)
            question_a_table[id].place_x = tonumber(place_param[1])
            question_a_table[id].place_y = tonumber(place_param[2])
            question_a_table[id].place_z = tonumber(place_param[3])
            question_a_table[id].place_lv = tonumber(place_param[4])
            question_a_table[id].place_gv = tonumber(place_param[5])
            question_a_table[id].items = par_items
         end
      end
   end
   self:consider_available_advices()
end

function question_game:consider_available_advices()
   for k, v in pairs(question_a_table) do
      if k ~= nil and sgm_g.dont_has_alife_info(k) then
         question_game_a_available = question_game_a_available + 1
      end
   end
end

function question_game:get_question(section_id, param)
   if question_q_table[section_id] ~= nil and question_q_table[section_id][param] ~= nil then
      return question_q_table[section_id][param]
   end
   return "nil"
end

function question_game:get_advice(section_id, param)
   if question_a_table[section_id] ~= nil and question_a_table[section_id][param] ~= nil then
      return question_a_table[section_id][param]
   end
   return "nil"
end

function question_game:btn_manual()
   self:show_message("st_question_game_manual_text")
end

------------------------------------------------------------------------------
--                            Воспроизводитель эффектов                     --
------------------------------------------------------------------------------
local effect_player_section = 1
local ppe_table = {
   "acidic.ppe",
   "acidic_mine.ppe",
   "alcohol.ppe",
   "black.ppe",
   "blink.ppe",
   "brighten.ppe",
   "contrast.ppe",
   "controller_hit.ppe",
   "deimos1.ppe",
   "deimos.ppe",
   "electra.ppe",
   "electra_mine.ppe",
   "fade_in.ppe",
   "fade_in_out.ppe",
   "fade_to_black_9_sec.ppe",
   "fire_hit.ppe",
   "flame.ppe",
   "fuzz.ppe",
   "gravi.ppe",
   "gravi_mine.ppe",
   "mosquito_bald.ppe",
   "nightvision_1.ppe",
   "nightvision_2.ppe",
   "nightvision_3.ppe",
   "pas_b400_acidic.ppe",
   "poltergeist_scan.ppe",
   "psi.ppe",
   "psy_antenna.ppe",
   "psychic.ppe",
   "radiation.ppe",
   "sleep_fade.ppe",
   "snd_shock.ppe",
   "steam_mine.ppe",
   "surge_fade.ppe",
   "surge_shock.ppe",
   "surge_shock_old.ppe",
   "teleport.ppe",
   "thermal.ppe",
   "thermal_mine.ppe"
}
local cam_table = {
   "camera_effects\\dream.anm",
   "camera_effects\\drunk.anm",
   "camera_effects\\earthquake.anm",
   "camera_effects\\earthquake_00.anm",
   "camera_effects\\earthquake_1.anm",
   "camera_effects\\earthquake_2.anm",
   "camera_effects\\empty.anm",
   "camera_effects\\fatigue.anm",
   "camera_effects\\fireball.anm",
   "camera_effects\\fusker.anm",
   "camera_effects\\head_shot.anm",
   "camera_effects\\hit_back.anm",
   "camera_effects\\hit_back_left.anm",
   "camera_effects\\hit_back_right.anm",
   "camera_effects\\hit_front.anm",
   "camera_effects\\hit_front_left.anm",
   "camera_effects\\hit_front_right.anm",
   "camera_effects\\hit_left.anm",
   "camera_effects\\hit_right.anm",
   "camera_effects\\pripyat_horror1.anm",
   "camera_effects\\pripyat_horror.anm",
   "camera_effects\\shell_shock.anm",
   "camera_effects\\sleep.anm",
   "camera_effects\\surge_01.anm",
   "camera_effects\\surge_02.anm",
   "camera_effects\\actor_move\\down.anm",
   "camera_effects\\actor_move\\go_back.anm",
   "camera_effects\\actor_move\\go_front.anm",
   "camera_effects\\actor_move\\jump.anm",
   "camera_effects\\actor_move\\strafe_left.anm",
   "camera_effects\\actor_move\\strafe_right.anm"
}
class "effect_object" (CUIListBoxItem)
function effect_object:__init(height)
   super(height)
   self.text = self:GetTextItem()
   self:SetTextColor(GetARGB(255, 210, 210, 210))
   self.text:SetFont(GetFontLetterica18Russian())
   self.text:SetWndSize(vector2():set(278, height))
   self.text:SetEllipsis(true)
end

class "effect_player" (CUIScriptWnd)
function effect_player:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
   self:FillList(ppe_table)
end

function effect_player:__finalize()
end

function effect_player:FillList(tbl)
   self.effectors_list:Clear()
   for i = 1, #tbl do
      self:AddItemToList(tbl[i])
   end
end

function effect_player:AddItemToList(item_name)
   local _itm = effect_object(22)
   _itm.text:SetText(item_name)
   self.effectors_list:AddExistingItem(_itm)
end

function effect_player:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.effect_player_form = xml:InitStatic("effect_player_form", self)
   self:Register(xml:Init3tButton("effect_player_form:btn_ppe_effectors", self.effect_player_form), "btn_ppe_effectors")
   self:Register(xml:Init3tButton("effect_player_form:btn_cam_effectors", self.effect_player_form), "btn_cam_effectors")
   self:Register(xml:Init3tButton("effect_player_form:btn_play", self.effect_player_form), "btn_play")
   self:Register(xml:Init3tButton("effect_player_form:btn_close", self.effect_player_form), "btn_close")
   self:Register(xml:Init3tButton("effect_player_form:btn_stop", self.effect_player_form), "btn_stop")
   self.effectors_list = xml:InitListBox("effect_player_form:effectors_list", self)
   self.effectors_list:ShowSelectedItem(true)
   self:Register(self.effectors_list, "effectors_list_window")
end

function effect_player:InitCallBacks()
   self:AddCallback("btn_ppe_effectors", ui_events.BUTTON_CLICKED, self.btn_ppe_effectors, self)
   self:AddCallback("btn_cam_effectors", ui_events.BUTTON_CLICKED, self.btn_cam_effectors, self)
   self:AddCallback("btn_play", ui_events.BUTTON_CLICKED, self.btn_play, self)
   self:AddCallback("btn_stop", ui_events.BUTTON_CLICKED, self.btn_stop, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
   self:AddCallback("effectors_list_window", ui_events.WINDOW_LBUTTON_DB_CLICK, self.btn_play, self)
end

function effect_player:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
end

function effect_player:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function effect_player:btn_ppe_effectors()
   self:FillList(ppe_table)
   effect_player_section = 1
end

function effect_player:btn_cam_effectors()
   self:FillList(cam_table)
   effect_player_section = 2
end

function effect_player:btn_play()
   if self.effectors_list:GetSize() == 0 then
      return
   end
   local item = self.effectors_list:GetSelectedItem()
   if not item then return end
   local itmname = item.text:GetText()
   if effect_player_section == 1 then
      level.add_pp_effector(itmname, 9991, false)
   elseif effect_player_section == 2 then
      level.add_cam_effector(itmname, 9992, false, "")
   end
end

function effect_player:btn_stop()
   level.remove_pp_effector(9991)
   level.remove_cam_effector(9992)
end

function effect_player:btn_close()
   self:HideDialog()
end

------------------------------------------------------------------------------
--                         Редактор точек путей                             --
------------------------------------------------------------------------------
waypoint_name = ""
waypoint_name_saved = ""
waypoint_def_name = "auto"
waypoint_points_counter = -1
waypoint_autochange_add = "look"
waypoint_assembly, waypoint_data = "", ""
waypoint_line_main, waypoint_line_attacher = "", ""
waypoint_line_1, waypoint_line_2, waypoint_line_3 = "", "", ""
waypoint_line_4, waypoint_line_5, waypoint_line_6 = "", "", ""
class "waypoint_editor" (CUIScriptWnd)
function waypoint_editor:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
end

function waypoint_editor:__finalize()
end

function waypoint_editor:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.waypoint_editor_form = xml:InitStatic("waypoint_editor_form", self)
   self:Register(xml:Init3tButton("waypoint_editor_form:btn_print_waypoint", self.waypoint_editor_form),
      "btn_print_waypoint")
   self:Register(xml:Init3tButton("waypoint_editor_form:btn_mark_point", self.waypoint_editor_form), "btn_mark_point")
   self:Register(xml:Init3tButton("waypoint_editor_form:btn_close", self.waypoint_editor_form), "btn_close")
   self.check_way_closed = xml:InitCheck("waypoint_editor_form:check_way_closed", self.waypoint_editor_form)
   self.check_way_closed:SetCheck(sgm_functions.info_get_boolean("waypoint_editor_check_way_closed", true))
   self.check_empty_flags = xml:InitCheck("waypoint_editor_form:check_empty_flags", self.waypoint_editor_form)
   self.check_empty_flags:SetCheck(sgm_functions.info_get_boolean("waypoint_editor_check_empty_flags"))
   self.check_autochange = xml:InitCheck("waypoint_editor_form:check_autochange", self.waypoint_editor_form)
   self.check_autochange:SetCheck(sgm_functions.info_get_boolean("waypoint_editor_check_autochange"))
   self.waypoint_info = xml:InitStatic("waypoint_editor_form:waypoint_info", self.waypoint_editor_form)
   self.waypoint_name_field = xml:InitEditBox("waypoint_editor_form:waypoint_name_field", self.waypoint_editor_form)
   self.point_animation_field = xml:InitEditBox("waypoint_editor_form:point_animation_field", self.waypoint_editor_form)
   self.point_signal_field = xml:InitEditBox("waypoint_editor_form:point_signal_field", self.waypoint_editor_form)
   self:Register(self.waypoint_name_field, "waypoint_name_field")
   self:Register(xml:Init3tButton("waypoint_editor_form:btn_show_waypoint", self.waypoint_editor_form),
      "btn_show_waypoint")
   if self.waypoint_name_field:GetText() == nil or self.waypoint_name_field:GetText() == "" then
      if waypoint_name_saved == "" then
         self.waypoint_name_field:SetText(waypoint_name)
      else
         if self.check_autochange:GetCheck() then
            self.waypoint_name_field:SetText(waypoint_name_saved)
         else
            self.waypoint_name_field:SetText(waypoint_name)
         end
      end
      if waypoint_def_name ~= "" then
         if waypoint_def_name == "auto" then
            self.waypoint_name_field:SetText(string.sub(level.name(), 1, 3) .. "_")
         else
            self.waypoint_name_field:SetText(waypoint_def_name)
         end
         waypoint_def_name = ""
      end
   end
end

function waypoint_editor:InitCallBacks()
   self:AddCallback("btn_show_waypoint", ui_events.BUTTON_CLICKED, self.btn_show_waypoint, self)
   self:AddCallback("btn_print_waypoint", ui_events.BUTTON_CLICKED, self.btn_print_waypoint, self)
   self:AddCallback("btn_mark_point", ui_events.BUTTON_CLICKED, self.btn_mark_point, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
end

function waypoint_editor:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   else
      self.waypoint_info:TextControl():SetText(waypoint_line_main)
   end
   sgm_functions.info_give_on_boolean(self.check_way_closed:GetCheck(), "waypoint_editor_check_way_closed", true)
   sgm_functions.info_give_on_boolean(self.check_empty_flags:GetCheck(), "waypoint_editor_check_empty_flags")
   sgm_functions.info_give_on_boolean(self.check_autochange:GetCheck(), "waypoint_editor_check_autochange")
end

function waypoint_editor:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      elseif dik == DIK_keys.DIK_SPACE then
         self:btn_mark_point(true)
      elseif dik == DIK_keys.DIK_RETURN then
         self:btn_print_waypoint()
      elseif dik == DIK_keys.DIK_SUBTRACT then
         self.waypoint_name_field:SetText(tostring(self.waypoint_name_field:GetText()) .. "_spawn_point")
      elseif dik == DIK_keys.DIK_ADD then
         self.waypoint_name_field:SetText(tostring(self.waypoint_name_field:GetText()) .. "_traveller_actor")
      end
   end
   return true
end

function waypoint_editor:btn_mark_point(close_activate)
   if close_activate == nil or close_activate == true then
      self:btn_close()
   end
   if waypoint_line_main == "" then
      waypoint_line_main = "points = p0"
      waypoint_points_counter = waypoint_points_counter + 1
   else
      waypoint_points_counter = waypoint_points_counter + 1
      if waypoint_points_counter >= 1 then
         waypoint_data = waypoint_data .. waypoint_line_attacher
      end
      waypoint_line_main = waypoint_line_main .. ",p" .. waypoint_points_counter
   end
   if waypoint_points_counter ~= -1 then
      local next_point = waypoint_points_counter + 1
      if (self.point_animation_field:GetText() == nil or self.point_animation_field:GetText() == "") and (self.point_signal_field:GetText() == nil or self.point_signal_field:GetText() == "") then
         waypoint_line_1 = "p" ..
             waypoint_points_counter .. ":name = wp0" .. waypoint_points_counter .. game.translate_string("\n")
         if find_in_string(tostring(waypoint_name), "_walker_") then
            waypoint_line_1 = "p" ..
                waypoint_points_counter .. ":name = wp0" .. waypoint_points_counter ..
                "|a=patrol" .. game.translate_string("\n")
         elseif find_in_string(tostring(waypoint_name), "_sniper_") and find_in_string(tostring(waypoint_name), "_look") then
            waypoint_line_1 = "p" ..
                waypoint_points_counter .. ":name = wp0" ..
                waypoint_points_counter .. "|a=guard_na" .. game.translate_string("\n")
         elseif find_in_string(tostring(waypoint_name), "_surge_") and find_in_string(tostring(waypoint_name), "_look") then
            waypoint_line_1 = "p" ..
                waypoint_points_counter .. ":name = wp0" .. waypoint_points_counter .. "|a=sit" ..
                game.translate_string("\n")
         elseif find_in_string(tostring(waypoint_name), "_guard_") and find_in_string(tostring(waypoint_name), "_look") then
            waypoint_line_1 = "p" ..
                waypoint_points_counter .. ":name = wp0" .. waypoint_points_counter ..
                "|a=guard" .. game.translate_string("\n")
         end
      elseif (self.point_animation_field:GetText() ~= nil and self.point_animation_field:GetText() ~= "") and (self.point_signal_field:GetText() == nil or self.point_signal_field:GetText() == "") then
         waypoint_line_1 = "p" ..
             waypoint_points_counter ..
             ":name = wp0" ..
             waypoint_points_counter .. "|a=" .. tostring(self.point_animation_field:GetText()) ..
             game.translate_string("\n")
      elseif (self.point_signal_field:GetText() ~= nil and self.point_signal_field:GetText() ~= "") and (self.point_animation_field:GetText() == nil or self.point_animation_field:GetText() == "") then
         waypoint_line_1 = "p" ..
             waypoint_points_counter ..
             ":name = wp0" ..
             waypoint_points_counter ..
             "|sig=" .. tostring(self.point_signal_field:GetText()) .. game.translate_string("\n")
      elseif (self.point_animation_field:GetText() ~= nil and self.point_animation_field:GetText() ~= "") and (self.point_signal_field:GetText() ~= nil and self.point_signal_field:GetText() ~= "") then
         waypoint_line_1 = "p" ..
             waypoint_points_counter ..
             ":name = wp0" ..
             waypoint_points_counter ..
             "|a=" ..
             tostring(self.point_animation_field:GetText()) ..
             "|sig=" .. tostring(self.point_signal_field:GetText()) .. game.translate_string("\n")
      end
      if self.check_empty_flags:GetCheck() or find_in_string(tostring(waypoint_name), "_spawn_point") or find_in_string(tostring(waypoint_name), "_home") or find_in_string(tostring(waypoint_name), "_traveller_") or find_in_string(tostring(waypoint_name), "_af_way_") then
         waypoint_line_2 = ""
      else
         waypoint_line_2 = "p" .. waypoint_points_counter .. ":flags = 0x1" .. game.translate_string("\n")
         if find_in_string(tostring(waypoint_name), "_sleep_") and waypoint_points_counter == 1 then
            waypoint_line_2 = ""
         end
      end
      waypoint_line_3 = "p" ..
          waypoint_points_counter ..
          ":position = " ..
          db.actor:position().x .. "," .. db.actor:position().y .. "," .. db.actor:position().z ..
          game.translate_string("\n")
      waypoint_line_4 = "p" ..
          waypoint_points_counter .. ":game_vertex_id = " .. db.actor:game_vertex_id() .. game.translate_string("\n")
      waypoint_line_5 = "p" ..
          waypoint_points_counter .. ":level_vertex_id = " .. db.actor:level_vertex_id() .. game.translate_string("\n")
      if waypoint_points_counter >= 1 and self.check_way_closed:GetCheck() then
         waypoint_line_6 = "p" .. waypoint_points_counter .. ":links = p0(1)" .. game.translate_string("\n")
      else
         waypoint_line_6 = ""
      end
      if find_in_string(tostring(waypoint_name), "_traveller_") then
         waypoint_line_6 = ""
      end
      waypoint_line_attacher = "p" ..
          waypoint_points_counter .. ":links = " .. "p" .. next_point .. "(1)" .. game.translate_string("\n")
      waypoint_data = waypoint_data ..
          game.translate_string("\n") .. waypoint_line_1 ..
          waypoint_line_2 .. waypoint_line_3 .. waypoint_line_4 .. waypoint_line_5
   end
   waypoint_line_1, waypoint_line_2, waypoint_line_3, waypoint_line_4, waypoint_line_5 = "", "", "", "", ""
end

function waypoint_editor:btn_print_waypoint()
   if waypoint_line_main == "" and not self.check_autochange:GetCheck() then
      self:btn_mark_point(true)
   else
      self:btn_close()
   end
   if self.check_autochange:GetCheck() then
      if waypoint_autochange_add == "walk" then
         waypoint_autochange_add = "look"
      elseif waypoint_autochange_add == "look" then
         waypoint_autochange_add = "walk"
      end
      if waypoint_name_saved == "" then
         waypoint_name = tostring(waypoint_name) .. "_" .. waypoint_autochange_add
      else
         if tostring(self.waypoint_name_field:GetText()) ~= waypoint_name_saved then
            waypoint_name_saved = tostring(self.waypoint_name_field:GetText())
         end
         waypoint_name = waypoint_name_saved .. "_" .. waypoint_autochange_add
      end
      waypoint_name_saved = tostring(self.waypoint_name_field:GetText())
      self:btn_mark_point(false)
   end
   waypoint_assembly = game.translate_string("\n") ..
       "[" .. tostring(waypoint_name) .. "]" ..
       game.translate_string("\n") .. waypoint_line_main .. waypoint_data .. waypoint_line_6
   debug_to_file("waypoints.txt", waypoint_assembly)
   give_quick_news("Путь " .. waypoint_name .. " успешно создан.")
   waypoint_line_main = ""
   waypoint_points_counter = -1
   waypoint_assembly, waypoint_data = "", ""
end

function waypoint_editor:btn_show_waypoint()
   run_choose_box("yes", "waypoint_editor",
      game.translate_string("\n") ..
      "[" .. tostring(waypoint_name) .. "]" .. game.translate_string("\n") .. waypoint_line_main .. waypoint_data)
end

function waypoint_editor:btn_close()
   waypoint_name = self.waypoint_name_field:GetText()
   self:HideDialog()
   set_ui_worked()
end

------------------------------------------------------------------------------
--                          Обработка файла "all.spawn"                     --
------------------------------------------------------------------------------
local allspawn_cfg_radius = 1
local allspawn_cfg_counting = 1 --/ Начальный отсчет секции
local allspawn_cfg_magazine = 30
local allspawn_cfg_prefix = "nil"
local allspawn_cfg_suffix = "nil"
local allspawn_cfg_logic_path = "nil"
local allspawn_cfg_hiding_place = "nil"
local allspawn_editor_section = 1
local allspawn_last_name = "nil"
local allspawn_last_type = "nil"
local allspawn_last_id = "nil"
local allspawn_auto_print_mode = false
local allspawn_auto_print_delay = 4000 --/ Частота авто-отладки
local allspawn_def_name_1 = "auto"
local allspawn_def_name_2 = "smart_terrain"
local allspawn_def_logic_path = ""
local allspawn_button_active = false
local allspawn_button_action = false
local allspawn_sections_panel_1 = {
   { name = "space_restrictor", type = "space_restrictor", id = 1 },
   { name = "smart_terrain",    type = "smart_terrain",    id = 2 },
   { name = "anomal_zone",      type = "anomal_zone",      id = 3 },
   { name = "inventory_box",    type = "inventory_box",    id = 4 }
}
local allspawn_sections_panel_2 = {
   { name = "sgm_acidic_field_weak",           type = "anomaly", id = 1 },
   { name = "sgm_acidic_field_average",        type = "anomaly", id = 2 },
   { name = "sgm_acidic_field_strong",         type = "anomaly", id = 3 },
   { name = "sgm_psychic_field_weak",          type = "anomaly", id = 4 },
   { name = "sgm_psychic_field_average",       type = "anomaly", id = 5 },
   { name = "sgm_psychic_field_strong",        type = "anomaly", id = 6 },
   { name = "sgm_radioactive_field_weak",      type = "anomaly", id = 7 },
   { name = "sgm_radioactive_field_average",   type = "anomaly", id = 8 },
   { name = "sgm_radioactive_field_strong",    type = "anomaly", id = 9 },
   { name = "sgm_thermal_field_weak",          type = "anomaly", id = 10 },
   { name = "sgm_thermal_field_average",       type = "anomaly", id = 11 },
   { name = "sgm_thermal_field_strong",        type = "anomaly", id = 12 },
   { name = "sgm_thermal_streem_weak",         type = "anomaly", id = 13 },
   { name = "sgm_thermal_streem_average",      type = "anomaly", id = 14 },
   { name = "sgm_thermal_streem_strong",       type = "anomaly", id = 15 },
   { name = "sgm_blue_thermal_streem_weak",    type = "anomaly", id = 16 },
   { name = "sgm_blue_thermal_streem_average", type = "anomaly", id = 17 },
   { name = "sgm_blue_thermal_streem_strong",  type = "anomaly", id = 18 },
   { name = "sgm_red_thermal_streem_weak",     type = "anomaly", id = 19 },
   { name = "sgm_red_thermal_streem_average",  type = "anomaly", id = 20 },
   { name = "sgm_red_thermal_streem_strong",   type = "anomaly", id = 21 },
   { name = "sgm_gravitational_field_weak",    type = "anomaly", id = 22 },
   { name = "sgm_gravitational_field_average", type = "anomaly", id = 23 },
   { name = "sgm_gravitational_field_strong",  type = "anomaly", id = 24 },
   { name = "sgm_electric_field_weak",         type = "anomaly", id = 25 },
   { name = "sgm_electric_field_average",      type = "anomaly", id = 26 },
   { name = "sgm_electric_field_strong",       type = "anomaly", id = 27 },
   { name = "sgm_throw_field",                 type = "anomaly", id = 28 },
   { name = "zone_mine_field",                 type = "anomaly", id = 29 },
}
local allspawn_sections_panel_3 = {
   { name = "af_cristall",          type = "other", id = 1 },
   { name = "af_fireball",          type = "other", id = 2 },
   { name = "af_dummy_glassbeads",  type = "other", id = 3 },
   { name = "af_eye",               type = "other", id = 4 },
   { name = "af_fire",              type = "other", id = 5 },
   { name = "af_medusa",            type = "other", id = 6 },
   { name = "af_cristall_flower",   type = "other", id = 7 },
   { name = "af_night_star",        type = "other", id = 8 },
   { name = "af_vyvert",            type = "other", id = 9 },
   { name = "af_gravi",             type = "other", id = 10 },
   { name = "af_gold_fish",         type = "other", id = 11 },
   { name = "af_blood",             type = "other", id = 12 },
   { name = "af_mincer_meat",       type = "other", id = 13 },
   { name = "af_soul",              type = "other", id = 14 },
   { name = "af_fuzz_kolobok",      type = "other", id = 15 },
   { name = "af_baloon",            type = "other", id = 16 },
   { name = "af_glass",             type = "other", id = 17 },
   { name = "af_electra_sparkler",  type = "other", id = 18 },
   { name = "af_electra_flash",     type = "other", id = 19 },
   { name = "af_electra_moonlight", type = "other", id = 20 },
   { name = "af_dummy_battery",     type = "other", id = 21 },
   { name = "af_dummy_dummy",       type = "other", id = 22 },
   { name = "af_ice",               type = "other", id = 23 },
   { name = "af_monolit",           type = "other", id = 24 },
   { name = "af_geliy",             type = "other", id = 25 },
   { name = "af_vaselisk",          type = "other", id = 26 },
   { name = "af_dragon_eye",        type = "other", id = 27 },
   { name = "cev_plastin_1",        type = "other", id = 28 },
   { name = "cev_plastin_2",        type = "other", id = 29 },
   { name = "cev_plastin_3",        type = "other", id = 30 },
   { name = "cev_plastin_4",        type = "other", id = 31 },
   { name = "cev_plastin_5",        type = "other", id = 32 }
}
local allspawn_sections_panel_4 = {
   { name = "helm_spectacles",           type = "outfit", id = 1 },
   { name = "helm_mercenary",            type = "outfit", id = 2 },
   { name = "helm_piranhas",             type = "outfit", id = 3 },
   { name = "helm_respirator",           type = "outfit", id = 4 },
   { name = "helm_hardhat",              type = "outfit", id = 5 },
   { name = "helm_protective",           type = "outfit", id = 6 },
   { name = "helm_tactic",               type = "outfit", id = 7 },
   { name = "helm_battle",               type = "outfit", id = 8 },
   { name = "novice_outfit",             type = "outfit", id = 9 },
   { name = "stalker_outfit",            type = "outfit", id = 10 },
   { name = "scientific_outfit",         type = "outfit", id = 11 },
   { name = "svoboda_light_outfit",      type = "outfit", id = 12 },
   { name = "svoboda_heavy_outfit",      type = "outfit", id = 13 },
   { name = "cs_heavy_outfit",           type = "outfit", id = 14 },
   { name = "dolg_outfit",               type = "outfit", id = 15 },
   { name = "dolg_heavy_outfit",         type = "outfit", id = 16 },
   { name = "exo_outfit",                type = "outfit", id = 17 },
   { name = "specops_outfit",            type = "outfit", id = 18 },
   { name = "military_outfit",           type = "outfit", id = 19 },
   { name = "ecolog_regular_outfit",     type = "outfit", id = 20 },
   { name = "ecolog_military_outfit",    type = "outfit", id = 21 },
   { name = "killer_outfit",             type = "outfit", id = 22 },
   { name = "monolith_outfit",           type = "outfit", id = 23 },
   { name = "cs_specnaz_outfit",         type = "outfit", id = 24 },
   { name = "csky_exo_outfit",           type = "outfit", id = 25 },
   { name = "freedom_exo_outfit",        type = "outfit", id = 26 },
   { name = "dolg_exo_outfit",           type = "outfit", id = 27 },
   { name = "monolit_exo_outfit",        type = "outfit", id = 28 },
   { name = "heavy_stalker_outfit",      type = "outfit", id = 29 },
   { name = "bandit_raid_outfit",        type = "outfit", id = 30 },
   { name = "svoboda_army_outfit",       type = "outfit", id = 31 },
   { name = "bandit_prikid_outfit",      type = "outfit", id = 32 },
   { name = "novice_stalker_outfit",     type = "outfit", id = 33 },
   { name = "novice_bandit_outfit",      type = "outfit", id = 34 },
   { name = "bandit_exo_outfit",         type = "outfit", id = 35 },
   { name = "army_exo_outfit",           type = "outfit", id = 36 },
   { name = "killer_exo_outfit",         type = "outfit", id = 37 },
   { name = "stalker_reinforced_outfit", type = "outfit", id = 38 },
   { name = "army_nauchniy_outfit",      type = "outfit", id = 39 }
}
local allspawn_sections_panel_5 = {
   { name = "wpn_pm",                 type = "weapon", id = 1 },
   { name = "wpn_pb",                 type = "weapon", id = 2 },
   { name = "wpn_fort",               type = "weapon", id = 3 },
   { name = "wpn_hpsa",               type = "weapon", id = 4 },
   { name = "wpn_beretta",            type = "weapon", id = 5 },
   { name = "wpn_walther",            type = "weapon", id = 6 },
   { name = "wpn_sig220",             type = "weapon", id = 7 },
   { name = "wpn_colt1911",           type = "weapon", id = 8 },
   { name = "wpn_usp",                type = "weapon", id = 9 },
   { name = "wpn_desert_eagle",       type = "weapon", id = 10 },
   { name = "wpn_bm16",               type = "weapon", id = 11 },
   { name = "wpn_toz34",              type = "weapon", id = 12 },
   { name = "wpn_wincheaster1300",    type = "weapon", id = 13 },
   { name = "wpn_spas12",             type = "weapon", id = 14 },
   { name = "wpn_protecta",           type = "weapon", id = 15 },
   { name = "wpn_ak74u",              type = "weapon", id = 16 },
   { name = "wpn_mp5",                type = "weapon", id = 17 },
   { name = "wpn_ak74",               type = "weapon", id = 18 },
   { name = "wpn_abakan",             type = "weapon", id = 19 },
   { name = "wpn_l85",                type = "weapon", id = 20 },
   { name = "wpn_gauss",              type = "weapon", id = 21 },
   { name = "wpn_lr300",              type = "weapon", id = 22 },
   { name = "wpn_sig550",             type = "weapon", id = 23 },
   { name = "wpn_groza",              type = "weapon", id = 24 },
   { name = "wpn_val",                type = "weapon", id = 25 },
   { name = "wpn_vintorez",           type = "weapon", id = 26 },
   { name = "wpn_svu",                type = "weapon", id = 27 },
   { name = "wpn_svd",                type = "weapon", id = 28 },
   { name = "wpn_rg-6",               type = "weapon", id = 29 },
   { name = "wpn_rpg7",               type = "weapon", id = 30 },
   { name = "wpn_g36",                type = "weapon", id = 31 },
   { name = "wpn_fn2000",             type = "weapon", id = 32 },
   { name = "wpn_pkm",                type = "weapon", id = 33 },
   { name = "wpn_abakan_m1",          type = "weapon", id = 34 },
   { name = "wpn_abakan_m2",          type = "weapon", id = 35 },
   { name = "wpn_abakan_m3",          type = "weapon", id = 36 },
   { name = "wpn_ak74u_m1",           type = "weapon", id = 37 },
   { name = "wpn_ak74u_m2",           type = "weapon", id = 38 },
   { name = "wpn_ak74u_m3",           type = "weapon", id = 39 },
   { name = "wpn_ak74_m1",            type = "weapon", id = 40 },
   { name = "wpn_ak74_m2",            type = "weapon", id = 41 },
   { name = "wpn_ak74_m3",            type = "weapon", id = 42 },
   { name = "wpn_beretta_m1",         type = "weapon", id = 43 },
   { name = "wpn_beretta_m2",         type = "weapon", id = 44 },
   { name = "wpn_beretta_m3",         type = "weapon", id = 45 },
   { name = "wpn_bm16_m1",            type = "weapon", id = 46 },
   { name = "wpn_bm16_m2",            type = "weapon", id = 47 },
   { name = "wpn_bm16_m3",            type = "weapon", id = 48 },
   { name = "wpn_fort_m1",            type = "weapon", id = 49 },
   { name = "wpn_fort_m2",            type = "weapon", id = 50 },
   { name = "wpn_fort_m3",            type = "weapon", id = 51 },
   { name = "wpn_groza_m1",           type = "weapon", id = 52 },
   { name = "wpn_groza_m2",           type = "weapon", id = 53 },
   { name = "wpn_groza_m3",           type = "weapon", id = 54 },
   { name = "wpn_lr300_m1",           type = "weapon", id = 55 },
   { name = "wpn_lr300_m2",           type = "weapon", id = 56 },
   { name = "wpn_lr300_m3",           type = "weapon", id = 57 },
   { name = "wpn_mp5_m1",             type = "weapon", id = 58 },
   { name = "wpn_mp5_m2",             type = "weapon", id = 59 },
   { name = "wpn_mp5_m3",             type = "weapon", id = 60 },
   { name = "wpn_pm_m1",              type = "weapon", id = 61 },
   { name = "wpn_pm_m2",              type = "weapon", id = 62 },
   { name = "wpn_pm_m3",              type = "weapon", id = 63 },
   { name = "wpn_sig220_m1",          type = "weapon", id = 64 },
   { name = "wpn_sig220_m2",          type = "weapon", id = 65 },
   { name = "wpn_sig220_m3",          type = "weapon", id = 66 },
   { name = "wpn_sig550_m1",          type = "weapon", id = 67 },
   { name = "wpn_sig550_m2",          type = "weapon", id = 68 },
   { name = "wpn_sig550_m3",          type = "weapon", id = 69 },
   { name = "wpn_spas12_m1",          type = "weapon", id = 70 },
   { name = "wpn_spas12_m2",          type = "weapon", id = 71 },
   { name = "wpn_spas12_m3",          type = "weapon", id = 72 },
   { name = "wpn_toz34_m1",           type = "weapon", id = 73 },
   { name = "wpn_toz34_m2",           type = "weapon", id = 74 },
   { name = "wpn_toz34_m3",           type = "weapon", id = 75 },
   { name = "wpn_vintorez_m1",        type = "weapon", id = 76 },
   { name = "wpn_vintorez_m2",        type = "weapon", id = 77 },
   { name = "wpn_vintorez_m3",        type = "weapon", id = 78 },
   { name = "wpn_wincheaster1300_m1", type = "weapon", id = 79 },
   { name = "wpn_wincheaster1300_m2", type = "weapon", id = 80 },
   { name = "wpn_wincheaster1300_m3", type = "weapon", id = 81 }
}
local allspawn_sections_panel_6 = {
   { name = "ammo_9x18_fmj",                   type = "ammo",    id = 1 },
   { name = "ammo_9x18_pmm",                   type = "ammo",    id = 2 },
   { name = "ammo_9x19_fmj",                   type = "ammo",    id = 4 },
   { name = "ammo_9x19_pbp",                   type = "ammo",    id = 5 },
   { name = "ammo_11.43x23_hydro",             type = "ammo",    id = 7 },
   { name = "ammo_11.43x23_fmj",               type = "ammo",    id = 8 },
   { name = "ammo_12x70_buck",                 type = "ammo",    id = 9 },
   { name = "ammo_12x76_zhekan",               type = "ammo",    id = 10 },
   { name = "ammo_5.45x39_fmj",                type = "ammo",    id = 13 },
   { name = "ammo_5.45x39_ap",                 type = "ammo",    id = 14 },
   { name = "ammo_9x39_pab9",                  type = "ammo",    id = 17 },
   { name = "ammo_9x39_ap",                    type = "ammo",    id = 18 },
   { name = "ammo_5.56x45_ss190",              type = "ammo",    id = 20 },
   { name = "ammo_5.56x45_ap",                 type = "ammo",    id = 21 },
   { name = "ammo_7.62x54_7h1",                type = "ammo",    id = 23 },
   { name = "ammo_pkm_100",                    type = "ammo",    id = 29 },
   { name = "ammo_dumdum",                     type = "ammo",    id = 30 },
   { name = "ammo_gauss",                      type = "ammo",    id = 32 },
   { name = "ammo_gauss_cardan",               type = "ammo",    id = 33 },
   { name = "ammo_og-7b",                      type = "ammo",    id = 34 },
   { name = "ammo_vog-25",                     type = "ammo",    id = 35 },
   { name = "ammo_m209",                       type = "ammo",    id = 36 },
   { name = "ammo_box_10_vog",                 type = "ammo",    id = 37 },
   { name = "ammo_box_10_m209",                type = "ammo",    id = 38 },
   { name = "grenade_rgd5",                    type = "grenade", id = 39 },
   { name = "grenade_f1",                      type = "grenade", id = 40 },
   { name = "grenade_gd-05",                   type = "grenade", id = 41 },
   { name = "grenade_rgd5_double",             type = "grenade", id = 42 },
   { name = "grenade_f1_double",               type = "grenade", id = 43 },
   { name = "grenade_gd-05_double",            type = "grenade", id = 44 },
   { name = "wpn_addon_scope",                 type = "other",   id = 45 },
   { name = "wpn_addon_scope_x2.7",            type = "other",   id = 46 },
   { name = "wpn_addon_scope_detector",        type = "other",   id = 47 },
   { name = "wpn_addon_scope_night",           type = "other",   id = 48 },
   { name = "wpn_addon_scope_susat",           type = "other",   id = 49 },
   { name = "wpn_addon_scope_susat_x1.6",      type = "other",   id = 50 },
   { name = "wpn_addon_scope_susat_custom",    type = "other",   id = 51 },
   { name = "wpn_addon_scope_susat_dusk",      type = "other",   id = 52 },
   { name = "wpn_addon_scope_susat_night",     type = "other",   id = 53 },
   { name = "wpn_addon_silencer",              type = "other",   id = 54 },
   { name = "wpn_addon_grenade_launcher",      type = "other",   id = 55 },
   { name = "wpn_addon_grenade_launcher_m203", type = "other",   id = 56 },
   { name = "wpn_addon_silencer_9x19",         type = "other",   id = 57 },
   { name = "wpn_addon_silencer_11.43x23",     type = "other",   id = 58 },
   { name = "wpn_addon_silencer_5.56x45",      type = "other",   id = 59 },
   { name = "wpn_addon_silencer_5.45x39",      type = "other",   id = 60 },
   { name = "wpn_addon_silencer_9x39",         type = "other",   id = 61 }
}
local allspawn_sections_panel_7 = {
   { name = "bandage",                     type = "other",     id = 1 },
   { name = "bio_bandage",                 type = "other",     id = 2 },
   { name = "medkit",                      type = "other",     id = 3 },
   { name = "medkit_army",                 type = "other",     id = 4 },
   { name = "medkit_scientic",             type = "other",     id = 5 },
   { name = "medkit_elite",                type = "other",     id = 6 },
   { name = "psy_complex",                 type = "other",     id = 7 },
   { name = "antirad",                     type = "other",     id = 8 },
   { name = "medkit_used",                 type = "other",     id = 9 },
   { name = "medkit_army_used",            type = "other",     id = 10 },
   { name = "medkit_scientic_used",        type = "other",     id = 11 },
   { name = "medkit_elite_used",           type = "other",     id = 12 },
   { name = "drug_booster",                type = "other",     id = 13 },
   { name = "drug_coagulant",              type = "other",     id = 14 },
   { name = "drug_psy_blockade",           type = "other",     id = 15 },
   { name = "drug_antidot",                type = "other",     id = 16 },
   { name = "drug_radioprotector",         type = "other",     id = 17 },
   { name = "drug_anabiotic",              type = "other",     id = 18 },
   { name = "drug_engine",                 type = "other",     id = 19 },
   { name = "bread",                       type = "other",     id = 20 },
   { name = "kolbasa",                     type = "other",     id = 21 },
   { name = "conserva",                    type = "other",     id = 22 },
   { name = "vodka",                       type = "other",     id = 23 },
   { name = "energy_drink",                type = "other",     id = 24 },
   { name = "wild_drink",                  type = "other",     id = 25 },
   { name = "nuts",                        type = "other",     id = 26 },
   { name = "sardina",                     type = "other",     id = 27 },
   { name = "olivki",                      type = "other",     id = 28 },
   { name = "cheese",                      type = "other",     id = 29 },
   { name = "galet",                       type = "other",     id = 30 },
   { name = "shokolad",                    type = "other",     id = 31 },
   { name = "batonchik",                   type = "other",     id = 32 },
   { name = "beer",                        type = "other",     id = 33 },
   { name = "juice",                       type = "other",     id = 34 },
   { name = "personal_marker",             type = "other",     id = 35 },
   { name = "geiger_counter",              type = "other",     id = 36 },
   { name = "minetrap_detector",           type = "other",     id = 37 },
   { name = "minetrap_elite_detector",     type = "other",     id = 38 },
   { name = "remote_explosive_charge",     type = "other",     id = 39 },
   { name = "demolution_ballon",           type = "other",     id = 40 },
   { name = "demolution_kanistra",         type = "other",     id = 41 },
   { name = "demolution_barrel",           type = "other",     id = 42 },
   { name = "guidebook_mono",              type = "other",     id = 43 },
   { name = "conventer_grenade_box",       type = "other",     id = 44 },
   { name = "army_timer",                  type = "other",     id = 45 },
   { name = "repair_outfit_box",           type = "other",     id = 46 },
   { name = "repair_outfit_box_used",      type = "other",     id = 47 },
   { name = "repair_arms_box",             type = "other",     id = 48 },
   { name = "repair_arms_box_used",        type = "other",     id = 49 },
   { name = "emulator_brain_waves",        type = "other",     id = 50 },
   { name = "mp3_player",                  type = "other",     id = 51 },
   { name = "personal_rukzak",             type = "other",     id = 52 },
   { name = "device_torch",                type = "other",     id = 53 },
   { name = "detector_simple",             type = "other",     id = 54 },
   { name = "detector_advanced",           type = "other",     id = 55 },
   { name = "detector_elite",              type = "other",     id = 56 },
   { name = "detector_scientific",         type = "other",     id = 57 },
   { name = "detector_omega",              type = "other",     id = 58 },
   { name = "detector_simple_up",          type = "other",     id = 59 },
   { name = "detector_advanced_up",        type = "other",     id = 60 },
   { name = "detector_elite_up",           type = "other",     id = 61 },
   { name = "detector_scientific_up",      type = "other",     id = 62 },
   { name = "detector_omega_up",           type = "other",     id = 63 },
   { name = "mutant_snork_booty",          type = "other",     id = 64 },
   { name = "mutant_psevdodog_booty",      type = "other",     id = 65 },
   { name = "mutant_krovosos_booty",       type = "other",     id = 66 },
   { name = "mutant_boar_booty",           type = "other",     id = 67 },
   { name = "mutant_dog_booty",            type = "other",     id = 68 },
   { name = "mutant_flesh_booty",          type = "other",     id = 69 },
   { name = "mutant_giant_booty",          type = "other",     id = 70 },
   { name = "mutant_chimera_booty",        type = "other",     id = 71 },
   { name = "mutant_controler_booty",      type = "other",     id = 72 },
   { name = "mutant_burer_booty",          type = "other",     id = 73 },
   { name = "money_meshochek_100_500",     type = "other",     id = 74 },
   { name = "money_meshochek_100_3000",    type = "other",     id = 75 },
   { name = "money_meshochek_500_1000",    type = "other",     id = 76 },
   { name = "money_meshochek_1000_1500",   type = "other",     id = 77 },
   { name = "money_meshochek_1000_5000",   type = "other",     id = 78 },
   { name = "money_meshochek_1500_2000",   type = "other",     id = 79 },
   { name = "money_meshochek_2000_3000",   type = "other",     id = 80 },
   { name = "money_meshochek_3000_4000",   type = "other",     id = 81 },
   { name = "money_meshochek_4000_5000",   type = "other",     id = 82 },
   { name = "money_meshochek_5000_10000",  type = "other",     id = 83 },
   { name = "money_meshochek_10000_15000", type = "other",     id = 84 },
   { name = "money_meshochek_15000_20000", type = "other",     id = 85 },
   { name = "capture_meal_chimera",        type = "other",     id = 86 },
   { name = "capture_meal_gigant",         type = "other",     id = 87 },
   { name = "capture_meal_boar",           type = "other",     id = 88 },
   { name = "capture_meal_dog",            type = "other",     id = 89 },
   { name = "capture_meal_flesh",          type = "other",     id = 90 },
   { name = "capture_meal_tushkano",       type = "other",     id = 91 },
   { name = "capture_meal_pseudodog",      type = "other",     id = 92 },
   { name = "capture_meal_snork",          type = "other",     id = 93 },
   { name = "explosive_barrel",            type = "explosive", id = 94 },
   { name = "explosive_fuelcan",           type = "explosive", id = 95 },
   { name = "explosive_tank",              type = "explosive", id = 96 },
   { name = "bag_medkit_1",                type = "other",     id = 97 },
   { name = "bag_medkit_2",                type = "other",     id = 98 },
   { name = "bag_medkit_3",                type = "other",     id = 99 },
   { name = "bag_medkit_4",                type = "other",     id = 100 }
}
local allspawn_sections_panel_8 = {
   { name = "wpn_pm",                    type = "weapon", id = 1 },
   { name = "wpn_pb",                    type = "weapon", id = 2 },
   { name = "wpn_fort",                  type = "weapon", id = 3 },
   { name = "wpn_hpsa",                  type = "weapon", id = 4 },
   { name = "wpn_beretta",               type = "weapon", id = 5 },
   { name = "wpn_walther",               type = "weapon", id = 6 },
   { name = "wpn_sig220",                type = "weapon", id = 7 },
   { name = "wpn_colt1911",              type = "weapon", id = 8 },
   { name = "wpn_usp",                   type = "weapon", id = 9 },
   { name = "wpn_desert_eagle",          type = "weapon", id = 10 },
   { name = "wpn_bm16",                  type = "weapon", id = 11 },
   { name = "wpn_toz34",                 type = "weapon", id = 12 },
   { name = "wpn_wincheaster1300",       type = "weapon", id = 13 },
   { name = "wpn_spas12",                type = "weapon", id = 14 },
   { name = "wpn_protecta",              type = "weapon", id = 15 },
   { name = "wpn_ak74u",                 type = "weapon", id = 16 },
   { name = "wpn_mp5",                   type = "weapon", id = 17 },
   { name = "wpn_ak74",                  type = "weapon", id = 18 },
   { name = "wpn_abakan",                type = "weapon", id = 19 },
   { name = "wpn_l85",                   type = "weapon", id = 20 },
   { name = "wpn_gauss",                 type = "weapon", id = 21 },
   { name = "wpn_lr300",                 type = "weapon", id = 22 },
   { name = "wpn_sig550",                type = "weapon", id = 23 },
   { name = "wpn_groza",                 type = "weapon", id = 24 },
   { name = "wpn_val",                   type = "weapon", id = 25 },
   { name = "wpn_vintorez",              type = "weapon", id = 26 },
   { name = "wpn_svu",                   type = "weapon", id = 27 },
   { name = "wpn_svd",                   type = "weapon", id = 28 },
   { name = "wpn_rg-6",                  type = "weapon", id = 29 },
   { name = "wpn_rpg7",                  type = "weapon", id = 30 },
   { name = "wpn_g36",                   type = "weapon", id = 31 },
   { name = "wpn_fn2000",                type = "weapon", id = 32 },
   { name = "wpn_pkm",                   type = "weapon", id = 33 },
   { name = "wpn_abakan_m1",             type = "weapon", id = 34 },
   { name = "wpn_abakan_m2",             type = "weapon", id = 35 },
   { name = "wpn_abakan_m3",             type = "weapon", id = 36 },
   { name = "wpn_ak74u_m1",              type = "weapon", id = 37 },
   { name = "wpn_ak74u_m2",              type = "weapon", id = 38 },
   { name = "wpn_ak74u_m3",              type = "weapon", id = 39 },
   { name = "wpn_ak74_m1",               type = "weapon", id = 40 },
   { name = "wpn_ak74_m2",               type = "weapon", id = 41 },
   { name = "wpn_ak74_m3",               type = "weapon", id = 42 },
   { name = "wpn_beretta_m1",            type = "weapon", id = 43 },
   { name = "wpn_beretta_m2",            type = "weapon", id = 44 },
   { name = "wpn_beretta_m3",            type = "weapon", id = 45 },
   { name = "wpn_bm16_m1",               type = "weapon", id = 46 },
   { name = "wpn_bm16_m2",               type = "weapon", id = 47 },
   { name = "wpn_bm16_m3",               type = "weapon", id = 48 },
   { name = "wpn_fort_m1",               type = "weapon", id = 49 },
   { name = "wpn_fort_m2",               type = "weapon", id = 50 },
   { name = "wpn_fort_m3",               type = "weapon", id = 51 },
   { name = "wpn_groza_m1",              type = "weapon", id = 52 },
   { name = "wpn_groza_m2",              type = "weapon", id = 53 },
   { name = "wpn_groza_m3",              type = "weapon", id = 54 },
   { name = "wpn_lr300_m1",              type = "weapon", id = 55 },
   { name = "wpn_lr300_m2",              type = "weapon", id = 56 },
   { name = "wpn_lr300_m3",              type = "weapon", id = 57 },
   { name = "wpn_mp5_m1",                type = "weapon", id = 58 },
   { name = "wpn_mp5_m2",                type = "weapon", id = 59 },
   { name = "wpn_mp5_m3",                type = "weapon", id = 60 },
   { name = "wpn_pm_m1",                 type = "weapon", id = 61 },
   { name = "wpn_pm_m2",                 type = "weapon", id = 62 },
   { name = "wpn_pm_m3",                 type = "weapon", id = 63 },
   { name = "wpn_sig220_m1",             type = "weapon", id = 64 },
   { name = "wpn_sig220_m2",             type = "weapon", id = 65 },
   { name = "wpn_sig220_m3",             type = "weapon", id = 66 },
   { name = "wpn_sig550_m1",             type = "weapon", id = 67 },
   { name = "wpn_sig550_m2",             type = "weapon", id = 68 },
   { name = "wpn_sig550_m3",             type = "weapon", id = 69 },
   { name = "wpn_spas12_m1",             type = "weapon", id = 70 },
   { name = "wpn_spas12_m2",             type = "weapon", id = 71 },
   { name = "wpn_spas12_m3",             type = "weapon", id = 72 },
   { name = "wpn_toz34_m1",              type = "weapon", id = 73 },
   { name = "wpn_toz34_m2",              type = "weapon", id = 74 },
   { name = "wpn_toz34_m3",              type = "weapon", id = 75 },
   { name = "wpn_vintorez_m1",           type = "weapon", id = 76 },
   { name = "wpn_vintorez_m2",           type = "weapon", id = 77 },
   { name = "wpn_vintorez_m3",           type = "weapon", id = 78 },
   { name = "wpn_wincheaster1300_m1",    type = "weapon", id = 79 },
   { name = "wpn_wincheaster1300_m2",    type = "weapon", id = 80 },
   { name = "wpn_wincheaster1300_m3",    type = "weapon", id = 81 },
   { name = "helm_spectacles",           type = "outfit", id = 1 },
   { name = "helm_mercenary",            type = "outfit", id = 2 },
   { name = "helm_piranhas",             type = "outfit", id = 3 },
   { name = "helm_respirator",           type = "outfit", id = 4 },
   { name = "helm_hardhat",              type = "outfit", id = 5 },
   { name = "helm_protective",           type = "outfit", id = 6 },
   { name = "helm_tactic",               type = "outfit", id = 7 },
   { name = "helm_battle",               type = "outfit", id = 8 },
   { name = "novice_outfit",             type = "outfit", id = 9 },
   { name = "stalker_outfit",            type = "outfit", id = 10 },
   { name = "scientific_outfit",         type = "outfit", id = 11 },
   { name = "svoboda_light_outfit",      type = "outfit", id = 12 },
   { name = "svoboda_heavy_outfit",      type = "outfit", id = 13 },
   { name = "cs_heavy_outfit",           type = "outfit", id = 14 },
   { name = "dolg_outfit",               type = "outfit", id = 15 },
   { name = "dolg_heavy_outfit",         type = "outfit", id = 16 },
   { name = "exo_outfit",                type = "outfit", id = 17 },
   { name = "specops_outfit",            type = "outfit", id = 18 },
   { name = "military_outfit",           type = "outfit", id = 19 },
   { name = "ecolog_regular_outfit",     type = "outfit", id = 20 },
   { name = "ecolog_military_outfit",    type = "outfit", id = 21 },
   { name = "killer_outfit",             type = "outfit", id = 22 },
   { name = "monolith_outfit",           type = "outfit", id = 23 },
   { name = "cs_specnaz_outfit",         type = "outfit", id = 24 },
   { name = "csky_exo_outfit",           type = "outfit", id = 25 },
   { name = "freedom_exo_outfit",        type = "outfit", id = 26 },
   { name = "dolg_exo_outfit",           type = "outfit", id = 27 },
   { name = "monolit_exo_outfit",        type = "outfit", id = 28 },
   { name = "heavy_stalker_outfit",      type = "outfit", id = 29 },
   { name = "bandit_raid_outfit",        type = "outfit", id = 30 },
   { name = "svoboda_army_outfit",       type = "outfit", id = 31 },
   { name = "bandit_prikid_outfit",      type = "outfit", id = 32 },
   { name = "novice_stalker_outfit",     type = "outfit", id = 33 },
   { name = "novice_bandit_outfit",      type = "outfit", id = 34 },
   { name = "bandit_exo_outfit",         type = "outfit", id = 35 },
   { name = "army_exo_outfit",           type = "outfit", id = 36 },
   { name = "killer_exo_outfit",         type = "outfit", id = 37 },
   { name = "stalker_reinforced_outfit", type = "outfit", id = 38 },
   { name = "army_nauchniy_outfit",      type = "outfit", id = 39 }
}
class "allspawn_editor_item" (CUIListBoxItem)
function allspawn_editor_item:__init(height)
   super(height)
   self.name = self:GetTextItem()
   self:SetTextColor(GetARGB(255, 210, 210, 210))
   self.name:SetFont(GetFontLetterica18Russian())
   self.name:SetWndSize(vector2():set(278, height))
   self.name:SetEllipsis(true)
end

class "allspawn_editor" (CUIScriptWnd)
function allspawn_editor:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
   if allspawn_editor_section == 1 then
      self:FillList(allspawn_sections_panel_1)
   elseif allspawn_editor_section == 2 then
      self:FillList(allspawn_sections_panel_2)
   elseif allspawn_editor_section == 3 then
      self:FillList(allspawn_sections_panel_3)
   elseif allspawn_editor_section == 4 then
      self:FillList(allspawn_sections_panel_4)
   elseif allspawn_editor_section == 5 then
      self:FillList(allspawn_sections_panel_5)
   elseif allspawn_editor_section == 6 then
      self:FillList(allspawn_sections_panel_6)
   elseif allspawn_editor_section == 7 then
      self:FillList(allspawn_sections_panel_7)
   end
end

function allspawn_editor:__finalize()
end

function allspawn_editor:FillList(list)
   self.stations_list:Clear()
   for k, v in pairs(list) do
      self:AddItemToList(v.name, v.type, v.id)
   end
end

function allspawn_editor:AddItemToList(name, type, id)
   local source = allspawn_editor_item(22)
   source.name:SetText(name)
   self.stations_list:AddExistingItem(source)
   source.type = type
   source.id = source:AddTextField(id, 0)
   source.id:SetWndPos(vector2():set(296, 0))
end

function allspawn_editor:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.allspawn_editor_form = xml:InitStatic("allspawn_editor_form", self)
   self.editor_title = xml:InitStatic("allspawn_editor_form:editor_title", self.allspawn_editor_form)
   self:start_button(xml, "btn_create")
   self:start_button(xml, "btn_close")
   self:start_button(xml, "btn_read_example")
   self:start_button(xml, "btn_radius_minus")
   self:start_button(xml, "btn_radius_plus")
   self:start_button(xml, "btn_counter_minus")
   self:start_button(xml, "btn_counter_plus")
   self:start_button(xml, "btn_magazine_minus")
   self:start_button(xml, "btn_magazine_plus")
   self:start_button(xml, "btn_auto_print_activate")
   self:start_button(xml, "btn_auto_print_deactivate")
   self:start_button(xml, "btn_switch_panel_1")
   self:start_button(xml, "btn_switch_panel_2")
   self:start_button(xml, "btn_switch_panel_3")
   self:start_button(xml, "btn_switch_panel_4")
   self:start_button(xml, "btn_switch_panel_5")
   self:start_button(xml, "btn_switch_panel_6")
   self:start_button(xml, "btn_switch_panel_7")
   self.check_with_logic = xml:InitCheck("allspawn_editor_form:check_with_logic", self.allspawn_editor_form)
   self.check_with_logic:SetCheck(sgm_functions.info_get_boolean("allspawn_editor_check_logic", true))
   self.check_another_mode = xml:InitCheck("allspawn_editor_form:check_another_mode", self.allspawn_editor_form)
   self.check_another_mode:SetCheck(sgm_functions.info_get_boolean("allspawn_editor_check_another_mode"))
   self.check_button_spawner = xml:InitCheck("allspawn_editor_form:check_button_spawner", self.allspawn_editor_form)
   self.check_button_spawner:SetCheck(sgm_functions.info_get_boolean("allspawn_editor_check_button_spawner"))
   self.cfg_display_radius = xml:InitStatic("allspawn_editor_form:cfg_display_radius", self.allspawn_editor_form)
   self.cfg_display_counter = xml:InitStatic("allspawn_editor_form:cfg_display_counter", self.allspawn_editor_form)
   self.cfg_display_magazine = xml:InitStatic("allspawn_editor_form:cfg_display_magazine", self.allspawn_editor_form)
   self.cfg_name_prefix_field = xml:InitEditBox("allspawn_editor_form:cfg_name_prefix_field", self.allspawn_editor_form)
   self.cfg_name_suffix_field = xml:InitEditBox("allspawn_editor_form:cfg_name_suffix_field", self.allspawn_editor_form)
   self.cfg_name_logic_path_field = xml:InitEditBox("allspawn_editor_form:cfg_name_logic_path_field",
      self.allspawn_editor_form)
   self.cfg_name_hiding_place_field = xml:InitEditBox("allspawn_editor_form:cfg_name_hiding_place_field",
      self.allspawn_editor_form)
   self.stations_list = xml:InitListBox("allspawn_editor_form:stations_list", self)
   self.stations_list:ShowSelectedItem(true)
   self:Register(self.stations_list, "stations_list_window")
   self.editor_title:TextControl():SetText(game.translate_string("st_allspawn_editor_title"))
   if allspawn_cfg_prefix == "nil" then
      if allspawn_def_name_1 == "" or allspawn_def_name_1 == "auto" then
         allspawn_cfg_prefix = string.sub(level.name(), 1, 3)
      else
         allspawn_cfg_prefix = allspawn_def_name_1
      end
      self.cfg_name_prefix_field:SetText(allspawn_cfg_prefix)
   else
      self.cfg_name_prefix_field:SetText(allspawn_cfg_prefix)
   end
   if allspawn_cfg_suffix == "nil" then
      if allspawn_def_name_2 == "" then
         allspawn_cfg_suffix = "mod_object"
      else
         allspawn_cfg_suffix = allspawn_def_name_2
      end
      self.cfg_name_suffix_field:SetText(allspawn_cfg_suffix)
   else
      self.cfg_name_suffix_field:SetText(allspawn_cfg_suffix)
   end
   if allspawn_cfg_logic_path ~= "nil" then
      self.cfg_name_logic_path_field:SetText(allspawn_cfg_logic_path)
   end
   if allspawn_cfg_hiding_place ~= "nil" then
      self.cfg_name_hiding_place_field:SetText(allspawn_cfg_hiding_place)
   end
end

function allspawn_editor:InitCallBacks()
   self:AddCallback("btn_switch_panel_1", ui_events.BUTTON_CLICKED, self.btn_switch_panel_1, self)
   self:AddCallback("btn_switch_panel_2", ui_events.BUTTON_CLICKED, self.btn_switch_panel_2, self)
   self:AddCallback("btn_switch_panel_3", ui_events.BUTTON_CLICKED, self.btn_switch_panel_3, self)
   self:AddCallback("btn_switch_panel_4", ui_events.BUTTON_CLICKED, self.btn_switch_panel_4, self)
   self:AddCallback("btn_switch_panel_5", ui_events.BUTTON_CLICKED, self.btn_switch_panel_5, self)
   self:AddCallback("btn_switch_panel_6", ui_events.BUTTON_CLICKED, self.btn_switch_panel_6, self)
   self:AddCallback("btn_switch_panel_7", ui_events.BUTTON_CLICKED, self.btn_switch_panel_7, self)
   self:AddCallback("btn_create", ui_events.BUTTON_CLICKED, self.btn_create, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
   self:AddCallback("btn_read_example", ui_events.BUTTON_CLICKED, self.btn_read_example, self)
   self:AddCallback("btn_radius_minus", ui_events.BUTTON_CLICKED, self.btn_radius_minus, self)
   self:AddCallback("btn_radius_plus", ui_events.BUTTON_CLICKED, self.btn_radius_plus, self)
   self:AddCallback("btn_counter_minus", ui_events.BUTTON_CLICKED, self.btn_counter_minus, self)
   self:AddCallback("btn_counter_plus", ui_events.BUTTON_CLICKED, self.btn_counter_plus, self)
   self:AddCallback("btn_magazine_minus", ui_events.BUTTON_CLICKED, self.btn_magazine_minus, self)
   self:AddCallback("btn_magazine_plus", ui_events.BUTTON_CLICKED, self.btn_magazine_plus, self)
   self:AddCallback("btn_auto_print_activate", ui_events.BUTTON_CLICKED, self.btn_auto_print_activate, self)
   self:AddCallback("btn_auto_print_deactivate", ui_events.BUTTON_CLICKED, self.btn_auto_print_deactivate, self)
   self:AddCallback("stations_list_window", ui_events.WINDOW_LBUTTON_DB_CLICK, self.btn_create, self)
end

function allspawn_editor:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
   if allspawn_cfg_radius < 0 then allspawn_cfg_radius = 0 end
   if allspawn_cfg_counting < 0 then allspawn_cfg_counting = 0 end
   if allspawn_cfg_magazine < 0 then allspawn_cfg_magazine = 0 end
   if self.cfg_display_radius:TextControl():GetText() ~= allspawn_cfg_radius then
      self.cfg_display_radius:TextControl():SetText(allspawn_cfg_radius)
   end
   if self.cfg_display_counter:TextControl():GetText() ~= allspawn_cfg_counting then
      self.cfg_display_counter:TextControl():SetText(allspawn_cfg_counting)
   end
   if self.cfg_display_magazine:TextControl():GetText() ~= allspawn_cfg_magazine then
      self.cfg_display_magazine:TextControl():SetText(allspawn_cfg_magazine)
   end
   if self.check_with_logic:GetCheck() and (self:get_currert_selected("type") == "smart_terrain" or self:get_currert_selected("type") == "anomal_zone") then
      if allspawn_cfg_logic_path == "nil" then
         if allspawn_def_logic_path == "" then
            if self:get_currert_selected("type") == "smart_terrain" then
               allspawn_cfg_logic_path = "scripts\\" .. level.name() .. "\\" .. "smart" .. "\\" ..
                   allspawn_cfg_prefix .. "_"
            elseif self:get_currert_selected("type") == "anomal_zone" then
               allspawn_cfg_logic_path = "scripts\\" .. level.name() .. "\\" .. "anomaly" ..
                   "\\" .. allspawn_cfg_prefix .. "_"
            end
         else
            allspawn_cfg_logic_path = allspawn_def_logic_path
         end
         self.cfg_name_logic_path_field:SetText(allspawn_cfg_logic_path)
      end
   end
   if tostring(self.cfg_name_hiding_place_field:GetText()) ~= "" and (self:get_currert_selected("type") == "other" or self:get_currert_selected("type") == "ammo" or self:get_currert_selected("type") == "weapon" or self:get_currert_selected("type") == "outfit" or self:get_currert_selected("type") == "grenade") then
      if find_out_string(allspawn_cfg_suffix, "hiding_" .. self:get_currert_selected("name")) then
         allspawn_cfg_suffix = "hiding_" .. self:get_currert_selected("name")
         self.cfg_name_suffix_field:SetText(allspawn_cfg_suffix)
      end
   end
   if allspawn_auto_print_mode == false then
      self.get_btn_auto_print_activate:Show(true)
      self.get_btn_auto_print_activate:Enable(true)
      self.get_btn_auto_print_deactivate:Show(false)
      self.get_btn_auto_print_deactivate:Enable(false)
   else
      self.get_btn_auto_print_activate:Show(false)
      self.get_btn_auto_print_activate:Enable(false)
      self.get_btn_auto_print_deactivate:Show(true)
      self.get_btn_auto_print_deactivate:Enable(true)
   end
   sgm_functions.info_give_on_boolean(self.check_with_logic:GetCheck(), "allspawn_editor_check_logic", true)
   sgm_functions.info_give_on_boolean(self.check_another_mode:GetCheck(), "allspawn_editor_check_another_mode")
   sgm_functions.info_give_on_boolean(self.check_button_spawner:GetCheck(), "allspawn_editor_check_button_spawner")
   --/sgm_functions.info_give_on_boolean(self.check_another_mode_spawn:GetCheck(),"allspawn_editor_check_another_mode_spawn")
end

function allspawn_editor:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function allspawn_editor:start_button(xml, button_name)
   self["get_" .. button_name] = xml:Init3tButton("allspawn_editor_form:" .. button_name, self.allspawn_editor_form)
   self:Register(self["get_" .. button_name], button_name)
end

function allspawn_editor:btn_switch_panel_1()
   self:FillList(allspawn_sections_panel_1)
   allspawn_editor_section = 1
end

function allspawn_editor:btn_switch_panel_2()
   self:FillList(allspawn_sections_panel_2)
   allspawn_editor_section = 2
end

function allspawn_editor:btn_switch_panel_3()
   self:FillList(allspawn_sections_panel_3)
   allspawn_editor_section = 3
end

function allspawn_editor:btn_switch_panel_4()
   self:FillList(allspawn_sections_panel_4)
   allspawn_editor_section = 4
end

function allspawn_editor:btn_switch_panel_5()
   self:FillList(allspawn_sections_panel_5)
   allspawn_editor_section = 5
end

function allspawn_editor:btn_switch_panel_6()
   self:FillList(allspawn_sections_panel_6)
   allspawn_editor_section = 6
end

function allspawn_editor:btn_switch_panel_7()
   self:FillList(allspawn_sections_panel_7)
   allspawn_editor_section = 7
end

function allspawn_editor:btn_radius_minus()
   allspawn_cfg_radius = allspawn_cfg_radius - 0.5
end

function allspawn_editor:btn_radius_plus()
   allspawn_cfg_radius = allspawn_cfg_radius + 0.5
end

function allspawn_editor:btn_counter_minus()
   allspawn_cfg_counting = allspawn_cfg_counting - 1
end

function allspawn_editor:btn_counter_plus()
   allspawn_cfg_counting = allspawn_cfg_counting + 1
end

function allspawn_editor:btn_magazine_minus()
   allspawn_cfg_magazine = allspawn_cfg_magazine - 1
end

function allspawn_editor:btn_magazine_plus()
   allspawn_cfg_magazine = allspawn_cfg_magazine + 1
end

function allspawn_editor:btn_create()
   if self.stations_list:GetSize() == 0 then return end
   local item = self.stations_list:GetSelectedItem()
   if not item then
      if allspawn_last_name == "nil" then
         return
      else
         local item_name = tostring(allspawn_last_name)
         local item_type = tostring(allspawn_last_type)
         local item_id = tonumber(allspawn_last_id)
         self:check_data_by_id(item_name, item_type, item_id)
         return
      end
   end
   local item_name = tostring(item.name:GetText())
   local item_type = tostring(item.type)
   local item_id = tonumber(item.id:GetText())
   self:check_data_by_id(item_name, item_type, item_id)
end

function allspawn_editor:get_currert_selected(what)
   if self.stations_list:GetSize() == 0 then return nil end
   local item = self.stations_list:GetSelectedItem()
   if not item then return nil end
   if what == "name" then
      return tostring(item.name:GetText())
   elseif what == "type" then
      return tostring(item.type)
   else
      return tonumber(item.id:GetText())
   end
end

function allspawn_editor:check_data_by_id(name, type, id, only_read)
   local data, logic = "", ""
   if self.check_another_mode:GetCheck() then
      data = "create(" ..
          name ..
          "," ..
          db.actor:position().x ..
          "," ..
          db.actor:position().y ..
          "," .. db.actor:position().z .. "," .. db.actor:level_vertex_id() .. "," .. db.actor:game_vertex_id() .. ")"
   else
      if type == "space_restrictor" then
         if self.check_with_logic:GetCheck() then
            if find_in_string(tostring(self.cfg_name_suffix_field:GetText()), "hiding_place") then
               logic = "custom_data = <<END" ..
                   game.translate_string("\n") ..
                   "[secret]" ..
                   game.translate_string("\n") ..
                   "cfg = misc\\secret_" ..
                   level.name() .. ".ltx" .. game.translate_string("\n") .. "END" .. game.translate_string("\n")
            elseif tostring(self.cfg_name_logic_path_field:GetText()) == "" then
               logic = "custom_data = <<END" .. game.translate_string("\n") .. "END" .. game.translate_string("\n")
            else
               logic = "custom_data = <<END" ..
                   game.translate_string("\n") ..
                   "[logic]" ..
                   game.translate_string("\n") ..
                   "cfg = " ..
                   tostring(self.cfg_name_logic_path_field:GetText()) ..
                   ".ltx" .. game.translate_string("\n") .. "END" .. game.translate_string("\n")
            end
         end
      elseif type == "smart_terrain" then
         if self.check_with_logic:GetCheck() then
            logic = "custom_data = <<END" ..
                game.translate_string("\n") ..
                "[smart_terrain]" ..
                game.translate_string("\n") ..
                "cfg = " ..
                tostring(self.cfg_name_logic_path_field:GetText()) ..
                ".ltx" .. game.translate_string("\n") .. "END" .. game.translate_string("\n")
         end
      elseif type == "anomal_zone" then
         if self.check_with_logic:GetCheck() then
            logic = "custom_data = <<END" ..
                game.translate_string("\n") ..
                "[anomal_zone]" ..
                game.translate_string("\n") ..
                "cfg = " ..
                tostring(self.cfg_name_logic_path_field:GetText()) ..
                ".ltx" .. game.translate_string("\n") .. "END" .. game.translate_string("\n")
         end
      elseif type == "inventory_box" then
         if self.check_with_logic:GetCheck() then
            logic = "custom_data = <<END" ..
                game.translate_string("\n") .. "[spawn]" .. game.translate_string("\n") .. "END" ..
                game.translate_string("\n")
         end
      else
         if self.check_with_logic:GetCheck() then
            if tostring(self.cfg_name_hiding_place_field:GetText()) == "" then
               logic = "custom_data = <<END" .. game.translate_string("\n") .. "END" .. game.translate_string("\n")
            else
               logic = "custom_data = <<END" ..
                   game.translate_string("\n") ..
                   "[secret]" ..
                   game.translate_string("\n") ..
                   "name = " ..
                   tostring(self.cfg_name_hiding_place_field:GetText()) ..
                   game.translate_string("\n") .. "END" .. game.translate_string("\n")
            end
         end
      end
      if type == "space_restrictor" then
         if find_in_string(tostring(self.cfg_name_suffix_field:GetText()), "hiding_place") then
            data = game.translate_string("\n") ..
                "[" ..
                allspawn_cfg_counting ..
                "]" ..
                game.translate_string("\n") ..
                "section_name = space_restrictor" ..
                game.translate_string("\n") ..
                "name = " ..
                tostring(self.cfg_name_prefix_field:GetText()) ..
                "_" ..
                tostring(self.cfg_name_suffix_field:GetText()) ..
                game.translate_string("\n") ..
                "position = " ..
                db.actor:position().x ..
                "," ..
                db.actor:position().y ..
                "," ..
                db.actor:position().z ..
                game.translate_string("\n") ..
                "direction = 0,0,0" ..
                game.translate_string("\n") ..
                "version = 128" ..
                game.translate_string("\n") ..
                "script_version = 12" ..
                game.translate_string("\n") ..
                "game_vertex_id = " ..
                db.actor:game_vertex_id() ..
                game.translate_string("\n") ..
                "distance = 0" ..
                game.translate_string("\n") ..
                "level_vertex_id = " ..
                db.actor:level_vertex_id() ..
                game.translate_string("\n") ..
                "object_flags = 0xffffff3e" ..
                game.translate_string("\n") ..
                logic ..
                "shapes = shape0" ..
                game.translate_string("\n") ..
                "shape0:type = sphere" ..
                game.translate_string("\n") ..
                "shape0:offset = 0,0,0" ..
                game.translate_string("\n") ..
                "shape0:radius = " .. allspawn_cfg_radius .. game.translate_string("\n") .. "restrictor_type = 3"
         else
            data = game.translate_string("\n") ..
                "[" ..
                allspawn_cfg_counting ..
                "]" ..
                game.translate_string("\n") ..
                "section_name = space_restrictor" ..
                game.translate_string("\n") ..
                "name = " ..
                tostring(self.cfg_name_prefix_field:GetText()) ..
                "_" ..
                tostring(self.cfg_name_suffix_field:GetText()) ..
                "_" ..
                allspawn_cfg_counting ..
                game.translate_string("\n") ..
                "position = " ..
                db.actor:position().x ..
                "," ..
                db.actor:position().y ..
                "," ..
                db.actor:position().z ..
                game.translate_string("\n") ..
                "direction = 0,0,0" ..
                game.translate_string("\n") ..
                "version = 128" ..
                game.translate_string("\n") ..
                "script_version = 12" ..
                game.translate_string("\n") ..
                "game_vertex_id = " ..
                db.actor:game_vertex_id() ..
                game.translate_string("\n") ..
                "distance = 0" ..
                game.translate_string("\n") ..
                "level_vertex_id = " ..
                db.actor:level_vertex_id() ..
                game.translate_string("\n") ..
                "object_flags = 0xffffff3e" ..
                game.translate_string("\n") ..
                logic ..
                "shapes = shape0" ..
                game.translate_string("\n") ..
                "shape0:type = sphere" ..
                game.translate_string("\n") ..
                "shape0:offset = 0,0,0" ..
                game.translate_string("\n") ..
                "shape0:radius = " .. allspawn_cfg_radius .. game.translate_string("\n") .. "restrictor_type = 3"
         end
      elseif type == "smart_terrain" then
         data = game.translate_string("\n") ..
             "[" ..
             allspawn_cfg_counting ..
             "]" ..
             game.translate_string("\n") ..
             "section_name = smart_terrain" ..
             game.translate_string("\n") ..
             "name = " ..
             tostring(self.cfg_name_prefix_field:GetText()) ..
             "_" ..
             tostring(self.cfg_name_suffix_field:GetText()) ..
             "_" ..
             allspawn_cfg_counting ..
             game.translate_string("\n") ..
             "position = " ..
             db.actor:position().x ..
             "," ..
             db.actor:position().y ..
             "," ..
             db.actor:position().z ..
             game.translate_string("\n") ..
             "direction = 0,0,0" ..
             game.translate_string("\n") ..
             "version = 128" ..
             game.translate_string("\n") ..
             "script_version = 12" ..
             game.translate_string("\n") ..
             "game_vertex_id = " ..
             db.actor:game_vertex_id() ..
             game.translate_string("\n") ..
             "distance = 14" ..
             game.translate_string("\n") ..
             "level_vertex_id = " ..
             db.actor:level_vertex_id() ..
             game.translate_string("\n") ..
             "object_flags = 0xffffff3e" ..
             game.translate_string("\n") ..
             logic ..
             "shapes = shape0" ..
             game.translate_string("\n") ..
             "shape0:type = sphere" ..
             game.translate_string("\n") ..
             "shape0:offset = 0,0,0" ..
             game.translate_string("\n") ..
             "shape0:radius = " .. allspawn_cfg_radius .. game.translate_string("\n") .. "restrictor_type = 3"
      elseif type == "anomal_zone" then
         data = game.translate_string("\n") ..
             "[" ..
             allspawn_cfg_counting ..
             "]" ..
             game.translate_string("\n") ..
             "section_name = anomal_zone" ..
             game.translate_string("\n") ..
             "name = " ..
             tostring(self.cfg_name_prefix_field:GetText()) ..
             "_" ..
             tostring(self.cfg_name_suffix_field:GetText()) ..
             "_" ..
             allspawn_cfg_counting ..
             game.translate_string("\n") ..
             "position = " ..
             db.actor:position().x ..
             "," ..
             db.actor:position().y ..
             "," ..
             db.actor:position().z ..
             game.translate_string("\n") ..
             "direction = 0,0,0" ..
             game.translate_string("\n") ..
             "version = 128" ..
             game.translate_string("\n") ..
             "script_version = 12" ..
             game.translate_string("\n") ..
             "game_vertex_id = " ..
             db.actor:game_vertex_id() ..
             game.translate_string("\n") ..
             "distance = 0" ..
             game.translate_string("\n") ..
             "level_vertex_id = " ..
             db.actor:level_vertex_id() ..
             game.translate_string("\n") ..
             "object_flags = 0xffffff3e" ..
             game.translate_string("\n") ..
             logic ..
             "shapes = shape0" ..
             game.translate_string("\n") ..
             "shape0:type = sphere" ..
             game.translate_string("\n") ..
             "shape0:offset = 0,0,0" ..
             game.translate_string("\n") ..
             "shape0:radius = " .. allspawn_cfg_radius .. game.translate_string("\n") .. "restrictor_type = 3"
      elseif type == "inventory_box" then
         data = game.translate_string("\n") ..
             "[" ..
             allspawn_cfg_counting ..
             "]" ..
             game.translate_string("\n") ..
             "section_name = inventory_box" ..
             game.translate_string("\n") ..
             "name = " ..
             tostring(self.cfg_name_prefix_field:GetText()) ..
             "_" ..
             tostring(self.cfg_name_suffix_field:GetText()) ..
             "_" ..
             allspawn_cfg_counting ..
             game.translate_string("\n") ..
             "position = " ..
             db.actor:position().x ..
             "," ..
             db.actor:position().y ..
             "," ..
             db.actor:position().z ..
             game.translate_string("\n") ..
             "direction = 0,0,0" ..
             game.translate_string("\n") ..
             "version = 128" ..
             game.translate_string("\n") ..
             "script_version = 12" ..
             game.translate_string("\n") ..
             "game_vertex_id = " ..
             db.actor:game_vertex_id() ..
             game.translate_string("\n") ..
             "distance = 0" ..
             game.translate_string("\n") ..
             "level_vertex_id = " ..
             db.actor:level_vertex_id() ..
             game.translate_string("\n") ..
             "object_flags = 0xffffff3f" ..
             game.translate_string("\n") ..
             logic ..
             "visual_name = " ..
             "dynamics\\equipment_cache\\equipment_box_02_case" ..
             game.translate_string("\n") .. "tip = inventory_box_use"
      elseif type == "anomaly" then
         data = game.translate_string("\n") ..
             "[" ..
             allspawn_cfg_counting ..
             "]" ..
             game.translate_string("\n") ..
             "section_name = " ..
             name ..
             game.translate_string("\n") ..
             "name = " ..
             tostring(self.cfg_name_prefix_field:GetText()) ..
             "_" ..
             tostring(self.cfg_name_suffix_field:GetText()) ..
             "_" ..
             allspawn_cfg_counting ..
             game.translate_string("\n") ..
             "position = " ..
             db.actor:position().x ..
             "," ..
             db.actor:position().y ..
             "," ..
             db.actor:position().z ..
             game.translate_string("\n") ..
             "direction = 0,0,0" ..
             game.translate_string("\n") ..
             "version = 128" ..
             game.translate_string("\n") ..
             "script_version = 12" ..
             game.translate_string("\n") ..
             "game_vertex_id = " ..
             db.actor:game_vertex_id() ..
             game.translate_string("\n") ..
             "distance = 4" ..
             game.translate_string("\n") ..
             "level_vertex_id = " ..
             db.actor:level_vertex_id() ..
             game.translate_string("\n") ..
             "object_flags = 0xffffff3e" ..
             game.translate_string("\n") ..
             logic ..
             "shapes = shape0" ..
             game.translate_string("\n") ..
             "shape0:type = sphere" ..
             game.translate_string("\n") ..
             "shape0:offset = 0,0,0" ..
             game.translate_string("\n") ..
             "shape0:radius = " ..
             allspawn_cfg_radius ..
             game.translate_string("\n") ..
             "restrictor_type = 3" ..
             game.translate_string("\n") ..
             "max_power = 0" ..
             game.translate_string("\n") ..
             "offline_interactive_radius = 30" ..
             game.translate_string("\n") ..
             "artefact_spawn_count = 32" .. game.translate_string("\n") .. "artefact_position_offset = 0x1320"
      elseif type == "ammo" then
         data = game.translate_string("\n") ..
             "[" ..
             allspawn_cfg_counting ..
             "]" ..
             game.translate_string("\n") ..
             "section_name = " ..
             name ..
             game.translate_string("\n") ..
             "name = " ..
             tostring(self.cfg_name_prefix_field:GetText()) ..
             "_" ..
             tostring(self.cfg_name_suffix_field:GetText()) ..
             "_" ..
             allspawn_cfg_counting ..
             game.translate_string("\n") ..
             "position = " ..
             db.actor:position().x ..
             "," ..
             db.actor:position().y ..
             "," ..
             db.actor:position().z ..
             game.translate_string("\n") ..
             "direction = 0,0,0" ..
             game.translate_string("\n") ..
             "version = 128" ..
             game.translate_string("\n") ..
             "script_version = 12" ..
             game.translate_string("\n") ..
             "game_vertex_id = " ..
             db.actor:game_vertex_id() ..
             game.translate_string("\n") ..
             "distance = 0" ..
             game.translate_string("\n") ..
             "level_vertex_id = " ..
             db.actor:level_vertex_id() ..
             game.translate_string("\n") ..
             "object_flags = 0xffffff0f" ..
             game.translate_string("\n") ..
             logic ..
             "visual_name = " ..
             sgm_functions.ReadVisual(name) ..
             game.translate_string("\n") ..
             "condition = 1" ..
             game.translate_string("\n") ..
             "upgrades = " ..
             game.translate_string("\n") ..
             "ammo_left = " .. allspawn_cfg_magazine ..
             game.translate_string("\n") .. "upd:ammo_left = " .. allspawn_cfg_magazine
      elseif type == "outfit" then
         data = game.translate_string("\n") ..
             "[" ..
             allspawn_cfg_counting ..
             "]" ..
             game.translate_string("\n") ..
             "section_name = " ..
             name ..
             game.translate_string("\n") ..
             "name = " ..
             tostring(self.cfg_name_prefix_field:GetText()) ..
             "_" ..
             tostring(self.cfg_name_suffix_field:GetText()) ..
             "_" ..
             allspawn_cfg_counting ..
             game.translate_string("\n") ..
             "position = " ..
             db.actor:position().x ..
             "," ..
             db.actor:position().y ..
             "," ..
             db.actor:position().z ..
             game.translate_string("\n") ..
             "direction = 0,0,0" ..
             game.translate_string("\n") ..
             "version = 128" ..
             game.translate_string("\n") ..
             "script_version = 12" ..
             game.translate_string("\n") ..
             "game_vertex_id = " ..
             db.actor:game_vertex_id() ..
             game.translate_string("\n") ..
             "distance = 0" ..
             game.translate_string("\n") ..
             "level_vertex_id = " ..
             db.actor:level_vertex_id() ..
             game.translate_string("\n") ..
             "object_flags = 0xffffff3f" ..
             game.translate_string("\n") ..
             logic ..
             "visual_name = " ..
             sgm_functions.ReadVisual(name) ..
             game.translate_string("\n") ..
             "condition = 1" ..
             game.translate_string("\n") .. "upgrades = " .. game.translate_string("\n") .. "upd:condition = 255"
      elseif type == "weapon" then
         local str_end = "upd:grenade_mode = 0"
         if find_in_string(name, "rg-6") or find_in_string(name, "protecta") or find_in_string(name, "spas12") or find_in_string(name, "toz") or find_in_string(name, "wincheaster") or find_in_string(name, "bm16") or find_in_string(name, "mossberg") or find_in_string(name, "mossberg") then
            str_end = "upd:ammo_ids = 0"
         end
         data = game.translate_string("\n") ..
             "[" ..
             allspawn_cfg_counting ..
             "]" ..
             game.translate_string("\n") ..
             "section_name = " ..
             name ..
             game.translate_string("\n") ..
             "name = " ..
             tostring(self.cfg_name_prefix_field:GetText()) ..
             "_" ..
             tostring(self.cfg_name_suffix_field:GetText()) ..
             "_" ..
             allspawn_cfg_counting ..
             game.translate_string("\n") ..
             "position = " ..
             db.actor:position().x ..
             "," ..
             db.actor:position().y ..
             "," ..
             db.actor:position().z ..
             game.translate_string("\n") ..
             "direction = 0,0,0" ..
             game.translate_string("\n") ..
             "version = 128" ..
             game.translate_string("\n") ..
             "script_version = 12" ..
             game.translate_string("\n") ..
             "game_vertex_id = " ..
             db.actor:game_vertex_id() ..
             game.translate_string("\n") ..
             "distance = 0" ..
             game.translate_string("\n") ..
             "level_vertex_id = " ..
             db.actor:level_vertex_id() ..
             game.translate_string("\n") ..
             "object_flags = 0xffffff0f" ..
             game.translate_string("\n") ..
             logic ..
             "visual_name = " ..
             sgm_functions.ReadVisual(name) ..
             game.translate_string("\n") ..
             "condition = 1.0" ..
             game.translate_string("\n") ..
             "upgrades = " ..
             game.translate_string("\n") ..
             "ammo_current = 90" ..
             game.translate_string("\n") ..
             "upd:condition = 255" ..
             game.translate_string("\n") ..
             "upd:weapon_flags = 0" ..
             game.translate_string("\n") ..
             "upd:ammo_elapsed = 0" ..
             game.translate_string("\n") ..
             "upd:addon_flags = 0" ..
             game.translate_string("\n") ..
             "upd:ammo_type = 0" ..
             game.translate_string("\n") ..
             "upd:weapon_state = 0" ..
             game.translate_string("\n") ..
             "upd:weapon_zoom = 0" ..
             game.translate_string("\n") .. "upd:current_fire_mode = 0" .. game.translate_string("\n") .. str_end
      elseif type == "grenade" then
         data = game.translate_string("\n") ..
             "[" ..
             allspawn_cfg_counting ..
             "]" ..
             game.translate_string("\n") ..
             "section_name = " ..
             name ..
             game.translate_string("\n") ..
             "name = " ..
             tostring(self.cfg_name_prefix_field:GetText()) ..
             "_" ..
             tostring(self.cfg_name_suffix_field:GetText()) ..
             "_" ..
             allspawn_cfg_counting ..
             game.translate_string("\n") ..
             "position = " ..
             db.actor:position().x ..
             "," ..
             db.actor:position().y ..
             "," ..
             db.actor:position().z ..
             game.translate_string("\n") ..
             "direction = 0,0,0" ..
             game.translate_string("\n") ..
             "version = 128" ..
             game.translate_string("\n") ..
             "script_version = 12" ..
             game.translate_string("\n") ..
             "game_vertex_id = " ..
             db.actor:game_vertex_id() ..
             game.translate_string("\n") ..
             "distance = 0" ..
             game.translate_string("\n") ..
             "level_vertex_id = " ..
             db.actor:level_vertex_id() ..
             game.translate_string("\n") ..
             "object_flags = 0xffffff0f" ..
             game.translate_string("\n") ..
             logic ..
             "visual_name = " ..
             sgm_functions.ReadVisual(name) ..
             game.translate_string("\n") .. "condition = 1" .. game.translate_string("\n") .. "upgrades = "
      elseif type == "explosive" then
         data = game.translate_string("\n") ..
             "[" ..
             allspawn_cfg_counting ..
             "]" ..
             game.translate_string("\n") ..
             "section_name = " ..
             name ..
             game.translate_string("\n") ..
             "name = " ..
             tostring(self.cfg_name_prefix_field:GetText()) ..
             "_" ..
             tostring(self.cfg_name_suffix_field:GetText()) ..
             "_" ..
             allspawn_cfg_counting ..
             game.translate_string("\n") ..
             "position = " ..
             db.actor:position().x ..
             "," ..
             db.actor:position().y ..
             "," ..
             db.actor:position().z ..
             game.translate_string("\n") ..
             "direction = 0,0,0" ..
             game.translate_string("\n") ..
             "version = 128" ..
             game.translate_string("\n") ..
             "script_version = 12" ..
             game.translate_string("\n") ..
             "game_vertex_id = " ..
             db.actor:game_vertex_id() ..
             game.translate_string("\n") ..
             "distance = 45.5" ..
             game.translate_string("\n") ..
             "level_vertex_id = " ..
             db.actor:level_vertex_id() ..
             game.translate_string("\n") ..
             "object_flags = 0xffffffbf" ..
             game.translate_string("\n") ..
             logic ..
             "visual_name = " ..
             sgm_functions.ReadVisual(name) ..
             game.translate_string("\n") .. "condition = 1" .. game.translate_string("\n") .. "upgrades = "
      elseif type == "other" then
         data = game.translate_string("\n") ..
             "[" ..
             allspawn_cfg_counting ..
             "]" ..
             game.translate_string("\n") ..
             "section_name = " ..
             name ..
             game.translate_string("\n") ..
             "name = " ..
             tostring(self.cfg_name_prefix_field:GetText()) ..
             "_" ..
             tostring(self.cfg_name_suffix_field:GetText()) ..
             "_" ..
             allspawn_cfg_counting ..
             game.translate_string("\n") ..
             "position = " ..
             db.actor:position().x ..
             "," ..
             db.actor:position().y ..
             "," ..
             db.actor:position().z ..
             game.translate_string("\n") ..
             "direction = 0,0,0" ..
             game.translate_string("\n") ..
             "version = 128" ..
             game.translate_string("\n") ..
             "script_version = 12" ..
             game.translate_string("\n") ..
             "game_vertex_id = " ..
             db.actor:game_vertex_id() ..
             game.translate_string("\n") ..
             "distance = 0" ..
             game.translate_string("\n") ..
             "level_vertex_id = " ..
             db.actor:level_vertex_id() ..
             game.translate_string("\n") ..
             "object_flags = 0xffffff3f" ..
             game.translate_string("\n") ..
             logic ..
             "visual_name = " ..
             sgm_functions.ReadVisual(name) ..
             game.translate_string("\n") .. "condition = 1" .. game.translate_string("\n") .. "upgrades = "
      end
   end
   if data == "" then return data end
   if only_read == true then
      return data
   else
      if self.check_another_mode:GetCheck() then
         debug_to_file("allspawn_another_mode.txt", data)
         sgm_g.create(name, db.actor:position().x, db.actor:position().y, db.actor:position().z,
            db.actor:level_vertex_id(),
            db.actor:game_vertex_id())
      else
         debug_to_file("allspawn_default_mode.txt", data)
         allspawn_cfg_counting = allspawn_cfg_counting + 1
      end
      allspawn_last_name = name
      allspawn_last_type = type
      allspawn_last_id = id
      --/create(name,db.actor:position().x,db.actor:position().y,db.actor:position().z,db.actor:level_vertex_id(),db.actor:game_vertex_id())
      --/sgm_packet.create_anomaly(name,allspawn_cfg_radius,db.actor:level_vertex_id(),db.actor:game_vertex_id(),nil,"toolkit_place_location")
   end
   return ""
end

function allspawn_editor:btn_close()
   if self.check_button_spawner:GetCheck() == true then
      allspawn_button_active = true
   else
      allspawn_button_active = false
   end
   self:HideDialog()
   set_ui_worked()
   allspawn_cfg_prefix = tostring(self.cfg_name_prefix_field:GetText())
   allspawn_cfg_suffix = tostring(self.cfg_name_suffix_field:GetText())
   if self.cfg_name_logic_path_field:GetText() ~= "" then
      allspawn_cfg_logic_path = tostring(self.cfg_name_logic_path_field:GetText())
   end
   if self.cfg_name_hiding_place_field:GetText() ~= "" then
      allspawn_cfg_hiding_place = tostring(self.cfg_name_hiding_place_field:GetText())
   end
end

function allspawn_editor:btn_read_example()
   if self.stations_list:GetSize() == 0 then return end
   local item = self.stations_list:GetSelectedItem()
   if not item then return end
   local item_name = tostring(item.name:GetText())
   local item_type = tostring(item.type)
   local item_id = tonumber(item.id:GetText())
   run_choose_box("yes", "allspawn_editor", self:check_data_by_id(item_name, item_type, item_id, true))
end

function allspawn_editor:btn_auto_print_activate()
   if allspawn_last_name == "nil" and self:get_currert_selected("name") ~= nil then
      allspawn_last_name = self:get_currert_selected("name")
      allspawn_last_type = self:get_currert_selected("type")
      allspawn_last_id = self:get_currert_selected("id")
   end
   if allspawn_last_name == "nil" then
      run_choose_box("yes", "allspawn_editor", game.translate_string("st_allspawn_auto_print_error"))
      return
   end
   self:btn_close()
   allspawn_auto_print_mode = true
end

function allspawn_editor:btn_auto_print_deactivate()
   sgm_flags.bool_allspawn_auto_print = false
   allspawn_auto_print_mode = false
end

function allspawn_editor_update()
   if allspawn_button_active == true then
      if get_hud():GetCustomStatic("main_task") ~= nil then
         if allspawn_button_action == false then
            allspawn_button_action = true
            allspawn_editor():btn_create()
            give_quick_news(game.translate_string("st_allspawn_auto_print_signal") .. " " .. allspawn_last_name)
         end
      else
         if allspawn_button_action == true then
            allspawn_button_action = false
         end
      end
   end
   local precond = allspawn_auto_print_mode == true and sgm_g.check_ui_worked()
   if precond then
      if sgm_flags.bool_allspawn_auto_print == false then
         sgm_flags.bool_allspawn_auto_print = true
         start_flague_timer("timer_allspawn_auto_print", allspawn_auto_print_delay + 500)
      end
      if sgm_flags.timer_allspawn_auto_print == 0 then
         allspawn_editor():btn_create()
         give_quick_news(game.translate_string("st_allspawn_auto_print_signal") .. " " .. allspawn_last_name)
         start_flague_timer("timer_allspawn_auto_print", allspawn_auto_print_delay)
      end
   end
end

------------------------------------------------------------------------------
--         Отладка позиции ГГ с возможностью ввода комментария              --
------------------------------------------------------------------------------
position_printer_last_comment = ""
class "position_printer" (CUIScriptWnd)
function position_printer:__init(object)
   super()
   self.object = object
   self:InitControls()
   self:InitCallBacks()
end

function position_printer:__finalize()
end

function position_printer:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.position_printer_form = xml:InitStatic("position_printer_form", self)
   self:Register(xml:Init3tButton("position_printer_form:btn_print_pos", self.position_printer_form), "btn_print_pos")
   self:Register(xml:Init3tButton("position_printer_form:btn_close", self.position_printer_form), "btn_close")
   self.position_comment_field = xml:InitEditBox("position_printer_form:position_comment_field",
      self.position_printer_form)
   self:Register(self.position_comment_field, "position_comment_field")
   if self.position_comment_field:GetText() == nil or self.position_comment_field:GetText() == "" then
      self.position_comment_field:SetText(position_printer_last_comment)
   end
end

function position_printer:InitCallBacks()
   self:AddCallback("btn_print_pos", ui_events.BUTTON_CLICKED, self.btn_print_pos, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
end

function position_printer:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
end

function position_printer:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function position_printer:btn_print_pos()
   news_manager.send_tip(db.actor, "Комментарий: " .. self.position_comment_field:GetText(), 0, "mutant_hunter", 2000,
      nil, "Позиция снята")
   debug_to_file("printed_points.txt",
      self.object:position().x ..
      "," ..
      self.object:position().y ..
      "," ..
      self.object:position().z ..
      "," ..
      self.object:level_vertex_id() .. "," .. self.object:game_vertex_id() ..
      "  = " .. self.position_comment_field:GetText())
   self:btn_close()
end

function position_printer:btn_close()
   self:HideDialog()
   set_ui_worked()
   position_printer_last_comment = self.position_comment_field:GetText()
end

------------------------------------------------------------------------------
--                       Загрузчик информационных блоков                    --
------------------------------------------------------------------------------
local information_control = nil
class "information_block" (CUIScriptWnd)
function information_block:__init()
   super()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   self.information_mb = CUIMessageBoxEx()
   self:Register(self.information_mb, "information_mb")
   self:AddCallback("information_mb", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMsgOk, self)
   self:AddCallback("information_mb", ui_events.MESSAGE_BOX_YES_CLICKED, self.OnMsgYes, self)
   self:AddCallback("information_mb", ui_events.MESSAGE_BOX_NO_CLICKED, self.OnMsgNo, self)
end

function information_block:Show(mb_type, reason_type, text, extra_value)
   if mb_type == "yes_or_no" or mb_type == "no_or_yes" then
      self.information_mb:InitMessageBox("message_box_yes_no")
   else
      self.information_mb:InitMessageBox("message_box_ok")
   end
   self.information_mb:SetText(text)
   self.information_mb:ShowDialog(true)
   self.reason_type = reason_type
   if extra_value ~= nil then
      self.extra_value = extra_value
   end
   if reason_type == "level_change" then
      set_ui_disabled()
   end
end

function information_block:OnMsgOk()
   if self.reason_type == "level_change" then
      set_ui_worked()
      sgm_flags.bool_travel_level_change = false
      sgm_flags.bool_throw_level_change = true
   end
   if self.reason_type == "remove_bad_outfit" then
      remove_item_from_slot(db.actor, 7)
   end
   self:block_select()
end

function information_block:OnMsgYes()
   if self.reason_type == "level_change" then
      set_ui_worked()
      sgm_flags.bool_travel_level_change = true
   end
   if self.reason_type == "remove_bad_outfit" then
      remove_item_from_slot(db.actor, 7)
   end
   self:block_select()
end

function information_block:OnMsgNo()
   if self.reason_type == "level_change" then
      set_ui_worked()
      sgm_flags.bool_travel_level_change = false
      sgm_flags.bool_throw_level_change = true
   end
   self:block_select()
end

function information_block:block_select()
end

function information_block_show(mb_type, reason_type, text, extra_value)
   if information_control == nil then
      information_control = sgm_ui_mod_elements.information_block()
   end
   information_control:Show(mb_type, reason_type, text, extra_value)
end

------------------------------------------------------------------------------
--                         Портативный архив                                --
------------------------------------------------------------------------------
local mobile_tool_target_title = "Предмет не выбран"
local mobile_tool_items = {}
local mobile_tool_available = 0
local mobile_tool_universal = true
class "mobile_item" (CUIListBoxItem)
function mobile_item:__init(height)
   super(height)
   self.title = self:GetTextItem()
   self:SetTextColor(GetARGB(255, 210, 210, 210))
   self.title:SetFont(GetFontLetterica18Russian())
   self.title:SetWndSize(vector2():set(249, height))
   self.title:SetEllipsis(true)
end

class "mobile_tool" (CUIScriptWnd)
function mobile_tool:__init(owner)
   super()
   self.owner = owner
   self:InitControls()
   self:InitCallBacks()
   if mobile_tool_universal == true then
      self:find_all_items()
   else
      self:find_available_items()
      self:FillList(mobile_tool_items)
   end
end

function mobile_tool:__finalize()
end

function mobile_tool:FillList(list)
   self.available_items_list:Clear()
   for k, v in pairs(list) do
      if v ~= nil then
         self:AddItemToList(v.title, v.section, v.id)
      end
   end
end

function mobile_tool:AddItemToList(title, section, id)
   local source = mobile_item(22)
   source.title:SetText(game.translate_string(title))
   self.available_items_list:AddExistingItem(source)
   source.section = section
   source.id = id
   --/source.title:SetWndPos(vector2():set(50,0))
end

function mobile_tool:find_available_items()
   local function calc(temp, item)
      if find_out_string(item:section(), "_knife") and find_out_string(item:section(), "_binoc") and (find_in_string(item:section(), "outfit") or find_in_string(item:section(), "helm") or find_in_string(item:section(), "wpn_")) then
         mobile_tool_items[item:section()] = {}
         mobile_tool_items[item:section()].title = sgm_functions.ReadCaption(item:section())
         mobile_tool_items[item:section()].section = item:section()
         mobile_tool_items[item:section()].id = item:id()
         mobile_tool_available = mobile_tool_available + 1
      end
   end
   db.actor:iterate_inventory(calc, db.actor)
end

function mobile_tool:find_all_items()
   self:FillListUn(allspawn_sections_panel_3)
end

function mobile_tool:FillListUn(list)
   self.available_items_list:Clear()
   for k, v in pairs(list) do
      if v ~= nil then
         self:AddItemToList(sgm_functions.ReadCaption(v.name), v.name, v.id)
         mobile_tool_available = mobile_tool_available + 1
      end
   end
end

function mobile_tool:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.mobile_tool_form = xml:InitStatic("mobile_tool_form", self)
   self:Register(xml:Init3tButton("mobile_tool_form:btn_close", self.mobile_tool_form), "btn_close")
   self:Register(xml:Init3tButton("mobile_tool_form:tab_1", self.mobile_tool_form), "tab_1")
   self:Register(xml:Init3tButton("mobile_tool_form:tab_2", self.mobile_tool_form), "tab_2")
   self:Register(xml:Init3tButton("mobile_tool_form:tab_3", self.mobile_tool_form), "tab_3")
   self:Register(xml:Init3tButton("mobile_tool_form:tab_4", self.mobile_tool_form), "tab_4")
   self.f_selected_item = xml:InitStatic("mobile_tool_form:f_selected_item", self.mobile_tool_form)
   self.selected_item_icon = xml:InitStatic("mobile_tool_form:selected_item_icon", self.mobile_tool_form)
   self.params_field = xml:InitStatic("mobile_tool_form:params_field", self.mobile_tool_form)
   self.available_items_list = xml:InitListBox("mobile_tool_form:available_items_list", self)
   self.available_items_list:ShowSelectedItem(true)
   self:Register(self.available_items_list, "available_items_list_window")
end

function mobile_tool:InitCallBacks()
   self:AddCallback("tab_1", ui_events.BUTTON_CLICKED, self.enter_tab_1, self)
   self:AddCallback("tab_2", ui_events.BUTTON_CLICKED, self.enter_tab_2, self)
   self:AddCallback("tab_3", ui_events.BUTTON_CLICKED, self.enter_tab_3, self)
   self:AddCallback("tab_4", ui_events.BUTTON_CLICKED, self.enter_tab_4, self)
   self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.btn_close, self)
   self:AddCallback("available_items_list_window", ui_events.WINDOW_LBUTTON_DB_CLICK, self.btn_select, self)
end

function mobile_tool:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
   if self.f_selected_item:TextControl():GetText() ~= mobile_tool_target_title then
      self.f_selected_item:TextControl():SetText(mobile_tool_target_title)
   end
end

function mobile_tool:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         self:btn_close()
      end
   end
   return true
end

function mobile_tool:btn_close()
   self:HideDialog()
   set_ui_worked()
   mobile_tool_items = nil
   mobile_tool_items = {}
   mobile_tool_available = 0
   mobile_tool_target_title = "Предмет не выбран"
   sgm_g.give_object_to_actor("mobile_tool")
   set_ui_worked()
   level.show_weapon(true)
end

function mobile_tool:btn_select()
   if self.available_items_list:GetSize() == 0 then return end
   local item = self.available_items_list:GetSelectedItem()
   if not item then return end
   local item_title = item.title:GetText()
   mobile_tool_target_title = game.translate_string(item_title)
   CUI_show_item_icon(self.selected_item_icon, item.section)
   --/self.params_field:TextControl():SetText(self:get_obj_params(item.section))
   self.params_field:TextControl():SetText(game.translate_string(sgm_functions.ReadDescription(item.section)))
end

function mobile_tool:get_weapon_ammo_slots(section)
   local ammo_s = sgm_functions.check_section_comma(system_ini(), section, "ammo_class", nil, 5)
   if ammo_s[5] ~= nil then
      return game.translate_string(tostring(ammo_s[1])) ..
          ", " ..
          game.translate_string(tostring(ammo_s[2])) ..
          ", " ..
          game.translate_string(tostring(ammo_s[3])) ..
          ", " .. game.translate_string(tostring(ammo_s[4])) .. ", " .. game.translate_string(tostring(ammo_s[5]))
   elseif ammo_s[4] ~= nil then
      return game.translate_string(tostring(ammo_s[1])) ..
          ", " ..
          game.translate_string(tostring(ammo_s[2])) ..
          ", " .. game.translate_string(tostring(ammo_s[3])) .. ", " .. game.translate_string(tostring(ammo_s[4]))
   elseif ammo_s[3] ~= nil then
      return game.translate_string(tostring(ammo_s[1])) ..
          ", " .. game.translate_string(tostring(ammo_s[2])) .. ", " .. game.translate_string(tostring(ammo_s[3]))
   elseif ammo_s[2] ~= nil then
      return game.translate_string(tostring(ammo_s[1])) .. ", " .. game.translate_string(tostring(ammo_s[2]))
   elseif ammo_s[1] ~= nil then
      return game.translate_string(tostring(ammo_s[1]))
   end
end

function mobile_tool:get_weapon_addons(section, type)
   local sc_s = read_number(section, "scope_status")
   local sl_s = read_number(section, "silencer_status")
   local gl_s = read_number(section, "grenade_launcher_status")
   if type == "sc" then
      if sc_s == 0 then
         return "нет"
      elseif sc_s == 1 then
         return "уже"
      elseif sc_s == 2 then
         return "да"
      end
   elseif type == "sl" then
      if sl_s == 0 then
         return "нет"
      elseif sl_s == 1 then
         return "уже"
      elseif sl_s == 2 then
         return "да"
      end
   elseif type == "gl" then
      if gl_s == 0 then
         return "нет"
      elseif gl_s == 1 then
         return "уже"
      elseif gl_s == 2 then
         return "да"
      end
   end
end

function mobile_tool:get_helm_antigas(section)
   local ha_s = read_boolean(section, "has_antigas")
   if ha_s == true then
      return "да"
   else
      return "нет"
   end
end

function mobile_tool:get_night_vision(section)
   local hn_s = sgm_g.read_string(section, "nightvision_sect")
   if hn_s == "effector_nightvision_1" then
      return "уровень 1"
   elseif hn_s == "effector_nightvision_2" then
      return "уровень 2"
   elseif hn_s == "effector_nightvision_3" then
      return "уровень 3"
   else
      return "отсутствует"
   end
end

function mobile_tool:get_obj_params(section)
   local obj_params
   if sgm_functions.ReadWeaponType(section) ~= "unknown" and sgm_functions.ReadWeaponType(section) ~= "grenade" then
      local w_type = "Тип оружия =" .. " " .. sgm_functions.ReadWeaponType(section)
      local w_ammo = "Боеприпасы =" .. " " .. self:get_weapon_ammo_slots(section)
      local w_sc = "Установка оптического прицела =" .. " " .. self:get_weapon_addons(section, "sc")
      local w_sl = "Установка глушителя =" .. " " .. self:get_weapon_addons(section, "sl")
      local w_gl = "Установка подствольного гранатомета =" .. " " .. self:get_weapon_addons(section, "gl")
      local w_sb = "Книга навыка =" ..
          " " .. game.translate_string(sgm_functions.ReadCaption(sgm_g.read_string(section, "increasing_skill_info")))
      local w_sd = "Бонус книги навыка =" .. " " .. read_number(section, "increasing_skill_point")
      local w_cs = "Износ при стрельбе =" .. " " .. read_number(section, "condition_shot_dec")
      obj_params = w_type ..
          game.translate_string("; ") ..
          w_ammo ..
          game.translate_string("; ") ..
          w_sc ..
          game.translate_string("; ") ..
          w_sl ..
          game.translate_string("; ") ..
          w_gl .. game.translate_string("; ") .. w_sb .. game.translate_string("; ") ..
          w_sd .. game.translate_string("; ") .. w_cs
   elseif sgm_functions.ReadOutfitType(section) ~= "unknown" then
      local o_type = "Тип бронекостюма =" .. " " .. sgm_functions.ReadOutfitType(section)
      local o_pl = "Коэфициент траты сил на передвижение в костюме =" .. " " .. read_number(section, "power_loss")
      local o_ha = "Внутренний противогаз =" .. " " .. self:get_helm_antigas(section)
      obj_params = o_type .. game.translate_string("; ") .. o_pl .. game.translate_string("; ") .. o_ha
   elseif sgm_functions.ReadHelmType(section) ~= "unknown" then
      local h_type = "Тип защитного шлема =" .. " " .. sgm_functions.ReadHelmType(section)
      local h_hn = "Внутренний ПНВ =" .. " " .. self:get_night_vision(section)
      obj_params = h_type .. game.translate_string("; ") .. h_hn
   else
      obj_params = ""
   end
   return obj_params
end

function mobile_tool:enter_tab_1()
   self:FillListUn(allspawn_sections_panel_3)
end

function mobile_tool:enter_tab_2()
   self:FillListUn(allspawn_sections_panel_4)
end

function mobile_tool:enter_tab_3()
   self:FillListUn(allspawn_sections_panel_5)
end

function mobile_tool:enter_tab_4()
   self:FillListUn(allspawn_sections_panel_6)
end

------------------------------------------------------------------------------
--                     Регистрация игрока в Sigerous Top                    --
------------------------------------------------------------------------------
sigerous_top_name = ""
sigerous_top_location = ""
sigerous_top_welcome = false
class "sigerous_top" (CUIScriptWnd)
function sigerous_top:__init(object)
   super()
   self.object = object
   self:InitControls()
   self:InitCallBacks()
end

function sigerous_top:__finalize()
end

function sigerous_top:InitControls()
   self:SetWndRect(Frect():set(0, 0, 1024, 768))
   local xml = CScriptXmlInit()
   xml:ParseFile("sgm_ui_mod_elements.xml")
   self.sigerous_top_form = xml:InitStatic("sigerous_top_form", self)
   self:start_button(xml, "btn_register")
   self.register_name_field = xml:InitEditBox("sigerous_top_form:register_name_field", self.sigerous_top_form)
   self:Register(self.register_name_field, "register_name_field")
end

function sigerous_top:InitCallBacks()
   self:AddCallback("btn_register", ui_events.BUTTON_CLICKED, self.btn_register, self)
end

function sigerous_top:Update()
   CUIScriptWnd.Update(self)
   if not object_alive(db.actor) then
      self:btn_close()
   end
   if sigerous_top_welcome == false then
      run_choose_box("yes", "sigerous_top", game.translate_string("st_sigerous_top_1_text"))
      sigerous_top_welcome = true
   end
   if self.register_name_field:GetText() == nil or self.register_name_field:GetText() == "" then
      self.get_btn_register:Show(false)
      self.get_btn_register:Enable(false)
   else
      if (sigerous_top_name == "" and string.len(tostring(self.register_name_field:GetText())) > 2 and string.len(tostring(self.register_name_field:GetText())) <= 10 and find_out_string(tostring(self.register_name_field:GetText()), " ")) then
         self.get_btn_register:Show(true)
         self.get_btn_register:Enable(true)
      elseif (sigerous_top_name ~= "" and string.len(tostring(self.register_name_field:GetText())) > 2 and string.len(tostring(self.register_name_field:GetText())) <= 12 and find_out_string(tostring(self.register_name_field:GetText()), " ")) then
         self.get_btn_register:Show(true)
         self.get_btn_register:Enable(true)
      else
         self.get_btn_register:Show(false)
         self.get_btn_register:Enable(false)
      end
   end
end

function sigerous_top:start_button(xml, button_name)
   self["get_" .. button_name] = xml:Init3tButton("sigerous_top_form:" .. button_name, self.sigerous_top_form)
   self:Register(self["get_" .. button_name], button_name)
end

function sigerous_top:OnKeyboard(dik, keyboard_action)
   CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)
   if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
      if dik == DIK_keys.DIK_ESCAPE then
         --/self:btn_close()
      end
   end
   return true
end

function sigerous_top:btn_register()
   if sigerous_top_name == "" then
      sigerous_top_name = tostring(self.register_name_field:GetText())
      sgm_functions.write_variable("sigerous_top_name", sigerous_top_name)
      run_choose_box("yes", "sigerous_top", game.translate_string("st_sigerous_top_2_text"))
      self.register_name_field:SetText("")
   else
      sigerous_top_location = tostring(self.register_name_field:GetText())
      sgm_functions.write_variable("sigerous_top_location", sigerous_top_location)
      sgm_functions.write_variable("sigerous_top_allowed", "true")
      sigerous_top_update()
      run_choose_box("yes", "sigerous_top", game.translate_string("st_sigerous_top_3_text"))
      self.register_name_field:SetText("")
   end
   if sigerous_top_location ~= "" then
      self:btn_close()
   end
end

function sigerous_top:btn_close()
   self:HideDialog()
   set_ui_worked()
end

---------------------------------//Copyright GeJorge//-----------------------------------------------
