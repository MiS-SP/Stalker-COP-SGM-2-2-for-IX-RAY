---=============================================================================================---
---------------------------------------------------------------------------------------------------
---------------------------------(”ниверсальна€ схема рестриктора)---------------------------------
---------------------------------------------------------------------------------------------------
---=============================================================================================---
class "action_universal"
function action_universal:__init(obj, storage)
   self.object = obj
   self.st = storage
end

function action_universal:reset_scheme()
   self.st.signals = {}
   self.level_change_hidden_spots = false
   sgm_flags.table_mod_schemes[self.object:id()] = {}
   sgm_flags.table_mod_schemes[self.object:id()].sound_played = nil
   sgm_flags.table_mod_schemes[self.object:id()].sound_first = true
   sgm_flags.table_mod_schemes[self.object:id()].sound_pause = 0
   sgm_flags.table_mod_schemes[self.object:id()].sound_setup = true
end

function action_universal:get_throw_zone_next_pos()
   return sgm_flags.table_mod_schemes[self.object:id()].throw_zone_points_table
       [math.random(table.getn(sgm_flags.table_mod_schemes[self.object:id()].throw_zone_points_table))]
end

function action_universal:get_random_theme()
   return sgm_flags.table_mod_schemes[self.object:id()].sound_zone_theme_table
       [math.random(table.getn(sgm_flags.table_mod_schemes[self.object:id()].sound_zone_theme_table))]
end

function action_universal:get_create_zone_spawn()
   return sgm_flags.table_mod_schemes[self.object:id()].create_zone_spawner_table
       [math.random(table.getn(sgm_flags.table_mod_schemes[self.object:id()].create_zone_spawner_table))]
end

function action_universal:get_ambush_zone_spawn()
   return sgm_flags.table_mod_schemes[self.object:id()].ambush_zone_creatures_table
       [math.random(table.getn(sgm_flags.table_mod_schemes[self.object:id()].ambush_zone_creatures_table))]
end

function action_universal:update(delta)
   local actor = db.actor
   local obj = self.object
   local scheme_param = sgm_flags.table_mod_schemes[self.object:id()]
   if xr_logic.try_switch_to_another_section(self.object, self.st, actor) then
      return
   end
   if scheme_param.update == nil then
      self:check_logic_condlists(self.object, self.st.saved_ini, self.st.saved_section)
      scheme_param.update = time_global() + 2500
   end
   if scheme_param.update ~= nil then
      if time_global() >= scheme_param.update then
         scheme_param.update = nil
      end
   end
   if scheme_param.scheme_type == "noweap_zone" then
      self:noweap_zone_activate(scheme_param)
   end
   if scheme_param.scheme_type == "throw_zone" then
      self:throw_zone_activate(scheme_param)
   end
   if scheme_param.scheme_type == "sound_zone" then
      self:sound_zone_activate(scheme_param)
   end
   if scheme_param.scheme_type == "ambush_zone" then
      if sgm_g.check_seconds(2) then
         self:ambush_zone_activate(scheme_param)
      end
   end
   if scheme_param.scheme_type == "create_zone" then
      if sgm_g.check_seconds(1) then
         if level.name() == scheme_param.create_zone_level then
            self:create_zone_activate(scheme_param, scheme_param.create_zone_when)
         end
      end
   end
   if scheme_param.scheme_type == "level_change_zone" then
      if scheme_param.level_change_cond == "true" or has_alife_info("show_mod_level_changers") then
         self:level_change_setup_spots(scheme_param)
      end
      if utils.npc_in_zone(db.actor, self.object) then
         if sgm_flags.table_level_changes[self.object:id()] == false then
            sgm_flags.table_level_changes[self.object:id()] = true
            if scheme_param.level_change_silent_travel == "true" then
               if scheme_param.level_change_cond == "true" or has_alife_info("show_mod_level_changers") then
                  set_ui_disabled()
                  sgm_flags.bool_travel_level_change = true
               end
            else
               if scheme_param.level_change_cond == "true" or has_alife_info("show_mod_level_changers") then
                  run_choose_box("yes_or_no", "level_change", scheme_param.level_change_message_possible)
               else
                  if scheme_param.level_change_hidden_mode == "false" then
                     run_choose_box("ok", "level_change", scheme_param.level_change_message_impossible)
                  end
               end
            end
         end
         if sgm_flags.bool_travel_level_change == true then
            local x = tonumber(scheme_param.level_change_travel_coord[1])
            local y = tonumber(scheme_param.level_change_travel_coord[2])
            local z = tonumber(scheme_param.level_change_travel_coord[3])
            local travel_hours = tonumber(scheme_param.level_change_travel_time[1])
            local travel_minutes = tonumber(scheme_param.level_change_travel_time[2])
            self:level_change_activate(x, y, z, scheme_param.level_change_autosave, travel_hours, travel_minutes)
         end
         if sgm_flags.bool_throw_level_change == true then
            local x = tonumber(scheme_param.level_change_throw_coord[1])
            local y = tonumber(scheme_param.level_change_throw_coord[2])
            local z = tonumber(scheme_param.level_change_throw_coord[3])
            local h = scheme_param.level_change_throw_coord[4]
            if sgm_g.exists(scheme_param.level_change_throw_coord[5]) then
               if sgm_g.exists(scheme_param.level_change_throw_coord[6]) then
                  if has_alife_info(tostring(scheme_param.level_change_throw_coord[6])) and sgm_g.dont_has_alife_info(tostring(scheme_param.level_change_throw_coord[5])) then
                     give_info(tostring(scheme_param.level_change_throw_coord[5]))
                  end
               else
                  if sgm_g.dont_has_alife_info(tostring(scheme_param.level_change_throw_coord[5])) then
                     give_info(tostring(scheme_param.level_change_throw_coord[5]))
                  end
               end
            end
            if sgm_g.exists(scheme_param.level_change_throw_coord[4]) then
               self:level_change_throw_actor(x, y, z, tonumber(h))
            else
               local dir_x = tonumber(scheme_param.level_change_throw_dir[1])
               local dir_y = tonumber(scheme_param.level_change_throw_dir[2])
               local dir_z = tonumber(scheme_param.level_change_throw_dir[3])
               self:level_change_throw_actor_with_dir(x, y, z, dir_x, dir_y, dir_z)
            end
            sgm_flags.bool_throw_level_change = false
         end
      else
         if sgm_flags.table_level_changes[self.object:id()] == nil or sgm_flags.table_level_changes[self.object:id()] == true then
            sgm_flags.table_level_changes[self.object:id()] = false
         end
      end
      self:level_change_check_and_complete()
   end
end

function action_universal:noweap_zone_activate(scheme_param)
   if scheme_param.noweap_zone_radius ~= 0 then
      if db.actor:position():distance_to(self.object:position()) <= scheme_param.noweap_zone_radius then
         if scheme_param.noweap_zone_cond == "true" then
            if sgm_g.dont_has_alife_info("opt_deactivate_no_wpn") then
               bind_stalker.hide_weapon("n_w_zone" .. self.object:id())
            end
         else
            bind_stalker.restore_weapon("n_w_zone" .. self.object:id())
         end
      elseif db.actor:position():distance_to(self.object:position()) > scheme_param.noweap_zone_radius then
         bind_stalker.restore_weapon("n_w_zone" .. self.object:id())
      end
   else
      if utils.npc_in_zone(db.actor, self.object) then
         if scheme_param.noweap_zone_cond == "true" then
            if sgm_g.dont_has_alife_info("opt_deactivate_no_wpn") then
               bind_stalker.hide_weapon("n_w_zone" .. self.object:id())
            end
         else
            bind_stalker.restore_weapon("n_w_zone" .. self.object:id())
         end
      else
         bind_stalker.restore_weapon("n_w_zone" .. self.object:id())
      end
   end
end

function action_universal:throw_zone_activate(scheme_param)
   if utils.npc_in_zone(db.actor, self.object) and sgm_g.exists(scheme_param.throw_zone_points) then
      if scheme_param.throw_zone_deprive == "true" then
         local active_item = db.actor:active_item()
         if active_item then
            local active_sect = active_item:section()
            if find_out_string(active_sect, "bolt") and find_out_string(active_sect, "knife") and find_out_string(active_sect, "binoc") then
               db.actor:drop_item(active_item)
            end
         end
      end
      game_hide_menu(1)
      play_snd_at_actor([[anomaly\teleport_work_1]])
      level.add_pp_effector("teleport.ppe", 7779, false)
      db.actor:set_actor_position(level.vertex_position(self:get_throw_zone_next_pos()))
   end
end

function action_universal:sound_zone_activate(scheme_param)
   if scheme_param.sound_zone_cond == "true" then
      if scheme_param.sound_pause - device():time_global() > 0 then return end
      if scheme_param.sound_setup == true then
         scheme_param.sound_setup = false
         scheme_param.sound_played = sound_object(self:get_random_theme())
         if scheme_param.sound_played ~= nil then
            scheme_param.sound_played:play_at_pos(self.object, self.object:position())
            if sgm_g.exists(scheme_param.sound_zone_range_min) and sgm_g.exists(scheme_param.sound_zone_range_max) then
               scheme_param.sound_played.min_distance = tonumber(scheme_param.sound_zone_range_min)
               scheme_param.sound_played.max_distance = tonumber(scheme_param.sound_zone_range_max)
            else
               scheme_param.sound_played.min_distance = 6
               scheme_param.sound_played.max_distance = 16
            end
         else
            self.st.signals["theme_end"] = true
         end
         scheme_param.sound_first = false
      end
      if scheme_param.sound_played ~= nil then
         if scheme_param.sound_played:playing() == false then
            if scheme_param.sound_first == false then
               self.st.signals["sound_end"] = true
            end
            scheme_param.sound_setup = true
            if scheme_param.sound_zone_pause_min ~= 0 or scheme_param.sound_zone_pause_max ~= 0 then
               local time = math.random(scheme_param.sound_zone_pause_min, scheme_param.sound_zone_pause_max)
               scheme_param.sound_pause = device():time_global() + time
            end
            scheme_param.sound_first = false
         else
            if scheme_param.snd_pos_timer == nil then
               scheme_param.sound_played:set_position(self.object:position())
               if scheme_param.sound_zone_volume ~= -1 then
                  scheme_param.sound_played.volume = scheme_param.sound_zone_volume
               end
               scheme_param.snd_pos_timer = time_global() + 3000
            elseif time_global() >= scheme_param.snd_pos_timer then
               scheme_param.sound_played:set_position(self.object:position())
               if scheme_param.sound_zone_volume ~= -1 then
                  scheme_param.sound_played.volume = scheme_param.sound_zone_volume
               end
               scheme_param.snd_pos_timer = time_global() + 3000
            end
         end
      end
   else
      if scheme_param.sound_played ~= nil then
         if scheme_param.sound_played:playing() == true then
            scheme_param.sound_played:stop()
         end
      end
   end
end

function action_universal:ambush_zone_activate(scheme_param)
   if scheme_param.ambush_zone_cond == "true" then
      if has_alife_info("opt_more_monsters") and utils.npc_in_zone(db.actor, self.object) then
         if read_obj_mod_param(self.object, "a_z_spawn") == nil and ((scheme_param.ambush_zone_reload == "true" and level.get_time_hours() <= 23 and level.get_time_hours() > 6) or (scheme_param.ambush_zone_reload == "false")) then
            if scheme_param.ambush_zone_full_spawn == "true" then
               local on_x = self.object:position().x +
                   math.random(-scheme_param.ambush_zone_radius, scheme_param.ambush_zone_radius)
               local on_y = self.object:position().y
               local on_z = self.object:position().z +
                   math.random(-scheme_param.ambush_zone_radius, scheme_param.ambush_zone_radius)
               for k, v in pairs(scheme_param.ambush_zone_creatures_table) do
                  if math.random(100) <= scheme_param.ambush_zone_prob * 100 then
                     create(v, on_x, on_y, on_z, self.object:level_vertex_id(), self.object:game_vertex_id())
                  end
               end
            else
               local on_x = self.object:position().x +
                   math.random(-scheme_param.ambush_zone_radius, scheme_param.ambush_zone_radius)
               local on_y = self.object:position().y
               local on_z = self.object:position().z +
                   math.random(-scheme_param.ambush_zone_radius, scheme_param.ambush_zone_radius)
               if math.random(100) <= scheme_param.ambush_zone_prob * 100 then
                  create(self:get_ambush_zone_spawn(), on_x, on_y, on_z, self.object:level_vertex_id(),
                     self.object:game_vertex_id())
               end
            end
            write_obj_mod_param(self.object, "a_z_spawn", "maded")
         end
      end
      if scheme_param.ambush_zone_reload == "true" and level.get_time_hours() >= 0 and level.get_time_hours() < 6 then
         if read_obj_mod_param(self.object, "a_z_spawn") ~= nil then
            clear_obj_mod_param(self.object, "a_z_spawn")
         end
      end
   end
end

function action_universal:create_zone_activate(scheme_param, when)
   if scheme_param.create_zone_cond == "true" then
      local var_fix = ""
      if when == "surge_day" then
         var_fix = "_sd"
      elseif when == "black_day" then
         var_fix = "_bd"
      elseif when == "every_night" then
         var_fix = "_an"
      end
      if sgm_flags["bool_" .. when .. "_end"] == true and (read_obj_mod_param(self.object, "c_z_allow" .. var_fix) == nil or read_obj_mod_param(self.object, "c_z_allow" .. var_fix) == "false") then
         write_obj_mod_param(self.object, "c_z_allow" .. var_fix, "true")
      elseif sgm_flags["bool_" .. when .. "_end"] == false and read_obj_mod_param(self.object, "c_z_allow" .. var_fix) ~= nil then
         clear_obj_mod_param(self.object, "c_z_allow" .. var_fix)
         clear_obj_mod_param(self.object, "c_z_spawned" .. var_fix)
      end
      if read_obj_mod_param(self.object, "c_z_allow" .. var_fix) ~= nil and read_obj_mod_param(self.object, "c_z_allow" .. var_fix) == "true" and read_obj_mod_param(self.object, "c_z_spawned" .. var_fix) == nil then
         if scheme_param.create_zone_full_spawn == "true" then
            local x = self.object:position().x +
                math.random(-scheme_param.create_zone_radius, scheme_param.create_zone_radius)
            local y = self.object:position().y
            local z = self.object:position().z +
                math.random(-scheme_param.create_zone_radius, scheme_param.create_zone_radius)
            for k, v in pairs(scheme_param.create_zone_spawner_table) do
               if math.random(100) <= scheme_param.create_zone_prob * 100 then
                  create(v, x, y, z, self.object:level_vertex_id(), self.object:game_vertex_id())
               end
            end
         else
            local x = self.object:position().x +
                math.random(-scheme_param.create_zone_radius, scheme_param.create_zone_radius)
            local y = self.object:position().y
            local z = self.object:position().z +
                math.random(-scheme_param.create_zone_radius, scheme_param.create_zone_radius)
            if math.random(100) <= scheme_param.create_zone_prob * 100 then
               create(self:get_create_zone_spawn(), x, y, z, self.object:level_vertex_id(), self.object:game_vertex_id())
            end
         end
         write_obj_mod_param(self.object, "c_z_spawned" .. var_fix, "used")
      end
   end
end

function action_universal:level_change_activate(x, y, z, autosave_name, trans_h, trans_m)
   if sgm_g.exists(autosave_name) then
      game_autosave(autosave_name, 2)
   end
   self.level_change_hidden_spots = true
   self:level_change_prepare()
   refresh_game_time(trans_h, trans_m)
   db.actor:set_actor_position(vector():set(x, y, z))
end

function action_universal:level_change_prepare()
   local scheme_param = sgm_flags.table_mod_schemes[self.object:id()]
   level.add_pp_effector("black.ppe", 7779, false)
   set_ui_disabled()
   game_hide_menu()
   level.hide_indicators_safe()
   level.show_weapon(false)
   level.disable_input()
   if sgm_g.exists(scheme_param.level_change_on_use) then
      sgm_functions.execute_condlist(self.object, self.st.saved_section, scheme_param.level_change_on_use)
   end
end

function action_universal:level_change_setup_spots(scheme_param)
   if sgm_g.exists(scheme_param.level_change_spot[1]) then
      if scheme_param.level_change_spot[3] == "false" or (scheme_param.level_change_spot[3] == "true" and self.level_change_hidden_spots == false) then
         sgm_g.add_spot_on_map(self.object:id(), scheme_param.level_change_spot[1], scheme_param.level_change_spot[2])
      elseif scheme_param.level_change_spot[3] == "true" and self.level_change_hidden_spots == true then
         sgm_g.remove_spot_on_map(self.object:id(), scheme_param.level_change_spot[1])
      end
   end
end

function action_universal:level_change_complete(x, y, z, target_info, h)
   db.actor:set_actor_position(vector():set(x, y, z))
   db.actor:set_actor_direction(h)
   disable_info(target_info)
end

function action_universal:level_change_throw_actor(x, y, z, h)
   db.actor:set_actor_position(vector():set(x, y, z))
   db.actor:set_actor_direction(-h)
end

function action_universal:level_change_throw_actor_with_dir(x, y, z, dir_x, dir_y, dir_z)
   db.actor:set_actor_position(vector():set(x, y, z))
   db.actor:set_actor_direction(-vector():set(dir_x, dir_y, dir_z):getH())
end

function action_universal:level_change_check(info_name, level_name, x, y, z, look_value)
   if has_alife_info(info_name) and level.name() == level_name then
      self:level_change_complete(x, y, z, info_name, look_value)
   end
end

function action_universal:level_change_check_and_complete()
   if has_alife_info("level_change_to_zaton_from_jupiter") and level.name() == "zaton" then
      self:level_change_complete(-304.545, 40.427, -422.733, "level_change_to_zaton_from_jupiter", 4.388)
   elseif has_alife_info("level_change_to_jupiter_from_zaton") and level.name() == "jupiter" then
      self:level_change_complete(434.752, 2.767, 392.020, "level_change_to_jupiter_from_zaton", 2.899)
   elseif has_alife_info("level_change_to_jupiter_from_pripyat") and level.name() == "jupiter" then
      self:level_change_complete(432.821, 27.674, -161.905, "level_change_to_jupiter_from_pripyat", 1.595)
   elseif has_alife_info("level_change_to_pripyat_from_jupiter") and level.name() == "pripyat" then
      self:level_change_complete(-136.022, -0.429, -388.156, "level_change_to_pripyat_from_jupiter", -0.551)
   elseif has_alife_info("level_change_to_underground_from_jupiter") and level.name() == "jupiter_underground" then
      self:level_change_complete(-48.770, 8.057, 429.852, "level_change_to_underground_from_jupiter", 3.130)
   elseif has_alife_info("level_change_to_underground_from_pripyat") and level.name() == "jupiter_underground" then
      self:level_change_complete(71.835, 4.230, -222.644, "level_change_to_underground_from_pripyat", 0.055)
   elseif has_alife_info("level_change_to_jupiter_from_underground") and level.name() == "jupiter" then
      self:level_change_complete(358.331, 27.367, -329.447, "level_change_to_jupiter_from_underground", 1.722)
   elseif has_alife_info("level_change_to_pripyat_from_underground") and level.name() == "pripyat" then
      self:level_change_complete(173.678, -0.573, -230.364, "level_change_to_pripyat_from_underground", 0.314)
   elseif has_alife_info("level_change_to_zaton_from_darkvalley") and level.name() == "zaton" then
      self:level_change_complete(-289.519, 40.949, -476.881, "level_change_to_zaton_from_darkvalley", 1.473)
   elseif has_alife_info("level_change_to_jupiter_from_darkvalley") and level.name() == "jupiter" then
      self:level_change_complete(-383.968, 21.301, 445.535, "level_change_to_jupiter_from_darkvalley", 2.522)
   elseif has_alife_info("level_change_to_darkvalley_from_zaton") and level.name() == "darkvalley" then
      self:level_change_complete(183.116, -3.287, -281.318, "level_change_to_darkvalley_from_zaton", 0.202)
   elseif has_alife_info("level_change_to_darkvalley_from_jupiter") and level.name() == "darkvalley" then
      self:level_change_complete(85.119, -4.321, -394.102, "level_change_to_darkvalley_from_jupiter", 0.538)
   elseif has_alife_info("level_change_to_darkvalley_from_jupiter_bubble") and level.name() == "darkvalley" then
      self:level_change_complete(-171.381, 2.4373, -181.533, "level_change_to_darkvalley_from_jupiter_bubble", 2.000)
   end
end

function action_universal:check_logic_condlists(obj, ini, section)
   local scheme_param       = sgm_flags.table_mod_schemes[obj:id()]
   --/if scheme_param.section==nil or (scheme_param.section~=nil and scheme_param.section~=self.st.saved_section) then --/Ѕез посто€нного обновлени€.
   --/   scheme_param.section = self.st.saved_section
   --\ќбщие команды\--
   scheme_param.scheme_type = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section, "scheme_type",
      "noweap_zone"))
   --\ оманды: NOWEAP_ZONE\--
   if scheme_param.scheme_type == "noweap_zone" then
      scheme_param.noweap_zone_cond   = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "noweap_zone_cond",
         "true"))
      scheme_param.noweap_zone_radius = to_number(sgm_functions.check_section_condlist(ini, section, "noweap_zone_radius",
         0))
   end
   --\ оманды: THROW_ZONE\--
   if scheme_param.scheme_type == "throw_zone" then
      scheme_param.throw_zone_points  = sgm_functions.cfg_get_string(ini, section, "throw_zone_points", nil)
      scheme_param.throw_zone_deprive = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "throw_zone_deprive",
         "false"))
      if sgm_g.exists(scheme_param.throw_zone_points) then
         scheme_param.throw_zone_points_table = parse_names(scheme_param.throw_zone_points)
      end
   end
   --\ оманды: SOUND_ZONE\--
   if scheme_param.scheme_type == "sound_zone" then
      scheme_param.sound_zone_cond      = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "sound_zone_cond",
         "true"))
      scheme_param.sound_zone_theme     = sgm_functions.cfg_get_string(ini, section, "sound_zone_theme", nil)
      scheme_param.sound_zone_volume    = to_number(sgm_functions.check_section_condlist(ini, section,
         "sound_zone_volume", -1))
      scheme_param.sound_zone_pause_min = to_number(sgm_functions.check_section_condlist(ini, section,
         "sound_zone_pause_min", 0))
      scheme_param.sound_zone_pause_max = to_number(sgm_functions.check_section_condlist(ini, section,
         "sound_zone_pause_max", 0))
      scheme_param.sound_zone_range_min = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "sound_zone_range_min", nil))
      scheme_param.sound_zone_range_max = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "sound_zone_range_max", nil))
      if sgm_g.exists(scheme_param.sound_zone_theme) then
         scheme_param.sound_zone_theme_table = parse_names(scheme_param.sound_zone_theme)
      end
   end
   --\ оманды: AMBUSH_ZONE\--
   if scheme_param.scheme_type == "ambush_zone" then
      scheme_param.ambush_zone_cond       = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "ambush_zone_cond", "true"))
      scheme_param.ambush_zone_creatures  = sgm_functions.cfg_get_string(ini, section, "ambush_zone_creatures", nil)
      scheme_param.ambush_zone_full_spawn = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "ambush_zone_full_spawn", "false"))
      scheme_param.ambush_zone_reload     = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "ambush_zone_reload", "false"))
      scheme_param.ambush_zone_radius     = to_number(sgm_functions.check_section_condlist(ini, section,
         "ambush_zone_radius", 10))
      scheme_param.ambush_zone_prob       = to_number(sgm_functions.check_section_condlist(ini, section,
         "ambush_zone_prob", 0.6))
      if sgm_g.exists(scheme_param.ambush_zone_creatures) then
         scheme_param.ambush_zone_creatures_table = parse_names(scheme_param.ambush_zone_creatures)
      end
   end
   --\ оманды: CREATE_ZONE\--
   if scheme_param.scheme_type == "create_zone" then
      scheme_param.create_zone_cond       = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "create_zone_cond", "true"))
      scheme_param.create_zone_when       = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "create_zone_when", "black_day"))
      scheme_param.create_zone_items      = sgm_functions.cfg_get_string(ini, section, "create_zone_items", nil)
      scheme_param.create_zone_level      = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "create_zone_level", "zaton"))
      scheme_param.create_zone_full_spawn = sgm_g.to_string(sgm_functions.check_section_condlist(ini, section,
         "create_zone_full_spawn", "false"))
      scheme_param.create_zone_radius     = to_number(sgm_functions.check_section_condlist(ini, section,
         "create_zone_radius", 5))
      scheme_param.create_zone_prob       = to_number(sgm_functions.check_section_condlist(ini, section,
         "create_zone_prob", 0.2))
      if sgm_g.exists(scheme_param.create_zone_items) then
         scheme_param.create_zone_spawner_table = parse_names(scheme_param.create_zone_items)
      end
   end
   --\ оманды: LEVEL_CHANGE_ZONE\--
   if scheme_param.scheme_type == "level_change_zone" then
      scheme_param.level_change_cond               = sgm_g.to_string(sgm_functions.check_section_condlist(ini,
         section,
         "level_change_cond", "true"))
      scheme_param.level_change_on_use             = sgm_functions.cfg_get_string(ini, section, "level_change_on_use",
         nil)
      scheme_param.level_change_travel_coord       = sgm_functions.check_section_comma(ini, section,
         "level_change_travel_coord", "0,0,0", 3)
      scheme_param.level_change_throw_coord        = sgm_functions.check_section_comma(ini, section,
         "level_change_throw_coord", "0,0,0,0,nil,nil", 6)
      scheme_param.level_change_throw_dir          = sgm_functions.check_section_comma(ini, section,
         "level_change_throw_dir", "0,0,0", 3)
      scheme_param.level_change_travel_time        = sgm_functions.check_section_comma(ini, section,
         "level_change_travel_time", "1,00", 2)
      scheme_param.level_change_spot               = sgm_functions.check_section_comma(ini, section, "level_change_spot",
         "nil,nil,false", 3)
      scheme_param.level_change_silent_travel      = sgm_g.to_string(sgm_functions.check_section_condlist(ini,
         section,
         "level_change_silent_travel", "false"))
      scheme_param.level_change_hidden_mode        = sgm_g.to_string(sgm_functions.check_section_condlist(ini,
         section,
         "level_change_hidden_mode", "false"))
      scheme_param.level_change_autosave           = sgm_g.to_string(sgm_functions.check_section_condlist(ini,
         section,
         "level_change_autosave", nil))
      scheme_param.level_change_message_possible   = sgm_g.to_string(sgm_functions.check_section_condlist(ini,
         section,
         "level_change_message_possible", "st_level_change_zone_yes_no_text"))
      scheme_param.level_change_message_impossible = sgm_g.to_string(sgm_functions.check_section_condlist(ini,
         section,
         "level_change_message_impossible", "st_level_change_zone_ok_text"))
   end
   --/end
end

function action_universal:deactivate()
   if sgm_flags.table_mod_schemes[self.object:id()].sound_played ~= nil then
      sgm_flags.table_mod_schemes[self.object:id()].sound_played:stop()
      sgm_flags.table_mod_schemes[self.object:id()].sound_played = nil
   end
end

------------------------------------
--           ѕланировка           --
------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)
   printf("DEBUG: add_to_binder: scheme='%s', section='%s'", scheme, section)
   local new_action = action_universal(npc, storage)
   xr_logic.subscribe_action_for_events(npc, storage, new_action)
end

function set_scheme(npc, ini, scheme, section, gulag_name)
   local st         = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
   st.logic         = xr_logic.cfg_get_switch_conditions(ini, section, npc)
   st.saved_ini     = ini
   st.saved_section = section
end

------------------------------//Copyright GeJorge//-------------------------------------------
