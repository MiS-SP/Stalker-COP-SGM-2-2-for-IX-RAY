--/ SGM in
local set_weapon_cond_ST_from=40
local set_weapon_cond_ST_before=85
local set_weapon_cond_AF_from=40
local set_weapon_cond_AF_before=70
--/ SGM out
local item_by_community = {}
local item_dependence = {}
local mul_by_level = {}
local count_by_level = {}
local always_keep_item = {}
ammo_sections = {}
local death_ini = ini_file("misc\\death_generic.ltx")
function init_drop_settings()
        --/ SGM in
	local community_list = {"stalker","dolg","freedom","bandit","army","zombied","ecolog","killer","monolith","bodyguard_a","bodyguard_b","bodyguard_c","bodyguard_d","bodyguard_e","bodyguard_f","monolith_alies","rasvet","agent","trader","bandit_alies","killer_enemy","killer_alies","stalker_alies","army_alies","alfa_force","renegade","night_stalker","mercenary","bandit_enemy"}
        --/ SGM out
	for k,v in pairs(community_list) do
		item_by_community[v] = {}
		if death_ini:section_exist(v) then
			local n = death_ini:line_count(v)
			local id, value = "", ""
			for i=0,n-1 do
			    result, id, value = death_ini:r_line(v,i,"","")
			   item_by_community[v][id] = 100*tonumber(value)
			end
		end
	end
	local n = death_ini:line_count("item_dependence")
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value = death_ini:r_line("item_dependence",i,"","")
		item_dependence[id] = {}
		local vvv = parse_names(value)
		for k,v in pairs(vvv) do
		   item_dependence[id][v] = true
		end
	end
	local level_name = level.name()
	if not death_ini:section_exist(level_name) then
		level_name = "default"
	end
	local n = death_ini:line_count(level_name)
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value=death_ini:r_line(level_name,i,"","")
		mul_by_level[id]=tonumber(value)
	end
	local item_count_section="item_count_" .. level.get_game_difficulty()
	local n = death_ini:line_count(item_count_section)
	for i=0,n-1 do
		result, id, value	= death_ini:r_line(item_count_section,i,"","")
		local t = parse_nums(value)
		if t[1] == nil then
			abort("Error on [death_ini] declaration. Section [%s], line [%s]", item_count_section, tostring(id))
		end
		local min = t[1]
		local max = t[2]
		if max == nil then
			max = min
		end
		if mul_by_level[id] == nil then
			mul_by_level[id] = 0
		end
		min = tonumber(min) * mul_by_level[id]
		max = tonumber(max) * mul_by_level[id]
		count_by_level[id] = {min = min, max = max}
	end
	local n = death_ini:line_count("keep_items")
	for i=0,n-1 do
		result, id, value	= death_ini:r_line("keep_items",i,"","")
		if value == "true" then
			always_keep_item[id] = true
		end
	end
	ammo_sections = {}
	local n = death_ini:line_count("ammo_sections")
	local id, value = "", ""
	for i=0,n-1 do
		result, id, value	= death_ini:r_line("ammo_sections",i,"","")
		ammo_sections[id] = true
	end
end


class "drop_manager"
function drop_manager:__init(npc)
	self.npc = npc
end
function drop_manager:create_release_item()
	local se_obj = alife():object(self.npc:id())
	if se_obj == nil or se_obj.death_droped == true then
		return
	end
	se_obj.death_droped = true
        --/ SGM in
        if sgm_g.find_in_string(self.npc:section(),"dead_body_") then
	   self.npc:iterate_inventory(corpse_exception, self.npc)
        end
        if sgm_g.find_in_string(self.npc:section(),"_trader") then
	   self.npc:iterate_inventory(release_all_immediately,self.npc)
        end
        if sgm_g.find_out_string(self.npc:section(),"_trader") and sgm_g.find_out_string(self.npc:section(),"dead_body_") then
	   self.npc:iterate_inventory(keep_item,self.npc)
        end
        --/ SGM out
	local ini = self.npc:spawn_ini()
	if ini and ini:section_exist("dont_spawn_loot") then
		return
	end
	local st		= db.storage[self.npc:id()]
	local st_ini 	= st and st.ini
	if st_ini and st_ini:line_exist(st.section_logic , "dont_spawn_loot") then
		return
	end
	local spawn_items = item_by_community[character_community(self.npc)]
	if spawn_items == nil then
		return
	end
        --/ SGM in
        local scheme_param=sgm_flags.table_mod_schemes[self.npc:id()]
        if scheme_param~=nil and (scheme_param.only_choose=="true" or (scheme_param.death_cleaning~=nil and scheme_param.death_cleaning[1]~=nil and tostring(scheme_param.death_cleaning[1])=="true")) then
           return
        end
	for k,v in pairs(spawn_items) do
            if sgm_g.find_in_string(self.npc:section(),"_trader") or sgm_g.find_in_string(sgm_functions.ReadCommunity(self.npc:section()),"bodyguard") then
	       return
            else
		if check_item_dependence(self.npc,k)==true then
			if count_by_level[k] == nil then
			   abort("Incorrect count settings in death_manager for object[%s]", k)
			end
			local number = math.ceil(math.random(count_by_level[k].min, count_by_level[k].max))
			create_items(self.npc, k, number, v)
		end
            end
	end
        --/ SGM out

end
--' Функция вызывается для каждого предмета, если вернет false то предмет удалится.
function keep_item(npc, item)
	local section = item:section()
	local ini = npc:spawn_ini()
        --/ SGM in
        if not sgm_g.check_death_item(section) then
           alife():release(alife():object(item:id()),true)
           return
        end
        --/ SGM out
	if ini and ini:section_exist("keep_items") and section~="guitar_a" and section~="harmonica_a" and section~="wpn_binoc" and section~="device_torch" and section~="device_pda" then
		return
	end
	if isArtefact(item) then
		return
	end
	if section == "bolt" then
		return
	end
	if always_keep_item[section] == true then
		return
	end
	if isWeapon(item) and not(get_clsid(item)==clsid.wpn_grenade_rgd5_s or get_clsid(item)==clsid.wpn_grenade_f1_s) then
		set_weapon_drop_condition(item,npc)
		return
	end
	if xr_corpse_detection.lootable_table[section] == true and ammo_sections[section] == nil then
		return
	end
	alife():release(alife():object(item:id()), true)
end
--/ SGM in
function corpse_exception(npc,item)
	local section = item:section()
	local ini = npc:spawn_ini()
        if not sgm_g.check_death_item(section) then
           alife():release(alife():object(item:id()),true)
           return
        end
	if ini and ini:section_exist("keep_items") and section~="guitar_a" and section~="harmonica_a" and section~="wpn_binoc" and section~="device_torch" then
		return
	end
	if isArtefact(item) then
		return
	end
	if section == "bolt" then
		return
	end
	if always_keep_item[section] == true then
		return
	end
	if isWeapon(item) and not(get_clsid(item)==clsid.wpn_grenade_rgd5_s or get_clsid(item)==clsid.wpn_grenade_f1_s) then
		set_weapon_drop_condition(item,npc)
		return
	end
	if xr_corpse_detection.lootable_table[section] == true and ammo_sections[section] == nil then
		return
	end
        alife():release(alife():object(item:id()), true)
end
function release_all_immediately(npc,item)
	local section=item:section()
	local ini = npc:spawn_ini()
        if not sgm_g.check_death_item(section) then
           alife():release(alife():object(item:id()),true)
           return
        end
	if ini and ini:section_exist("keep_items") and section~="guitar_a" and section~="harmonica_a" and section~="wpn_binoc" and section~="device_torch" and section~="device_pda" then
		return
	end
	if isArtefact(item) then
		return
	end
	if section == "bolt" then
		return
	end
	if always_keep_item[section] == true then
		return
	end
	if isWeapon(item) and not(get_clsid(item)==clsid.wpn_grenade_rgd5_s or get_clsid(item)==clsid.wpn_grenade_f1_s) then
		set_weapon_drop_condition(item,npc)
		return
	end
	if xr_corpse_detection.lootable_table[section] == true and ammo_sections[section] == nil then
		return
	end
	alife():release(alife():object(item:id()),true)
end
--/ SGM out
function set_weapon_drop_condition(item,npc)
        --/ SGM in
        local condition=math.random(set_weapon_cond_ST_from,set_weapon_cond_ST_before)/100
        if npc~=nil and sgm_g.find_in_string(npc:profile_name(),"alfa_") then
	   condition=math.random(set_weapon_cond_AF_from,set_weapon_cond_AF_before)/100
        end
        --/ SGM out
	item:set_condition(condition)	
end
function create_items(npc, section, number, rnd)
	if ammo_sections[section]==true then
	   if number > 0 then
	      create_ammo(section,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id(),number)
	   end
	else
	   for i=1,number do
	      if math.random(100)<=rnd then
		alife():create(section,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
	      end
	   end
	end
end
function check_item_dependence(npc, section)
	if item_dependence[section] == nil then
		return true
	end
	local d_flag = true
	for k,v in pairs(item_dependence[section]) do
	   local obj = npc:object(k)
	   if obj ~= nil and npc:marked_dropped(obj) ~= true then
		return true
	   end
	   d_flag = false
	end
	return d_flag
end