xr_box.ph_item_box.spawn_items = function(self)
	printf("SPAWN ITEMS")
	local spawn_items = {}
	local ini = self.obj:spawn_ini()
	local community = utils.cfg_get_string(ini, "drop_box", "community", self.obj, false, "", "def_box")
	local items = r_items(ini, "drop_box", "items", self.obj)
	if items ~= nil then
		printf("found items")
		for k, v in pairs(items) do
			create_obligatory_items(self.obj, v.section, v.count)
		end
		return
	end

	printf(" community = %s", community)
	--' Доспавниваем необходимое количество итемов:
	--' Необходимо составить список объектов которые могут быть заспавнены для персонажа
	local spawn_items = item_by_community[community]
	--' Если комьюнити задана не верно, то ставим дефолт и срем в лог.
	if spawn_items == nil then
		printf("xr_box: wrong community [%s] for box [%s]", community, self.obj:name())
		spawn_items = {}
		spawn_items = item_by_community["def_box"]
	end

	for k, v in pairs(spawn_items) do
		--' По каждому объекту необходимо получить количество
		--/ SGM in
		if k ~= nil and count_by_level[k] ~= nil then
			local number = math.ceil(math.random(count_by_level[k].min, count_by_level[k].max))
			--' Необходимо заспавнить нужное количество.
			create_items(self.obj, k, number, v)
		end
		--/ SGM out
	end
end
