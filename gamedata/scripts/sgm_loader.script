---==================================================================================================---
--------------------------------------------------------------------------------------------------------
--------------------------------(Загрузчик файлов Sigerous MOD)-----------------------------------------
--------------------------------------------------------------------------------------------------------
---==================================================================================================---

class "SGMLoader"

function SGMLoader:__init()
   self.managers = {
      save = sgm_save.get_save_manager(),
      battery = sgm_battery.get_battery_manager(),
      blackday = sgm_blackday.get_black_day(),
      hud = sgm_huds.get_hud_manager(),
      loot = sgm_loot_manager.SGMLootManager()
   }
   self:sigerous_mod_load()
end

function SGMLoader:sigerous_mod_load()
   self.managers.save:update()
   self.managers.battery:update()
   if sgm_g.check_seconds(3) then
      self.managers.blackday:initialize()
      self.managers.blackday:update()
   end
   self.managers.loot.update()
   if sgm_g.check_seconds(3) then
      sgm_cleaners.cleaners_main()
   end
   if sgm_g.check_seconds(1) then
      sgm_distance.distance_main()
   end
   sgm_effects.effects_main()
   if sgm_g.check_seconds(2) then
      sgm_reward.reward_main()
   end
   self.managers.hud:update()
   if sgm_g.check_seconds(4) then
      sgm_utils.utils_main_1()
   end
   if sgm_g.check_seconds(1) then
      sgm_utils.utils_main_2()
   end
   sgm_inventory.inventory_main()
   sgm_options.options_main()
   if sgm_g.check_seconds(1) then
      sgm_message.message_main()
   end
   sgm_queue.queue_main()
   if sgm_g.check_seconds(1) then
      sgm_tasks.task_main()
   end
   if sgm_g.check_seconds(3) then
      sgm_offline.offline_main()
   end
   sgm_variables.variables_main()
   if sgm_g.check_seconds(5) then
      sgm_spawner.spawner_main()
   end
   if sgm_g.check_seconds(30) then
      sgm_utilizator.utilizator_main()
   end
   if sgm_g.check_seconds(3) then
      sgm_respawn.respawn_main()
   end
   sgm_modules.module_actor(db.actor)
   if sgm_g.check_seconds(30) then
      sgm_mechanics.mechanics_main()
   end
   sgm_update.update_main()
   sgm_timers.timers_main()
end

function save(packet)
   self.managers.save:save(packet)
   battery_manager:save(packet)
end

function load(reader)
   self.managers.save:load(reader)
   battery_manager:load(reader)
end

----------------------
